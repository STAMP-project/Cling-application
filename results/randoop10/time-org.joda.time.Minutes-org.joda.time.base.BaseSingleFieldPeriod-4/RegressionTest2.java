import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("P0W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: P0W");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(349200000);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 100);
        boolean boolean11 = dateTime10.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str25 = dateTime9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        int int28 = dateTime9.get(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType26.isSupported(chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType26.getDurationType();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(355200035L, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) durationFieldType31, periodType32, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str25, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(0L);
        boolean boolean14 = mutableInterval2.containsNow();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean25 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean26 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval24);
        mutableInterval17.setDurationAfterStart(0L);
        boolean boolean29 = mutableInterval17.containsNow();
        boolean boolean30 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration31 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration32 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withFields(readablePartial43);
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.withEarlierOffsetAtOverlap();
        int int47 = dateTime44.getDayOfWeek();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology54.getZone();
        org.joda.time.DateTime dateTime58 = dateTime44.withChronology(chronology54);
        org.joda.time.Interval interval59 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period62 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration32);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration65 = duration32.toDuration();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 1, periodType68, chronology73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) '4', chronology73);
        org.joda.time.ReadablePartial readablePartial76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.withFields(readablePartial76);
        org.joda.time.Interval interval78 = duration65.toIntervalFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Minutes minutes79 = duration65.toStandardMinutes();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(minutes79);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        boolean boolean19 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withFields(readablePartial33);
        boolean boolean35 = instant22.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone38);
        int int40 = dateTime39.getDayOfMonth();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, periodType42, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology47.getZone();
        org.joda.time.DateTime dateTime51 = dateTime39.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime32.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(dateTimeZone53);
        org.joda.time.Days days55 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime54.getYearOfEra();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime54.toMutableDateTime(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(7, 2022, 366, 79, (-9), 490, dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withFields(readablePartial25);
        boolean boolean27 = instant14.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, periodType31, chronology36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) '4', chronology36);
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withFields(readablePartial39);
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.withEarlierOffsetAtOverlap();
        int int43 = dateTime40.getDayOfWeek();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.DateTime dateTime54 = dateTime40.withChronology(chronology50);
        org.joda.time.Interval interval55 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant57 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration28, 21);
        org.joda.time.Duration duration58 = duration28.toDuration();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone60);
        int int62 = dateTime61.getDayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfYear();
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.Period period67 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Hours hours68 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours69 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours70 = hours68.minus(hours69);
        org.joda.time.Duration duration71 = hours69.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone73);
        int int75 = dateTime74.getMillisOfDay();
        org.joda.time.Period period76 = duration71.toPeriodFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration28.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone79 = instant0.getZone();
        org.joda.time.MutableDateTime mutableDateTime80 = instant0.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3600010 + "'", int75 == 3600010);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(3600010, 60, 1, (int) (byte) 0, (-416397), 9, 489, (-4867796), periodType8);
        org.joda.time.Period period11 = org.joda.time.Period.millis(52);
        org.joda.time.Period period13 = period11.minusSeconds(22);
        org.joda.time.Period period15 = period11.withMillis(59);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str18 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period30 = org.joda.time.Period.days((-1));
        org.joda.time.Period period32 = period30.withWeeks((int) 'a');
        java.lang.String str33 = period30.toString();
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) period30);
        int int35 = mutablePeriod28.getMillis();
        org.joda.time.DurationFieldType durationFieldType37 = mutablePeriod28.getFieldType(0);
        int int38 = periodType17.indexOf(durationFieldType37);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period49 = org.joda.time.Period.days((-1));
        org.joda.time.Period period51 = period49.withWeeks((int) 'a');
        java.lang.String str52 = period49.toString();
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) period49);
        mutablePeriod47.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) '4', chronology65);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withFields(readablePartial68);
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfDay();
        org.joda.time.DateTime dateTime71 = dateTime69.withEarlierOffsetAtOverlap();
        int int72 = dateTime69.getDayOfWeek();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.Chronology chronology79 = interval78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 1, periodType74, chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology79.getZone();
        org.joda.time.DateTime dateTime83 = dateTime69.withChronology(chronology79);
        org.joda.time.Minutes minutes85 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType86 = null;
        int int87 = minutes85.get(durationFieldType86);
        int int89 = minutes85.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod90 = minutes85.toMutablePeriod();
        long long93 = chronology79.add((org.joda.time.ReadablePeriod) mutablePeriod90, (long) '#', (int) (short) 10);
        mutablePeriod47.setPeriod((long) (short) 100, (long) 2, chronology79);
        org.joda.time.DurationField durationField95 = chronology79.halfdays();
        org.joda.time.DurationField durationField96 = durationFieldType37.getField(chronology79);
        int int97 = period11.get(durationFieldType37);
        mutablePeriod9.add(durationFieldType37, (int) (short) -1);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YearMonthDayTime" + "'", str18, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P-1D" + "'", str33, "P-1D");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "P-1D" + "'", str52, "P-1D");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 6000035L + "'", long93 == 6000035L);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period27 = period22.withMonths(1);
        org.joda.time.Period period29 = period27.withSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks30 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as months is not precise in the period P1M-1D");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        org.joda.time.Minutes minutes2 = period0.toStandardMinutes();
        org.joda.time.Period period4 = period0.multipliedBy(7);
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter7.withParseType(periodType9);
        org.joda.time.format.PeriodParser periodParser11 = periodFormatter7.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatter7.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = period0.toString(periodFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNull(periodParser11);
        org.junit.Assert.assertNull(periodPrinter12);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Hours hours7 = duration4.toStandardHours();
        long long8 = duration4.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withFields(readablePartial28);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime29.withEarlierOffsetAtOverlap();
        int int32 = dateTime29.getDayOfWeek();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, periodType34, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology39.getZone();
        org.joda.time.DateTime dateTime43 = dateTime29.withChronology(chronology39);
        org.joda.time.Interval interval44 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period47 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration17, periodType49);
        org.joda.time.Duration duration52 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration17, 490);
        java.lang.Object obj53 = null;
        boolean boolean54 = duration4.equals(obj53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        boolean boolean16 = property14.isLeap();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) -1);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withYears(349200000);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100);
        org.joda.time.Weeks weeks7 = period6.toStandardWeeks();
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period10 = period6.withMinutes(60);
        int int11 = period6.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, periodType29, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) '4', chronology34);
        org.joda.time.DurationField durationField37 = chronology34.centuries();
        mutablePeriod8.add((long) (short) 10, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.dayOfWeek();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.Instant instant52 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, periodType55, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) '4', chronology60);
        org.joda.time.ReadablePartial readablePartial63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withFields(readablePartial63);
        boolean boolean65 = instant52.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology67 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone71);
        int int73 = dateTime72.getSecondOfMinute();
        org.joda.time.DateTime dateTime75 = dateTime72.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime72.toTimeOfDay();
        java.util.Locale locale77 = null;
        java.lang.String str78 = dateTimeField69.getAsShortText((org.joda.time.ReadablePartial) timeOfDay76, locale77);
        int int79 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay76);
        int int80 = dateTimeField41.getMinimumValue();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0" + "'", str78, "0");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Hours hours14 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType15 = hours14.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10, 0L, periodType15);
        org.joda.time.Period period17 = mutableInterval9.toPeriod(periodType15);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withFields(readablePartial28);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime29.withMillisOfDay(3);
        mutableInterval9.setEnd((org.joda.time.ReadableInstant) dateTime29);
        mutableInterval9.setStartMillis((long) 2);
        org.joda.time.Duration duration37 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 1, periodType40, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) '4', chronology45);
        org.joda.time.ReadablePartial readablePartial48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withFields(readablePartial48);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfDay();
        org.joda.time.DateTime dateTime51 = dateTime49.withEarlierOffsetAtOverlap();
        int int52 = dateTime49.getDayOfWeek();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1, periodType54, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology59.getZone();
        org.joda.time.DateTime dateTime63 = dateTime49.withChronology(chronology59);
        org.joda.time.Interval interval64 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period67 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = duration37.withMillis(100L);
        org.joda.time.Duration duration70 = duration37.toDuration();
        long long71 = duration37.getStandardDays();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTime dateTime75 = dateTime73.plusYears(7);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long83 = dateTimeZone79.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        boolean boolean85 = dateTimeZone79.isStandardOffset((long) (short) 100);
        org.joda.time.DateTime dateTime86 = dateTime75.toDateTime(dateTimeZone79);
        boolean boolean87 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 6000035L + "'", long83 == 6000035L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        boolean boolean19 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) '4', chronology28);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withFields(readablePartial31);
        boolean boolean33 = instant20.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) '4', chronology42);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withFields(readablePartial45);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfDay();
        org.joda.time.DateTime dateTime48 = dateTime46.withEarlierOffsetAtOverlap();
        int int49 = dateTime46.getDayOfWeek();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, periodType51, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology56.getZone();
        org.joda.time.DateTime dateTime60 = dateTime46.withChronology(chronology56);
        org.joda.time.Interval interval61 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Instant instant63 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration34, 21);
        org.joda.time.Duration duration64 = duration34.toDuration();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone66);
        int int68 = dateTime67.getDayOfMonth();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        org.joda.time.DateTime dateTime72 = property71.roundHalfFloorCopy();
        org.joda.time.Period period73 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Hours hours74 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours75 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours76 = hours74.minus(hours75);
        org.joda.time.Duration duration77 = hours75.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone79);
        int int81 = dateTime80.getMillisOfDay();
        org.joda.time.Period period82 = duration77.toPeriodFrom((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration83 = duration34.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTimeZone dateTimeZone85 = instant6.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(429, (int) (short) 0, 0, (-2147483648), (-4867796), (-52), dateTimeZone85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483648 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration64);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(hours74);
        org.junit.Assert.assertNotNull(hours75);
        org.junit.Assert.assertNotNull(hours76);
        org.junit.Assert.assertNotNull(duration77);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3600010 + "'", int81 == 3600010);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property3 = dateTime0.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime0.minusSeconds(4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(489);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant6 = instant1.minus(66269599200000L);
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant1.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone52);
        int int54 = dateTime53.getDayOfMonth();
        org.joda.time.DateTime dateTime56 = dateTime53.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime58 = dateTime56.withYear(0);
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime58, periodType60);
        org.joda.time.DateTime dateTime62 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int66 = dateTime64.get(dateTimeFieldType65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        int int6 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withFields(readablePartial18);
        boolean boolean20 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) '4', chronology29);
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withFields(readablePartial32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.withEarlierOffsetAtOverlap();
        int int36 = dateTime33.getDayOfWeek();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, periodType38, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.DateTime dateTime47 = dateTime33.withChronology(chronology43);
        org.joda.time.Interval interval48 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant50 = instant7.withDurationAdded((org.joda.time.ReadableDuration) duration21, 21);
        org.joda.time.DateTime dateTime51 = dateTime2.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Hours hours52 = duration21.toStandardHours();
        org.joda.time.Duration duration53 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 1, periodType56, chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) '4', chronology61);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withFields(readablePartial64);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        org.joda.time.DateTime dateTime67 = dateTime65.withEarlierOffsetAtOverlap();
        int int68 = dateTime65.getDayOfWeek();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 1, periodType70, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.DateTime dateTime79 = dateTime65.withChronology(chronology75);
        org.joda.time.Interval interval80 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period83 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration85 = duration53.withMillis(100L);
        org.joda.time.Duration duration86 = duration21.minus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        org.joda.time.Chronology chronology93 = interval92.getChronology();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 1, periodType88, chronology93);
        org.joda.time.DateTimeField dateTimeField95 = chronology93.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone96 = chronology93.getZone();
        org.joda.time.DateTimeField dateTimeField97 = chronology93.minuteOfHour();
        org.joda.time.Chronology chronology98 = chronology93.withUTC();
        org.joda.time.Period period99 = duration86.toPeriod(chronology93);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(chronology98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, periodType29, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) '4', chronology34);
        org.joda.time.DurationField durationField37 = chronology34.centuries();
        mutablePeriod8.add((long) (short) 10, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfHour();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.DurationFieldType durationFieldType8 = mutablePeriod6.getFieldType(3);
        mutablePeriod6.setMinutes(2);
        mutablePeriod6.addMinutes(19);
        mutablePeriod6.addSeconds(11);
        mutablePeriod6.addHours(3599);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime11.withCenturyOfEra(24);
        int int29 = dateTime28.getWeekOfWeekyear();
        boolean boolean31 = dateTime28.isBefore(43809973334L);
        org.joda.time.DateTime dateTime33 = dateTime28.withMillisOfSecond(23);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears((int) '#');
        int int13 = dateTime9.getCenturyOfEra();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.Hours hours31 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours32 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours33 = hours31.minus(hours32);
        org.joda.time.Duration duration34 = hours32.toStandardDuration();
        org.joda.time.DateTime dateTime35 = dateTime25.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration44 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withFields(readablePartial55);
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime56.withEarlierOffsetAtOverlap();
        int int59 = dateTime56.getDayOfWeek();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology66.getZone();
        org.joda.time.DateTime dateTime70 = dateTime56.withChronology(chronology66);
        org.joda.time.Interval interval71 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period74 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType76 = period75.getPeriodType();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration44, periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime35, periodType76);
        int int79 = mutablePeriod78.size();
        mutablePeriod78.setMillis(12);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean22 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean23 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval14.setDurationAfterStart(0L);
        boolean boolean26 = mutableInterval14.containsNow();
        boolean boolean27 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Hours hours29 = org.joda.time.Hours.hours((int) (byte) 100);
        mutableInterval9.setPeriodAfterStart((org.joda.time.ReadablePeriod) hours29);
        java.lang.Object obj31 = mutableInterval9.clone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMonths((-416397));
        boolean boolean36 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-09T04:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-05T00:59:59.999+97:00/1970-01-09T04:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-05T00:59:59.999+97:00/1970-01-09T04:59:59.999+97:00");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period25 = org.joda.time.Period.days((-1));
        org.joda.time.Period period27 = period25.withWeeks((int) 'a');
        java.lang.String str28 = period25.toString();
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) period25);
        mutablePeriod23.addMonths((int) (short) -1);
        mutablePeriod23.setSeconds(1970);
        int[] intArray35 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod23, 0L);
        org.joda.time.DateTime dateTime36 = dateTime6.toDateTime(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTime36.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P-1D" + "'", str28, "P-1D");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getYearOfEra();
        org.joda.time.DateTime.Property property51 = dateTime48.yearOfCentury();
        org.joda.time.DateTime dateTime52 = property51.roundCeilingCopy();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.MutableInterval mutableInterval59 = interval57.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        boolean boolean64 = interval57.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime67 = dateTime63.withYearOfEra(24);
        org.joda.time.DateTime.Property property68 = dateTime63.monthOfYear();
        boolean boolean69 = property51.equals((java.lang.Object) dateTime63);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration5 = duration2.withDurationAdded((-3600000L), 3);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        int int12 = minutes8.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod13 = minutes8.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType15 = minutes8.getFieldType(0);
        org.joda.time.Duration duration16 = minutes8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone18);
        int int20 = dateTime19.getMillisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis((int) '#');
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.DateTime dateTime33 = dateTime22.withChronology(chronology30);
        int int34 = dateTime33.getYearOfEra();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(periodType35);
        org.joda.time.Period period37 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Period period38 = duration5.toPeriodFrom(readableInstant6, periodType35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury((int) (byte) 10);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-349199990L), periodType35, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfYear();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3600010 + "'", int20 == 3600010);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        org.joda.time.DateTime dateTime12 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone15);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean28 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean29 = mutableInterval20.contains((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.DateTime dateTime31 = dateTime16.plus((org.joda.time.ReadablePeriod) weeks30);
        org.joda.time.LocalTime localTime32 = dateTime16.toLocalTime();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology41 = chronology37.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone44);
        int int46 = dateTime45.getSecondOfMinute();
        org.joda.time.DateTime dateTime48 = dateTime45.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay49 = dateTime45.toTimeOfDay();
        long long51 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay49, 3155695200000L);
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100);
        org.joda.time.Weeks weeks56 = period55.toStandardWeeks();
        org.joda.time.PeriodType periodType57 = weeks56.getPeriodType();
        org.joda.time.PeriodType periodType58 = periodType57.withMillisRemoved();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((-3600000L), (long) 42, periodType57, chronology65);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime32, (org.joda.time.ReadablePartial) timeOfDay49, periodType57);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = property6.compareTo((org.joda.time.ReadablePartial) localTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3155680800010L + "'", long51 == 3155680800010L);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        long long8 = interval3.toDurationMillis();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DateTime dateTime10 = interval3.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfSecond((-4867796));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4867796 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53L + "'", long8 == 53L);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType29);
        org.joda.time.Period period31 = mutableInterval23.toPeriod(periodType29);
        boolean boolean32 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval23);
        long long33 = mutableInterval9.getEndMillis();
        java.lang.Object obj34 = mutableInterval9.clone();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DurationField durationField56 = chronology40.halfdays();
        long long59 = durationField56.getDifferenceAsLong((long) 27425229, (-1353825273600090L));
        long long62 = durationField56.getDifferenceAsLong(1645513801217L, (long) 56);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31338548L + "'", long59 == 31338548L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 38090L + "'", long62 == 38090L);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone10);
        int int12 = dateTime11.getSecondOfMinute();
        int int13 = dateTime11.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone15);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMillis((int) '#');
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology27);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime32 = dateTime7.toDateTime(chronology27);
        org.joda.time.DateTime dateTime34 = dateTime7.plusYears(21);
        boolean boolean36 = dateTime34.isBefore(100L);
        boolean boolean38 = dateTime34.isAfter((long) 6);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, periodType42, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) '4', chronology47);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withFields(readablePartial50);
        boolean boolean52 = instant39.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property53 = dateTime49.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone55);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, periodType59, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology64.getZone();
        org.joda.time.DateTime dateTime68 = dateTime56.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime49.withZone(dateTimeZone67);
        long long71 = dateTimeZone67.nextTransition((long) 100);
        boolean boolean72 = dateTime34.equals((java.lang.Object) long71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, readableDuration73);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3600010 + "'", int17 == 3600010);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getMillis();
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod8.toMutablePeriod();
        mutablePeriod8.setMillis((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Interval interval26 = interval22.withEndMillis((long) (short) 100);
        long long27 = interval22.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod8.addMillis(2);
        java.lang.Object obj31 = mutablePeriod8.clone();
        mutablePeriod8.setDays(6);
        mutablePeriod8.setMinutes(187440000);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 53L + "'", long27 == 53L);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "P6DT187440000M0.055S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "P6DT187440000M0.055S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "P6DT187440000M0.055S");
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = minutes3.getFieldType(0);
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.Period period32 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 1645513780018L, periodType30);
        mutablePeriod33.setSeconds((-4867796));
        mutablePeriod33.setMillis(5);
        mutablePeriod33.addHours(3600);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Period period22 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType23);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.joda.time.Period period31 = new org.joda.time.Period(10L, periodType23, chronology29);
        boolean boolean32 = dateTimeFieldType18.isSupported(chronology29);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType18.getRangeDurationType();
        int int34 = dateTime2.get(dateTimeFieldType18);
        int int35 = dateTime2.getYearOfCentury();
        org.joda.time.LocalTime localTime36 = dateTime2.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = dateTime40.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days42 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime36, (org.joda.time.ReadablePartial) localDateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean13 = mutableInterval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType18);
        org.joda.time.Period period20 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType18);
        org.joda.time.PeriodType periodType22 = periodType18.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 60, periodType18);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, periodType26, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) '4', chronology31);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) '4', chronology42);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withFields(readablePartial45);
        boolean boolean47 = instant34.isAfter((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology49 = dateTime33.getChronology();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 56, periodType18, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.years();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = durationField51.add(60480000000L, 1598080187553L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1598080187553");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, periodType5, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        org.joda.time.DateTime dateTime14 = dateTime2.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime2.minusMillis((-90));
        org.joda.time.DateTime.Property property17 = dateTime2.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period28 = org.joda.time.Period.days((-1));
        org.joda.time.Period period30 = period28.withWeeks((int) 'a');
        java.lang.String str31 = period28.toString();
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) period28);
        mutablePeriod26.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 1, periodType39, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) '4', chronology44);
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withFields(readablePartial47);
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime48.withEarlierOffsetAtOverlap();
        int int51 = dateTime48.getDayOfWeek();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, periodType53, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.DateTime dateTime62 = dateTime48.withChronology(chronology58);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = null;
        int int66 = minutes64.get(durationFieldType65);
        int int68 = minutes64.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod69 = minutes64.toMutablePeriod();
        long long72 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod69, (long) '#', (int) (short) 10);
        mutablePeriod26.setPeriod((long) (short) 100, (long) 2, chronology58);
        org.joda.time.DurationField durationField74 = chronology58.halfdays();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTimeZone dateTimeZone76 = chronology58.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((java.lang.Object) property17, chronology58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P-1D" + "'", str31, "P-1D");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 6000035L + "'", long72 == 6000035L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean28 = mutableInterval23.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getMillisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime33.plusMillis((int) '#');
        int int37 = dateTime33.getYearOfEra();
        org.joda.time.Instant instant38 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.withFields(readablePartial49);
        boolean boolean51 = instant38.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration52 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, periodType55, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) '4', chronology60);
        org.joda.time.ReadablePartial readablePartial63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withFields(readablePartial63);
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfDay();
        org.joda.time.DateTime dateTime66 = dateTime64.withEarlierOffsetAtOverlap();
        int int67 = dateTime64.getDayOfWeek();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 1, periodType69, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone77 = chronology74.getZone();
        org.joda.time.DateTime dateTime78 = dateTime64.withChronology(chronology74);
        org.joda.time.Interval interval79 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Instant instant81 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration52, 21);
        org.joda.time.DateTime dateTime82 = dateTime33.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Chronology chronology83 = dateTime82.getChronology();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((long) 0, (long) 22, chronology83);
        boolean boolean85 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((java.lang.Object) mutableInterval84);
        mutablePeriod86.setMonths(27425229);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3600010 + "'", int34 == 3600010);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, periodType11, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) '4', chronology16);
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withFields(readablePartial19);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.withEarlierOffsetAtOverlap();
        int int23 = dateTime20.getDayOfWeek();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology30.getZone();
        org.joda.time.DateTime dateTime34 = dateTime20.withChronology(chronology30);
        org.joda.time.Interval interval35 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period38 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration8, periodType40);
        org.joda.time.Hours hours42 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours43 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours44 = hours42.minus(hours43);
        org.joda.time.Duration duration45 = hours43.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone47);
        int int49 = dateTime48.getMillisOfDay();
        org.joda.time.Period period50 = duration45.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.Duration duration53 = org.joda.time.Duration.ZERO;
        java.lang.String str54 = duration53.toString();
        boolean boolean55 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration53);
        long long57 = duration53.getStandardDays();
        boolean boolean58 = duration8.isEqual((org.joda.time.ReadableDuration) duration53);
        long long59 = duration53.getMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3600010 + "'", int49 == 3600010);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0S" + "'", str54, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property3 = dateTime0.hourOfDay();
        org.joda.time.DateTime dateTime5 = property3.setCopy(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = property3.setCopy("2022-02-26T08:10:11.548+97:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-26T08:10:11.548+97:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getName(100L);
        org.joda.time.DateTime dateTime9 = dateTime0.withZoneRetainFields(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getID();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone6.getName(220748400000L, locale12);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+97:00" + "'", str10, "+97:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+97:00" + "'", str13, "+97:00");
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days0.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period13 = org.joda.time.Period.days((-1));
        org.joda.time.Period period15 = period13.withWeeks((int) 'a');
        java.lang.String str16 = period13.toString();
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) period13);
        int int18 = mutablePeriod11.getMillis();
        org.joda.time.DurationFieldType durationFieldType20 = mutablePeriod11.getFieldType(0);
        mutablePeriod2.add(durationFieldType20, 10);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean33 = mutableInterval28.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean34 = mutableInterval25.contains((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval25.setDurationAfterStart(0L);
        boolean boolean37 = mutableInterval25.containsNow();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval25.copy();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) mutableInterval25);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(2022, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2022");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P-1D" + "'", str16, "P-1D");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableInterval38);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period(59, 3599, 365, (int) ' ', 1935, 11, (-4), 1935, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((int) (byte) 10);
        org.joda.time.Hours hours2 = weeks1.toStandardHours();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        java.util.Locale locale12 = null;
        int int13 = property6.getMaximumShortTextLength(locale12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone18);
        int int20 = dateTime19.getSecondOfMinute();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Hours hours24 = org.joda.time.Hours.EIGHT;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period35 = org.joda.time.Period.days((-1));
        org.joda.time.Period period37 = period35.withWeeks((int) 'a');
        java.lang.String str38 = period35.toString();
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) period35);
        int int40 = mutablePeriod33.getMillis();
        org.joda.time.DurationFieldType durationFieldType42 = mutablePeriod33.getFieldType(0);
        int int43 = hours24.get(durationFieldType42);
        mutablePeriod22.set(durationFieldType42, (int) (short) 0);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str48 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (short) -1, periodType47);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period60 = org.joda.time.Period.days((-1));
        org.joda.time.Period period62 = period60.withWeeks((int) 'a');
        java.lang.String str63 = period60.toString();
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) period60);
        int int65 = mutablePeriod58.getMillis();
        org.joda.time.DurationFieldType durationFieldType67 = mutablePeriod58.getFieldType(0);
        int int68 = periodType47.indexOf(durationFieldType67);
        int int69 = mutablePeriod22.indexOf(durationFieldType67);
        java.lang.Object obj70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType72 = period71.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(obj70, periodType72);
        java.lang.String str74 = periodType72.toString();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.Chronology chronology81 = interval80.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 1, periodType76, chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology81.getZone();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.minuteOfHour();
        org.joda.time.DurationField durationField86 = chronology81.weeks();
        org.joda.time.Period period87 = new org.joda.time.Period((java.lang.Object) mutablePeriod22, periodType72, chronology81);
        org.joda.time.Period period88 = new org.joda.time.Period((long) 26, (-1104537599948L), periodType72);
        org.joda.time.Period period89 = new org.joda.time.Period((long) 7, periodType72);
        boolean boolean90 = property6.equals((java.lang.Object) 7);
        int int91 = property6.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "P-1D" + "'", str38, "P-1D");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "YearMonthDayTime" + "'", str48, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P-1D" + "'", str63, "P-1D");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PeriodType[Standard]" + "'", str74, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 366 + "'", int91 == 366);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        int int18 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime2.minusHours((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(59);
        org.joda.time.DateTime dateTime24 = dateTime20.withDayOfMonth(4);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, dateTimeZone27);
        boolean boolean30 = dateTimeZone27.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        java.lang.String str53 = dateTimeZone51.getName(100L);
        org.joda.time.DateTime dateTime54 = dateTime45.withZoneRetainFields(dateTimeZone51);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology59.getZone();
        java.lang.String str62 = dateTimeZone60.getName(100L);
        org.joda.time.DateTime dateTime63 = dateTime54.withZoneRetainFields(dateTimeZone60);
        org.joda.time.Chronology chronology64 = chronology42.withZone(dateTimeZone60);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1353793219200090L), 187200000L, chronology64);
        boolean boolean66 = durationFieldType33.isSupported(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime32.toDateTime(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean69 = dateTime32.isSupported(dateTimeFieldType68);
        int int70 = dateTime20.get(dateTimeFieldType68);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+97:00" + "'", str53, "+97:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+97:00" + "'", str62, "+97:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 75600010 + "'", int70 == 75600010);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 26, 27425229L);
        mutablePeriod2.clear();
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long13 = dateTimeZone9.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = dateTime24.toLocalDateTime();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str28 = periodType27.getName();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) -1, periodType27);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period40 = org.joda.time.Period.days((-1));
        org.joda.time.Period period42 = period40.withWeeks((int) 'a');
        java.lang.String str43 = period40.toString();
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) period40);
        int int45 = mutablePeriod38.getMillis();
        org.joda.time.DurationFieldType durationFieldType47 = mutablePeriod38.getFieldType(0);
        int int48 = periodType27.indexOf(durationFieldType47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime25, periodType27);
        boolean boolean50 = dateTimeZone9.isLocalDateTimeGap(localDateTime25);
        java.lang.String str52 = dateTimeZone9.getShortName((long) 2);
        java.lang.String str54 = dateTimeZone9.getShortName(6216719587200001L);
        long long56 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, 1672531200000L);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone2);
        int int58 = dateTime57.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 6000035L + "'", long13 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YearMonthDayTime" + "'", str28, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P-1D" + "'", str43, "P-1D");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+97:00" + "'", str52, "+97:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+97:00" + "'", str54, "+97:00");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1672531200000L + "'", long56 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 959 + "'", int58 == 959);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(4, (int) '#', 3600052, (int) (short) -1, 21, (-1), 100, 22);
        mutablePeriod8.setValue(0, 366);
        mutablePeriod8.addYears(0);
        org.joda.time.DurationFieldType durationFieldType15 = mutablePeriod8.getFieldType((int) (short) 1);
        java.lang.String str16 = mutablePeriod8.toString();
        mutablePeriod8.setMinutes((int) (byte) 10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P366Y35M3600052W-1DT21H-1M100.022S" + "'", str16, "P366Y35M3600052W-1DT21H-1M100.022S");
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        long long15 = mutableInterval11.getEndMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean26 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        org.joda.time.Period period31 = mutableInterval11.toPeriod(periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone33);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.Instant instant49 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, periodType52, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) '4', chronology57);
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withFields(readablePartial60);
        boolean boolean62 = instant49.isAfter((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology64 = dateTime48.getChronology();
        boolean boolean65 = mutableInterval38.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime66 = dateTime48.toDateTime();
        boolean boolean67 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod1.add((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Instant instant69 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 1, periodType72, chronology77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) '4', chronology77);
        org.joda.time.ReadablePartial readablePartial80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.withFields(readablePartial80);
        boolean boolean82 = instant69.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period84 = org.joda.time.Period.days((-1));
        org.joda.time.Period period86 = period84.withWeeks((int) 'a');
        org.joda.time.Period period88 = period84.plusMonths((int) (short) -1);
        org.joda.time.Period period90 = period84.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime91 = dateTime79.plus((org.joda.time.ReadablePeriod) period84);
        mutableInterval11.setStart((org.joda.time.ReadableInstant) dateTime91);
        long long93 = mutableInterval11.getStartMillis();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-86399948L) + "'", long93 == (-86399948L));
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "yearOfCentury" + "'", str1, "yearOfCentury");
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period11 = org.joda.time.Period.days((-1));
        org.joda.time.Period period13 = period11.withWeeks((int) 'a');
        java.lang.String str14 = period11.toString();
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) period11);
        int int16 = mutablePeriod9.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = mutablePeriod9.getFieldType(0);
        int int19 = hours0.get(durationFieldType18);
        org.joda.time.Hours hours21 = hours0.multipliedBy(100);
        org.joda.time.Hours hours22 = hours0.negated();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Hours hours24 = org.joda.time.Hours.standardHoursIn(readablePeriod23);
        org.joda.time.Hours hours25 = hours0.minus(hours24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        java.lang.String str34 = dateTimeZone32.getName(100L);
        org.joda.time.DateTime dateTime35 = dateTime26.withZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        java.lang.String str43 = dateTimeZone41.getName(100L);
        org.joda.time.DateTime dateTime44 = dateTime35.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        java.lang.String str53 = dateTimeZone51.getName(100L);
        org.joda.time.DateTime dateTime54 = dateTime45.withZoneRetainFields(dateTimeZone51);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = dateTime35.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) hours25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Hours hours59 = org.joda.time.Hours.hours((int) (byte) 100);
        org.joda.time.Hours hours61 = hours59.plus(2022);
        org.joda.time.Hours hours62 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours63 = hours59.minus(hours62);
        boolean boolean64 = hours25.isLessThan(hours63);
        org.joda.time.Hours hours66 = hours25.plus((int) (short) 10);
        org.joda.time.Hours hours67 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours68 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours69 = hours67.minus(hours68);
        org.joda.time.Hours hours70 = hours66.plus(hours69);
        java.lang.Object obj71 = null;
        boolean boolean72 = hours69.equals(obj71);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P-1D" + "'", str14, "P-1D");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+97:00" + "'", str34, "+97:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+97:00" + "'", str43, "+97:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+97:00" + "'", str53, "+97:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertNotNull(hours63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getYears();
        mutablePeriod8.addHours((int) (short) 1);
        org.joda.time.PeriodType periodType18 = mutablePeriod8.getPeriodType();
        java.lang.Object obj19 = mutablePeriod8.clone();
        int int20 = mutablePeriod8.getMinutes();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "P-1DT1H");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "P-1DT1H");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "P-1DT1H");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Days days50 = org.joda.time.Days.ONE;
        int int51 = days50.getDays();
        int int52 = days50.size();
        org.joda.time.Days days54 = days50.dividedBy((int) (short) -1);
        org.joda.time.Days days55 = days49.minus(days54);
        org.joda.time.DurationFieldType durationFieldType56 = days49.getFieldType();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(durationFieldType56);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.joda.time.Period period8 = new org.joda.time.Period((-2), 42, (-9), 52, 27425229, (int) '#', 7, 3600);
        int int9 = period8.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = period8.multipliedBy(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 27425229 * 1970");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27425229 + "'", int9 == 27425229);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        java.lang.String str17 = property14.getName();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property14.getAsShortText(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone21);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean34 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTime dateTime37 = dateTime22.plus((org.joda.time.ReadablePeriod) weeks36);
        long long38 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime39 = property14.roundHalfFloorCopy();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, periodType42, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) '4', chronology47);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withFields(readablePartial50);
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone57);
        int int59 = dateTime58.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime58.getZone();
        boolean boolean62 = dateTime58.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean73 = mutableInterval68.isBefore((org.joda.time.ReadableInterval) mutableInterval72);
        boolean boolean74 = mutableInterval65.contains((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.Weeks weeks75 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval72);
        long long76 = mutableInterval72.getEndMillis();
        org.joda.time.DateTime dateTime77 = mutableInterval72.getEnd();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTime dateTime79 = dateTime58.toDateTime(chronology78);
        org.joda.time.DateTime dateTime80 = dateTime58.toDateTime();
        long long81 = property55.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean82 = dateTime58.isBeforeNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType83.getDurationType();
        int int85 = dateTime58.get(dateTimeFieldType83);
        boolean boolean86 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfWeek" + "'", str17, "dayOfWeek");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Mon" + "'", str19, "Mon");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime10 = property6.getDateTime();
        org.joda.time.DateTimeField dateTimeField11 = property6.getField();
        java.lang.String str12 = property6.getAsText();
        org.joda.time.Interval interval13 = property6.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "5" + "'", str12, "5");
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone14);
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) '4', chronology38);
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withFields(readablePartial41);
        boolean boolean43 = instant30.isAfter((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology45 = dateTime29.getChronology();
        boolean boolean46 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration47 = mutableInterval19.toDuration();
        org.joda.time.Minutes minutes48 = duration47.toStandardMinutes();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, periodType51, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) '4', chronology56);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withFields(readablePartial59);
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime63 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        int int66 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime11.getWeekyear();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        boolean boolean7 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser8 = periodFormatter2.getParser();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean19 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean20 = mutableInterval11.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Weeks weeks22 = weeks21.negated();
        org.joda.time.Weeks weeks24 = weeks22.plus((int) (byte) -1);
        org.joda.time.Weeks weeks26 = weeks22.minus(22);
        org.joda.time.Weeks weeks28 = weeks26.minus((int) '#');
        org.joda.time.Weeks weeks30 = weeks28.dividedBy(349200000);
        org.joda.time.Weeks weeks32 = weeks30.plus(2);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean43 = mutableInterval38.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        boolean boolean44 = mutableInterval35.contains((org.joda.time.ReadableInterval) mutableInterval42);
        mutableInterval35.setDurationAfterStart(0L);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval35.copy();
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval47);
        boolean boolean49 = weeks30.isLessThan(weeks48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = periodFormatter2.print((org.joda.time.ReadablePeriod) weeks30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(periodParser8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(355200035L, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField9 = chronology5.days();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology5.getDateTimeMillis((int) (short) 10, (-4), 3599, 429, 3600, (int) (short) 100, 187440000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 429 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        boolean boolean31 = instant18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str33 = dateTime17.toString();
        boolean boolean34 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime36 = dateTime17.plusHours(349200000);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = minutes40.get(durationFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = minutes40.getFieldType();
        boolean boolean44 = minutes38.isGreaterThan(minutes40);
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes40, (org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.Chronology chronology48 = instant45.getChronology();
        org.joda.time.Chronology chronology49 = chronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.joda.time.DateTime dateTime51 = dateTime36.toDateTime(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = chronology48.getDateTimeMillis(29422512, (-52), (-2), 1500052, 1439, 6, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1500052 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str33, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        boolean boolean3 = periodType0.isSupported(durationFieldType2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withEarlierOffsetAtOverlap();
        int int21 = dateTime18.getDayOfWeek();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTime dateTime32 = dateTime18.withChronology(chronology28);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = minutes34.get(durationFieldType35);
        int int38 = minutes34.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod39 = minutes34.toMutablePeriod();
        long long42 = chronology28.add((org.joda.time.ReadablePeriod) mutablePeriod39, (long) '#', (int) (short) 10);
        org.joda.time.Period period43 = mutablePeriod39.toPeriod();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        mutablePeriod39.add((long) 60, chronology46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(684034L, 1645513802047L, chronology46);
        mutableInterval48.setStartMillis((-106851L));
        mutablePeriod4.add((org.joda.time.ReadableInterval) mutableInterval48);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval48.setDurationAfterStart((-599612399948L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YearMonthDayTime" + "'", str1, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6000035L + "'", long42 == 6000035L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        int int11 = dateTimeField9.getMinimumValue();
        long long13 = dateTimeField9.roundHalfEven((long) 349200000);
        java.lang.String str14 = dateTimeField9.toString();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 601200000L + "'", long13 == 601200000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str14, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str25 = dateTime9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        int int28 = dateTime9.get(dateTimeFieldType26);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str25, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        java.lang.String str26 = period22.toString();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str29 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) -1, periodType28);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period41 = org.joda.time.Period.days((-1));
        org.joda.time.Period period43 = period41.withWeeks((int) 'a');
        java.lang.String str44 = period41.toString();
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) period41);
        int int46 = mutablePeriod39.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = mutablePeriod39.getFieldType(0);
        int int49 = periodType28.indexOf(durationFieldType48);
        boolean boolean50 = period22.equals((java.lang.Object) int49);
        org.joda.time.Hours hours51 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours52 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours53 = hours51.minus(hours52);
        boolean boolean54 = period22.equals((java.lang.Object) hours51);
        org.joda.time.Period period55 = hours51.toPeriod();
        int int57 = period55.getValue((int) (byte) 1);
        org.joda.time.Period period59 = period55.plusMonths((-90));
        org.joda.time.Hours hours60 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType61 = hours60.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withMinutesRemoved();
        org.joda.time.Period period63 = period55.withPeriodType(periodType61);
        org.joda.time.Period period65 = period55.multipliedBy((-52));
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, dateTimeZone68);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone72);
        int int74 = dateTime73.getSecondOfMinute();
        int int75 = dateTime73.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone77);
        int int79 = dateTime78.getMillisOfDay();
        org.joda.time.DateTime dateTime81 = dateTime78.plusMillis((int) '#');
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 1, periodType84, chronology89);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((long) '4', chronology89);
        org.joda.time.DateTime dateTime92 = dateTime81.withChronology(chronology89);
        org.joda.time.MutableDateTime mutableDateTime93 = dateTime73.toMutableDateTime(chronology89);
        int int94 = dateTimeZone68.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property95 = dateTime73.centuryOfEra();
        org.joda.time.DateTime dateTime97 = property95.addWrapFieldToCopy(429);
        org.joda.time.YearMonthDay yearMonthDay98 = dateTime97.toYearMonthDay();
        boolean boolean99 = period55.equals((java.lang.Object) yearMonthDay98);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P-1M-1D" + "'", str26, "P-1M-1D");
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YearMonthDayTime" + "'", str29, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P-1D" + "'", str44, "P-1D");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3600010 + "'", int75 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3600010 + "'", int79 == 3600010);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(mutableDateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 349200000 + "'", int94 == 349200000);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(yearMonthDay98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days1 = org.joda.time.Days.ONE;
        int int2 = days1.getDays();
        int int3 = days1.size();
        org.joda.time.Days days5 = days1.dividedBy((int) (short) -1);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        boolean boolean7 = days5.isLessThan(days6);
        boolean boolean8 = days0.isLessThan(days5);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        boolean boolean10 = days0.isLessThan(days9);
        org.joda.time.Days days11 = org.joda.time.Days.MAX_VALUE;
        java.lang.String str12 = days11.toString();
        org.joda.time.Days days14 = days11.plus((-97));
        org.joda.time.Days days15 = days11.negated();
        org.joda.time.Days days16 = days9.minus(days11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days18 = days16.multipliedBy(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483641 * 21");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P2147483647D" + "'", str12, "P2147483647D");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration7);
        mutablePeriod9.clear();
        org.joda.time.Hours hours11 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours12 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours13 = hours11.minus(hours12);
        org.joda.time.Duration duration14 = hours12.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone16);
        int int18 = dateTime17.getMillisOfDay();
        org.joda.time.Period period19 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.Duration duration22 = org.joda.time.Duration.ZERO;
        java.lang.String str23 = duration22.toString();
        boolean boolean24 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration22);
        boolean boolean25 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration22);
        int int27 = mutablePeriod9.getMinutes();
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.addMinutes((int) '#');
        org.joda.time.format.PeriodPrinter periodPrinter31 = null;
        org.joda.time.format.PeriodParser periodParser32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = new org.joda.time.format.PeriodFormatter(periodPrinter31, periodParser32);
        java.util.Locale locale34 = periodFormatter33.getLocale();
        boolean boolean35 = periodFormatter33.isPrinter();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter33.withParseType(periodType36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = mutablePeriod9.toString(periodFormatter33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3600010 + "'", int18 == 3600010);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0S" + "'", str23, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PT2147483647H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        org.joda.time.Period period3 = period0.withMonths((int) (byte) 0);
        int int4 = period3.getSeconds();
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Seconds seconds6 = days5.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = seconds6.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(seconds6);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Instant instant11 = instant9.plus(56L);
        org.joda.time.Instant instant13 = instant9.plus(2462482800000L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone3);
        int int5 = dateTime4.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTime dateTime19 = dateTime4.plus((org.joda.time.ReadablePeriod) weeks18);
        org.joda.time.DateTime dateTime21 = dateTime4.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) '4', chronology29);
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withFields(readablePartial32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property37 = dateTime33.era();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration39, 0);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = dateTime46.toLocalDateTime();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withFields(readablePartial58);
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfDay();
        org.joda.time.DateTime dateTime62 = dateTime59.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property63 = dateTime59.era();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime59.withDurationAdded((org.joda.time.ReadableDuration) duration65, 0);
        long long68 = duration65.getStandardHours();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration65, periodType69);
        org.joda.time.Period period71 = duration39.toPeriod(periodType69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone73);
        int int75 = dateTime74.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        boolean boolean78 = dateTime74.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean89 = mutableInterval84.isBefore((org.joda.time.ReadableInterval) mutableInterval88);
        boolean boolean90 = mutableInterval81.contains((org.joda.time.ReadableInterval) mutableInterval88);
        org.joda.time.Weeks weeks91 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval88);
        long long92 = mutableInterval88.getEndMillis();
        org.joda.time.DateTime dateTime93 = mutableInterval88.getEnd();
        org.joda.time.Chronology chronology94 = mutableInterval88.getChronology();
        org.joda.time.DateTime dateTime95 = dateTime74.toDateTime(chronology94);
        org.joda.time.Period period96 = new org.joda.time.Period(349200000L, 315569520000001L, periodType69, chronology94);
        org.joda.time.DateTimeField dateTimeField97 = chronology94.dayOfWeek();
        org.joda.time.DurationField durationField98 = chronology94.centuries();
        org.joda.time.DurationField durationField99 = chronology94.days();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(weeks91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 52L + "'", long92 == 52L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(durationField98);
        org.junit.Assert.assertNotNull(durationField99);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getYears();
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.Period period24 = duration16.toPeriod(chronology22);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(60829200000L);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        boolean boolean30 = dateTime27.isEqual(4867795157L);
        org.joda.time.Duration duration31 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime33 = dateTime27.minusSeconds((-292275054));
        org.joda.time.DateTime dateTime34 = dateTime27.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime34.withSecondOfMinute(1500052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1500052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        java.util.Locale locale6 = periodFormatter5.getLocale();
        boolean boolean7 = periodFormatter5.isPrinter();
        java.io.Writer writer8 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.parseWeeks("PT0M");
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean21 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean22 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Weeks weeks24 = weeks23.negated();
        org.joda.time.Weeks weeks26 = weeks24.plus((int) (byte) -1);
        org.joda.time.Weeks weeks28 = weeks24.minus(22);
        org.joda.time.Weeks weeks29 = weeks10.plus(weeks28);
        org.joda.time.Duration duration30 = weeks28.toStandardDuration();
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.MAX_VALUE;
        boolean boolean32 = weeks28.isGreaterThan(weeks31);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter5.printTo(writer8, (org.joda.time.ReadablePeriod) weeks31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.Period period7 = new org.joda.time.Period((-349199979L), chronology5);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTime dateTime27 = dateTime12.plus((org.joda.time.ReadablePeriod) weeks26);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, periodType29, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.minuteOfHour();
        org.joda.time.Chronology chronology39 = chronology34.withUTC();
        org.joda.time.DateTime dateTime40 = dateTime12.withChronology(chronology34);
        org.joda.time.Period period41 = new org.joda.time.Period(53L, 2022L, chronology34);
        org.joda.time.Period period42 = period7.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period44 = period41.withSeconds((int) (byte) 0);
        org.joda.time.Period period46 = period41.withMinutes(41858);
        java.lang.String str47 = period46.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT41858M1.969S" + "'", str47, "PT41858M1.969S");
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration1 = duration0.toDuration();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Period period8 = duration0.toPeriod(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        int int11 = dateTimeField9.get((long) 19);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField9.getMaximumValue(readablePartial12);
        int int15 = dateTimeField9.getMaximumValue((long) 79);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = minutes3.getFieldType(0);
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.Period period32 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 1645513780018L, periodType30);
        mutablePeriod33.setSeconds((-4867796));
        mutablePeriod33.setMillis(5);
        mutablePeriod33.setHours((int) (byte) -1);
        org.joda.time.Seconds seconds40 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds42 = seconds40.plus((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod43 = seconds40.toMutablePeriod();
        mutablePeriod43.setMillis(11);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.add((org.joda.time.ReadablePeriod) mutablePeriod43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -4867796 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekOfWeekyear();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeField28.getAsText(1935, locale30);
        int int33 = dateTimeField28.getLeapAmount(698400000L);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone35);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean48 = mutableInterval43.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        boolean boolean49 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTime dateTime51 = dateTime36.plus((org.joda.time.ReadablePeriod) weeks50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Period period56 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType57 = period56.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType57);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology63.getZone();
        org.joda.time.Period period65 = new org.joda.time.Period(10L, periodType57, chronology63);
        boolean boolean66 = dateTimeFieldType52.isSupported(chronology63);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType52.getRangeDurationType();
        int int68 = dateTime36.get(dateTimeFieldType52);
        int int69 = dateTime36.getYearOfCentury();
        org.joda.time.LocalTime localTime70 = dateTime36.toLocalTime();
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localTime70, 29422512, locale72);
        java.util.Locale locale74 = null;
        int int75 = dateTimeField28.getMaximumShortTextLength(locale74);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1935" + "'", str31, "1935");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 70 + "'", int69 == 70);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "29422512" + "'", str73, "29422512");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        int int5 = minutes1.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes1.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType8 = minutes1.getFieldType(0);
        org.joda.time.Duration duration9 = minutes1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        int int27 = dateTime26.getYearOfEra();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType28);
        org.joda.time.Period period30 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26, periodType28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withFields(readablePartial43);
        boolean boolean45 = instant32.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withFields(readablePartial57);
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime60 = dateTime58.withEarlierOffsetAtOverlap();
        int int61 = dateTime58.getDayOfWeek();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.DateTime dateTime72 = dateTime58.withChronology(chronology68);
        org.joda.time.Interval interval73 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Instant instant75 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration46, 21);
        org.joda.time.Duration duration76 = duration46.toDuration();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone78);
        int int80 = dateTime79.getDayOfMonth();
        org.joda.time.DateTime dateTime82 = dateTime79.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property83 = dateTime82.dayOfYear();
        org.joda.time.DateTime dateTime84 = property83.roundHalfFloorCopy();
        org.joda.time.Period period85 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableDuration31, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime84);
        java.lang.String str88 = duration87.toString();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration76);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT-3600.045S" + "'", str88, "PT-3600.045S");
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval5 = interval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        long long23 = interval21.toDurationMillis();
        org.joda.time.Interval interval25 = interval21.withEndMillis((long) (short) 100);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) interval21);
        boolean boolean27 = interval3.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean38 = mutableInterval33.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval37);
        long long41 = mutableInterval37.getEndMillis();
        org.joda.time.DateTime dateTime42 = mutableInterval37.getEnd();
        boolean boolean43 = interval21.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        long long49 = interval47.toDurationMillis();
        org.joda.time.Interval interval51 = interval47.withEndMillis((long) (short) 100);
        boolean boolean52 = interval21.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        long long58 = interval56.toDurationMillis();
        org.joda.time.Interval interval60 = interval56.withEndMillis((long) (short) 100);
        long long61 = interval60.getStartMillis();
        boolean boolean62 = interval51.contains((org.joda.time.ReadableInterval) interval60);
        java.lang.String str63 = interval60.toString();
        org.joda.time.MutableInterval mutableInterval64 = interval60.toMutableInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53L + "'", long49 == 53L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 53L + "'", long58 == 53L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.100+97:00" + "'", str63, "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.100+97:00");
        org.junit.Assert.assertNotNull(mutableInterval64);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days0.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period13 = org.joda.time.Period.days((-1));
        org.joda.time.Period period15 = period13.withWeeks((int) 'a');
        java.lang.String str16 = period13.toString();
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) period13);
        int int18 = mutablePeriod11.getMillis();
        org.joda.time.DurationFieldType durationFieldType20 = mutablePeriod11.getFieldType(0);
        mutablePeriod2.add(durationFieldType20, 10);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) '4', chronology32);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withFields(readablePartial35);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime36.withEarlierOffsetAtOverlap();
        int int39 = dateTime36.getDayOfWeek();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology46.getZone();
        org.joda.time.DateTime dateTime50 = dateTime36.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology46.months();
        mutablePeriod2.setPeriod(60480000000L, (-349199968L), chronology46);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField54.getType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P-1D" + "'", str16, "P-1D");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        java.util.Locale locale18 = null;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plusHours(349200000);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.lang.String str29 = property27.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) '4', chronology38);
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withFields(readablePartial41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime42.withEarlierOffsetAtOverlap();
        int int45 = dateTime42.getDayOfWeek();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology52.getZone();
        org.joda.time.DateTime dateTime56 = dateTime42.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType30.getField(chronology52);
        int int60 = dateTime17.get(dateTimeFieldType30);
        java.lang.String str61 = dateTimeFieldType30.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "41858" + "'", str29, "41858");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "yearOfEra" + "'", str61, "yearOfEra");
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod8.add((long) 3);
        mutablePeriod8.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period23 = org.joda.time.Period.days((-1));
        org.joda.time.Period period25 = period23.withWeeks((int) 'a');
        java.lang.String str26 = period23.toString();
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) period23);
        mutablePeriod21.addMonths((int) (short) -1);
        org.joda.time.Period period31 = org.joda.time.Period.days((-1));
        org.joda.time.Period period33 = period31.withWeeks((int) 'a');
        org.joda.time.Period period35 = period31.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = period35.isSupported(durationFieldType36);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) period35);
        mutablePeriod21.setWeeks(4);
        mutablePeriod21.setMinutes(4);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        int int44 = mutablePeriod21.getSeconds();
        mutablePeriod21.setYears(53);
        mutablePeriod21.clear();
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P-1D" + "'", str26, "P-1D");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withEarlierOffsetAtOverlap();
        int int15 = dateTime12.getDayOfWeek();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology22);
        org.joda.time.Interval interval27 = duration0.toIntervalTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean38 = mutableInterval33.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval37.copy();
        org.joda.time.Interval interval42 = interval27.overlap((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        long long48 = interval46.toDurationMillis();
        org.joda.time.Interval interval50 = interval46.withEndMillis((long) (short) 100);
        long long51 = interval46.toDurationMillis();
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTime dateTime53 = interval46.getEnd();
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = interval42.isBefore((org.joda.time.ReadableInstant) dateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNull(interval42);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53L + "'", long48 == 53L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 53L + "'", long51 == 53L);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        org.joda.time.DurationField durationField12 = property6.getRangeDurationField();
        int int14 = durationField12.getValue((long) 349200000);
        int int17 = durationField12.getDifference((long) (-4), 1645513802636L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = durationField12.subtract(35280001000L, (long) (-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2147483648");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-52) + "'", int17 == (-52));
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        long long17 = interval15.toDurationMillis();
        org.joda.time.Interval interval19 = interval15.withEndMillis((long) (short) 100);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) interval15);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        long long26 = interval24.toDurationMillis();
        boolean boolean27 = interval15.isAfter((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Interval interval29 = interval15.withEndMillis(100L);
        org.joda.time.Interval interval30 = interval15.toInterval();
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval30);
        java.lang.String str32 = seconds31.toString();
        org.joda.time.Seconds seconds34 = seconds31.multipliedBy((-90));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType36 = seconds31.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53L + "'", long17 == 53L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 53L + "'", long26 == 53L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(seconds34);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds9 = seconds7.plus((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = periodFormatter2.print((org.joda.time.ReadablePeriod) seconds7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        long long27 = mutableInterval23.getEndMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean38 = mutableInterval33.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks41 = weeks40.negated();
        org.joda.time.Weeks weeks43 = weeks41.plus((int) (byte) -1);
        org.joda.time.PeriodType periodType44 = weeks43.getPeriodType();
        org.joda.time.Period period45 = mutableInterval23.toPeriod(periodType44);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        org.joda.time.Interval interval53 = interval49.withEndMillis(53L);
        org.joda.time.Chronology chronology54 = interval49.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean65 = mutableInterval60.isBefore((org.joda.time.ReadableInterval) mutableInterval64);
        boolean boolean66 = mutableInterval57.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        long long72 = interval70.toDurationMillis();
        org.joda.time.Interval interval74 = interval70.withEndMillis((long) (short) 100);
        mutableInterval64.setInterval((org.joda.time.ReadableInterval) interval70);
        boolean boolean76 = mutableInterval64.containsNow();
        boolean boolean77 = interval49.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean88 = mutableInterval83.isBefore((org.joda.time.ReadableInterval) mutableInterval87);
        boolean boolean89 = mutableInterval80.contains((org.joda.time.ReadableInterval) mutableInterval87);
        mutableInterval64.setInterval((org.joda.time.ReadableInterval) mutableInterval80);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean94 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval93);
        boolean boolean95 = mutableInterval23.isAfter((org.joda.time.ReadableInterval) mutableInterval93);
        java.lang.Object obj96 = mutableInterval23.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval23.setInterval((long) (byte) 1, (long) (-416397));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 53L + "'", long72 == 53L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(obj96);
// flaky:         org.junit.Assert.assertEquals(obj96.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj96), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj96), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Duration duration1 = hours0.toStandardDuration();
        org.joda.time.Hours hours3 = hours0.minus((-4867796));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        int int5 = dateTimeZone2.getOffsetFromLocal((long) (short) 100);
        long long9 = dateTimeZone2.convertLocalToUTC(4867809417L, false, (-1104537599948L));
        java.lang.String str11 = dateTimeZone2.getShortName((long) (-90));
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 349200000 + "'", int5 == 349200000);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4518609417L + "'", long9 == 4518609417L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours0.minus((int) (short) 100);
        org.joda.time.Period period3 = hours2.toPeriod();
        org.joda.time.Period period5 = period3.plusMonths((int) (byte) 100);
        org.joda.time.Period period7 = period3.withMonths(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds8 = period7.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.joda.time.Period period8 = new org.joda.time.Period(21, (int) '#', (int) ' ', (int) (short) 100, 2, (int) (short) -1, (int) (byte) 10, (int) 'a');
        org.joda.time.Hours hours9 = org.joda.time.Hours.TWO;
        org.joda.time.PeriodType periodType10 = hours9.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = period8.withPeriodType(periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime2.getZone();
        long long6 = dateTimeZone4.convertUTCToLocal((long) 0);
        int int8 = dateTimeZone4.getOffset((-3166581600000L));
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 349200000L + "'", long6 == 349200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = periodFormatter5.parsePeriod("PT95H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology25 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime30.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay34 = dateTime30.toTimeOfDay();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) timeOfDay34, locale35);
        org.joda.time.Chronology chronology37 = timeOfDay34.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 1, periodType40, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) '4', chronology45);
        org.joda.time.Instant instant48 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, periodType51, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) '4', chronology56);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withFields(readablePartial59);
        boolean boolean61 = instant48.isAfter((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology63 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone67);
        int int69 = dateTime68.getSecondOfMinute();
        org.joda.time.DateTime dateTime71 = dateTime68.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay72 = dateTime68.toTimeOfDay();
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeField65.getAsShortText((org.joda.time.ReadablePartial) timeOfDay72, locale73);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str77 = periodType76.getName();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (short) -1, periodType76);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period89 = org.joda.time.Period.days((-1));
        org.joda.time.Period period91 = period89.withWeeks((int) 'a');
        java.lang.String str92 = period89.toString();
        mutablePeriod87.setPeriod((org.joda.time.ReadablePeriod) period89);
        int int94 = mutablePeriod87.getMillis();
        org.joda.time.DurationFieldType durationFieldType96 = mutablePeriod87.getFieldType(0);
        int int97 = periodType76.indexOf(durationFieldType96);
        org.joda.time.Period period98 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay34, (org.joda.time.ReadablePartial) timeOfDay72, periodType76);
        java.lang.String str99 = timeOfDay72.toString();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "YearMonthDayTime" + "'", str77, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "P-1D" + "'", str92, "P-1D");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "T01:00:00.010" + "'", str99, "T01:00:00.010");
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime17.withTime(490, 31, 43, 187440000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 490 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        boolean boolean7 = interval3.contains((long) ' ');
        org.joda.time.Duration duration8 = interval3.toDuration();
        long long9 = duration8.getStandardSeconds();
        long long10 = duration8.getMillis();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period21 = org.joda.time.Period.days((-1));
        org.joda.time.Period period23 = period21.withWeeks((int) 'a');
        java.lang.String str24 = period21.toString();
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period36 = org.joda.time.Period.days((-1));
        org.joda.time.Period period38 = period36.withWeeks((int) 'a');
        java.lang.String str39 = period36.toString();
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) period36);
        mutablePeriod34.addMonths((int) (short) -1);
        org.joda.time.Period period44 = org.joda.time.Period.days((-1));
        org.joda.time.Period period46 = period44.withWeeks((int) 'a');
        org.joda.time.Period period48 = period44.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType49 = null;
        boolean boolean50 = period48.isSupported(durationFieldType49);
        mutablePeriod34.add((org.joda.time.ReadablePeriod) period48);
        boolean boolean52 = mutablePeriod19.equals((java.lang.Object) mutablePeriod34);
        boolean boolean53 = duration8.equals((java.lang.Object) mutablePeriod34);
        java.lang.String str54 = duration8.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 53L + "'", long10 == 53L);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P-1D" + "'", str24, "P-1D");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "P-1D" + "'", str39, "P-1D");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.053S" + "'", str54, "PT0.053S");
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType29);
        org.joda.time.Period period31 = mutableInterval23.toPeriod(periodType29);
        boolean boolean32 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval23);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval23.setInterval(0L, (-3600000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(29454);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("5");
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.Duration duration3 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, periodType6, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) '4', chronology11);
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withFields(readablePartial14);
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.withEarlierOffsetAtOverlap();
        int int18 = dateTime15.getDayOfWeek();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DateTime dateTime29 = dateTime15.withChronology(chronology25);
        org.joda.time.Interval interval30 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period33 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) '4', chronology42);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withFields(readablePartial45);
        boolean boolean47 = instant34.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone50);
        int int52 = dateTime51.getDayOfMonth();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1, periodType54, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology59.getZone();
        org.joda.time.DateTime dateTime63 = dateTime51.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime44.withZone(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime(dateTimeZone65);
        org.joda.time.Weeks weeks67 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone69);
        int int71 = dateTime70.getMillisOfDay();
        org.joda.time.DateTime dateTime73 = dateTime70.plusMillis((int) '#');
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime73);
        int int75 = property2.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(weeks67);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3600010 + "'", int71 == 3600010);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1965) + "'", int75 == (-1965));
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DurationField durationField56 = chronology40.halfdays();
        long long59 = durationField56.getDifferenceAsLong((long) 27425229, (-1353825273600090L));
        long long60 = durationField56.getUnitMillis();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31338548L + "'", long59 == 31338548L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 43200000L + "'", long60 == 43200000L);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        int int26 = property14.getDifference((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property14.get();
        org.joda.time.DateTimeField dateTimeField28 = property14.getField();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTimeField28.getAsText(readablePartial29, 3599, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3599");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears((int) '#');
        int int13 = dateTime9.getCenturyOfEra();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.Hours hours31 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours32 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours33 = hours31.minus(hours32);
        org.joda.time.Duration duration34 = hours32.toStandardDuration();
        org.joda.time.DateTime dateTime35 = dateTime25.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration44 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withFields(readablePartial55);
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime56.withEarlierOffsetAtOverlap();
        int int59 = dateTime56.getDayOfWeek();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology66.getZone();
        org.joda.time.DateTime dateTime70 = dateTime56.withChronology(chronology66);
        org.joda.time.Interval interval71 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period74 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType76 = period75.getPeriodType();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration44, periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime35, periodType76);
        org.joda.time.DateTime.Property property79 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime80 = property79.withMaximumValue();
        org.joda.time.DateTime dateTime81 = property79.roundHalfFloorCopy();
        int int82 = property79.getMaximumValue();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime22.withEarlierOffsetAtOverlap();
        int int25 = dateTime22.getDayOfWeek();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology32.getZone();
        org.joda.time.DateTime dateTime36 = dateTime22.withChronology(chronology32);
        org.joda.time.Interval interval37 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period40 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType42 = period41.getPeriodType();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration10, periodType42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withFields(readablePartial55);
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime56.withEarlierOffsetAtOverlap();
        int int59 = dateTime56.getDayOfWeek();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology66.getZone();
        org.joda.time.DateTime dateTime70 = dateTime56.withChronology(chronology66);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        int int74 = minutes72.get(durationFieldType73);
        int int76 = minutes72.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod77 = minutes72.toMutablePeriod();
        long long80 = chronology66.add((org.joda.time.ReadablePeriod) mutablePeriod77, (long) '#', (int) (short) 10);
        org.joda.time.Period period81 = duration10.toPeriod(periodType44, chronology66);
        org.joda.time.PeriodType periodType82 = periodType44.withMonthsRemoved();
        org.joda.time.PeriodType periodType83 = periodType44.withHoursRemoved();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology88);
        org.joda.time.DurationField durationField90 = chronology88.weeks();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField92 = chronology88.hourOfDay();
        org.joda.time.Period period93 = new org.joda.time.Period(352800010L, periodType83, chronology88);
        org.joda.time.Period period94 = new org.joda.time.Period((long) (-90), periodType83);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 6000035L + "'", long80 == 6000035L);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DurationField durationField11 = chronology7.millis();
        boolean boolean12 = durationField11.isPrecise();
        java.lang.String str13 = durationField11.getName();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millis" + "'", str13, "millis");
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration1 = duration0.toDuration();
        org.joda.time.Duration duration2 = duration0.toDuration();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, periodType6, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) '4', chronology11);
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withFields(readablePartial14);
        boolean boolean16 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        boolean boolean32 = instant19.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone35);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 1, periodType39, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology44.getZone();
        org.joda.time.DateTime dateTime48 = dateTime36.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime29.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(dateTimeZone50);
        org.joda.time.Days days52 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime18.withWeekyear(2);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period56 = interval55.toPeriod();
        java.lang.Class<?> wildcardClass57 = period56.getClass();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(66269599200000L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Hours hours4 = hours2.plus((int) (byte) 0);
        org.joda.time.Hours hours5 = null;
        boolean boolean6 = hours2.isLessThan(hours5);
        java.lang.String str7 = hours2.toString();
        org.joda.time.PeriodType periodType8 = hours2.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds9 = hours2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 18408222 * 3600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT18408222H" + "'", str7, "PT18408222H");
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str25 = dateTime9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        int int28 = dateTime9.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((-349199948L));
        org.joda.time.DateTime dateTime34 = dateTime29.withDurationAdded(31556995200000L, 7);
        org.joda.time.Period period36 = org.joda.time.Period.millis(52);
        org.joda.time.Period period38 = period36.minusSeconds(22);
        org.joda.time.Period period40 = period36.withMillis(59);
        org.joda.time.DurationFieldType durationFieldType42 = period40.getFieldType(2);
        org.joda.time.DateTime dateTime44 = dateTime29.withFieldAdded(durationFieldType42, 57);
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.ZERO;
        org.joda.time.DurationFieldType durationFieldType46 = seconds45.getFieldType();
        org.joda.time.DateTime dateTime48 = dateTime44.withFieldAdded(durationFieldType46, 1971);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str25, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.DateTime dateTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean23 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean24 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval25 = mutableInterval15.toInterval();
        boolean boolean26 = interval12.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Period period27 = interval12.toPeriod();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.lang.String str35 = dateTimeZone32.getID();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(0L, 355201155L, dateTimeZone32);
        boolean boolean37 = interval12.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Interval interval39 = interval36.withEndMillis(3155695200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+97:00" + "'", str35, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DurationField durationField9 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = dateTime14.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long24 = dateTimeZone20.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = dateTime28.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = dateTime35.toLocalDateTime();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str39 = periodType38.getName();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (short) -1, periodType38);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period51 = org.joda.time.Period.days((-1));
        org.joda.time.Period period53 = period51.withWeeks((int) 'a');
        java.lang.String str54 = period51.toString();
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) period51);
        int int56 = mutablePeriod49.getMillis();
        org.joda.time.DurationFieldType durationFieldType58 = mutablePeriod49.getFieldType(0);
        int int59 = periodType38.indexOf(durationFieldType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime29, (org.joda.time.ReadablePartial) localDateTime36, periodType38);
        boolean boolean61 = dateTimeZone20.isLocalDateTimeGap(localDateTime36);
        org.joda.time.Hours hours62 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.Hours hours63 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours64 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours65 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours66 = hours64.minus(hours65);
        org.joda.time.Hours hours67 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours68 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours69 = hours67.minus(hours68);
        org.joda.time.Hours hours70 = hours65.minus(hours67);
        boolean boolean71 = hours63.isLessThan(hours65);
        boolean boolean72 = localDateTime36.equals((java.lang.Object) hours65);
        int int73 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean75 = localDateTime36.isSupported(dateTimeFieldType74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField77 = localDateTime36.getField(79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 79");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6000035L + "'", long24 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "YearMonthDayTime" + "'", str39, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P-1D" + "'", str54, "P-1D");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertNotNull(hours63);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(hours65);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 86399999 + "'", int73 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PT0M");
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks15.plus((int) (byte) -1);
        org.joda.time.Weeks weeks19 = weeks15.minus(22);
        org.joda.time.Weeks weeks20 = weeks1.plus(weeks19);
        org.joda.time.Duration duration21 = weeks19.toStandardDuration();
        java.lang.String str22 = duration21.toString();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-13305600S" + "'", str22, "PT-13305600S");
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType4);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.Period period12 = new org.joda.time.Period(10L, periodType4, chronology10);
        java.lang.String str13 = periodType4.getName();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Standard" + "'", str13, "Standard");
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        int int18 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime2.minusHours((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(59);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localTime23.getValue(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        long long14 = interval12.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval12);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period26 = org.joda.time.Period.days((-1));
        org.joda.time.Period period28 = period26.withWeeks((int) 'a');
        java.lang.String str29 = period26.toString();
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) period26);
        mutablePeriod24.addMonths((int) (short) -1);
        org.joda.time.Period period34 = org.joda.time.Period.days((-1));
        org.joda.time.Period period36 = period34.withWeeks((int) 'a');
        org.joda.time.Period period38 = period34.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        boolean boolean40 = period38.isSupported(durationFieldType39);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', chronology50);
        org.joda.time.DurationField durationField53 = chronology50.centuries();
        mutablePeriod24.add((long) (short) 10, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        long long58 = dateTimeField55.add((long) (short) 0, (int) '4');
        boolean boolean59 = interval12.equals((java.lang.Object) dateTimeField55);
        boolean boolean60 = dateTimeField55.isSupported();
        org.joda.time.DurationField durationField61 = dateTimeField55.getLeapDurationField();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField55.getAsText((-90), locale63);
        long long66 = dateTimeField55.remainder(1645513822673L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53L + "'", long14 == 53L);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P-1D" + "'", str29, "P-1D");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 187200000L + "'", long58 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(durationField61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-90" + "'", str64, "-90");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 622673L + "'", long66 == 622673L);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 349200000, 47779200000L);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime11.minus((long) 5);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period27 = org.joda.time.Period.days((-1));
        org.joda.time.Period period29 = period27.withWeeks((int) 'a');
        java.lang.String str30 = period27.toString();
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) period27);
        mutablePeriod25.addMonths((int) (short) -1);
        org.joda.time.Period period35 = org.joda.time.Period.days((-1));
        org.joda.time.Period period37 = period35.withWeeks((int) 'a');
        org.joda.time.Period period39 = period35.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        boolean boolean41 = period39.isSupported(durationFieldType40);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.DurationField durationField54 = chronology51.centuries();
        mutablePeriod25.add((long) (short) 10, chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField57 = durationFieldType16.getField(chronology51);
        org.joda.time.DateTime dateTime59 = dateTime15.withFieldAdded(durationFieldType16, 365);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime59.withEra(41858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41858 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P-1D" + "'", str30, "P-1D");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.joda.time.Days days1 = org.joda.time.Days.days(7);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = days1.getValue((-1965));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1965");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Duration duration2 = org.joda.time.Duration.millis(66269599200000L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.Hours hours5 = hours3.plus((int) (byte) 0);
        int int6 = hours5.size();
        boolean boolean7 = hours0.isGreaterThan(hours5);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        java.lang.String str28 = dateTimeZone26.getName(100L);
        org.joda.time.DateTime dateTime29 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        java.lang.String str37 = dateTimeZone35.getName(100L);
        org.joda.time.DateTime dateTime38 = dateTime29.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology39 = chronology17.withZone(dateTimeZone35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1353793219200090L), 187200000L, chronology39);
        boolean boolean41 = durationFieldType8.isSupported(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime7.toDateTime(chronology39);
        org.joda.time.DateTime dateTime44 = dateTime7.plusWeeks(292278993);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withFields(readablePartial57);
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime60 = dateTime58.withEarlierOffsetAtOverlap();
        int int61 = dateTime58.getDayOfWeek();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.DateTime dateTime72 = dateTime58.withChronology(chronology68);
        org.joda.time.Period period73 = new org.joda.time.Period((long) 23, 100L, chronology68);
        org.joda.time.Period period75 = period73.plusMonths(53);
        org.joda.time.DateTime dateTime76 = dateTime7.plus((org.joda.time.ReadablePeriod) period75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks77 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as months is not precise in the period P53MT0.077S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval15);
        long long19 = mutableInterval15.getEndMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean30 = mutableInterval25.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        boolean boolean31 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime33 = mutableInterval29.getStart();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone35);
        int int37 = dateTime36.getSecondOfMinute();
        int int38 = dateTime36.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone40);
        int int42 = dateTime41.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.plusMillis((int) '#');
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.DateTime dateTime55 = dateTime44.withChronology(chronology52);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime36.toMutableDateTime(chronology52);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((java.lang.Object) mutableInterval29, chronology52);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        mutableInterval29.setEnd((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Chronology chronology61 = mutableInterval29.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((int) (short) 1, 360000000, 1500052, 0, 56, 3600052, chronology61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3600010 + "'", int38 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3600010 + "'", int42 == 3600010);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getName(100L);
        org.joda.time.DateTime dateTime9 = dateTime0.withZoneRetainFields(dateTimeZone6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        java.lang.String str17 = dateTimeZone15.getName(100L);
        org.joda.time.DateTime dateTime18 = dateTime9.withZoneRetainFields(dateTimeZone15);
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone22);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean35 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval34);
        boolean boolean36 = mutableInterval27.contains((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTime dateTime38 = dateTime23.plus((org.joda.time.ReadablePeriod) weeks37);
        int int39 = dateTime23.getYearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(59);
        org.joda.time.DateTime dateTime45 = dateTime41.withDayOfMonth(4);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        long long51 = interval49.toDurationMillis();
        boolean boolean53 = interval49.isAfter((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone55);
        int int57 = dateTime56.getSecondOfMinute();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Interval interval61 = interval49.gap((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.DateTime dateTime62 = interval49.getEnd();
        int int63 = dateTime62.getCenturyOfEra();
        boolean boolean64 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 26 + "'", int19 == 26);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 53L + "'", long51 == 53L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 19 + "'", int63 == 19);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean11 = dateTimeField9.isLeap(315569520000001L);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period22 = org.joda.time.Period.days((-1));
        org.joda.time.Period period24 = period22.withWeeks((int) 'a');
        java.lang.String str25 = period22.toString();
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) period22);
        mutablePeriod20.addMonths((int) (short) -1);
        org.joda.time.Period period30 = org.joda.time.Period.days((-1));
        org.joda.time.Period period32 = period30.withWeeks((int) 'a');
        org.joda.time.Period period34 = period30.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        boolean boolean36 = period34.isSupported(durationFieldType35);
        mutablePeriod20.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.DurationField durationField49 = chronology46.centuries();
        mutablePeriod20.add((long) (short) 10, chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.clockhourOfDay();
        long long53 = dateTimeField51.roundHalfCeiling((long) 4);
        long long56 = dateTimeField51.addWrapField((long) (-1), 52);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTime();
        org.joda.time.LocalDate localDate61 = dateTime59.toLocalDate();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 1, dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate61.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int int71 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDate61);
        int int72 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate61);
        long long74 = dateTimeField9.roundCeiling((long) '4');
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P-1D" + "'", str25, "P-1D");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 14399999L + "'", long56 == 14399999L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 601200000L + "'", long74 == 601200000L);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        org.joda.time.Period period1 = org.joda.time.Period.months(26);
        org.joda.time.Period period3 = period1.withMinutes(21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours4 = period1.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Hours as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 100);
        org.joda.time.Hours hours3 = hours1.plus(2022);
        org.joda.time.Hours hours4 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours5 = hours1.minus(hours4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.EIGHT;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period17 = org.joda.time.Period.days((-1));
        org.joda.time.Period period19 = period17.withWeeks((int) 'a');
        java.lang.String str20 = period17.toString();
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) period17);
        int int22 = mutablePeriod15.getMillis();
        org.joda.time.DurationFieldType durationFieldType24 = mutablePeriod15.getFieldType(0);
        int int25 = hours6.get(durationFieldType24);
        org.joda.time.Hours hours27 = hours6.multipliedBy(100);
        org.joda.time.Hours hours28 = hours6.negated();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Hours hours30 = org.joda.time.Hours.standardHoursIn(readablePeriod29);
        org.joda.time.Hours hours31 = hours6.minus(hours30);
        org.joda.time.Hours hours32 = hours1.plus(hours31);
        org.joda.time.Hours hours33 = hours1.negated();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = dateTime44.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = dateTime51.toLocalDateTime();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str55 = periodType54.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) (short) -1, periodType54);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period67 = org.joda.time.Period.days((-1));
        org.joda.time.Period period69 = period67.withWeeks((int) 'a');
        java.lang.String str70 = period67.toString();
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) period67);
        int int72 = mutablePeriod65.getMillis();
        org.joda.time.DurationFieldType durationFieldType74 = mutablePeriod65.getFieldType(0);
        int int75 = periodType54.indexOf(durationFieldType74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime45, (org.joda.time.ReadablePartial) localDateTime52, periodType54);
        org.joda.time.Hours hours77 = org.joda.time.Hours.EIGHT;
        int int78 = hours77.size();
        org.joda.time.DurationFieldType durationFieldType79 = hours77.getFieldType();
        boolean boolean80 = localDateTime52.equals((java.lang.Object) durationFieldType79);
        org.joda.time.DateTime dateTime82 = dateTime40.withFieldAdded(durationFieldType79, (int) (byte) 0);
        boolean boolean83 = hours1.isSupported(durationFieldType79);
        int int84 = hours1.getHours();
        org.joda.time.DurationFieldType durationFieldType85 = hours1.getFieldType();
        java.lang.String str86 = durationFieldType85.getName();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P-1D" + "'", str20, "P-1D");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "YearMonthDayTime" + "'", str55, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "P-1D" + "'", str70, "P-1D");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(hours77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hours" + "'", str86, "hours");
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekOfWeekyear" + "'", str2, "weekOfWeekyear");
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology10.getDateTimeMillis(98730826085640000L, 5, 187440000, 360000000, 879606);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 187440000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long6 = dateTimeZone2.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (short) 100);
        long long11 = dateTimeZone2.adjustOffset(684034L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 6000035L + "'", long6 == 6000035L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 684034L + "'", long11 == 684034L);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks13 = weeks12.negated();
        org.joda.time.Weeks weeks15 = weeks13.plus((int) (byte) -1);
        org.joda.time.PeriodType periodType16 = weeks15.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod27.add((long) 3);
        mutablePeriod27.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(4, (int) '#', 3600052, (int) (short) -1, 21, (-1), 100, 22);
        mutablePeriod40.setValue(0, 366);
        mutablePeriod40.setHours(349200000);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int47 = mutablePeriod40.size();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        mutablePeriod40.add(durationFieldType48, 3600010);
        org.joda.time.Period period52 = period17.withFieldAdded(durationFieldType48, 0);
        boolean boolean53 = weeks15.isSupported(durationFieldType48);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone55);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfYear();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) '4', chronology68);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withFields(readablePartial71);
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        org.joda.time.DateTime dateTime75 = dateTime72.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime77 = dateTime72.withCenturyOfEra((int) (short) 1);
        org.joda.time.Hours hours78 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours79 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours80 = hours78.minus(hours79);
        org.joda.time.Duration duration81 = hours79.toStandardDuration();
        org.joda.time.DateTime dateTime82 = dateTime72.plus((org.joda.time.ReadableDuration) duration81);
        int int83 = property60.compareTo((org.joda.time.ReadableInstant) dateTime82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) weeks15, (org.joda.time.ReadableInstant) dateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(hours78);
        org.junit.Assert.assertNotNull(hours79);
        org.junit.Assert.assertNotNull(hours80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days0.toMutablePeriod();
        mutablePeriod2.addWeeks((int) '4');
        mutablePeriod2.addDays((int) (byte) 0);
        int[] intArray7 = mutablePeriod2.getValues();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = interval11.toMutableInterval();
        org.joda.time.Interval interval15 = interval11.withEndMillis(53L);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration30 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) '4', chronology38);
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withFields(readablePartial41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime42.withEarlierOffsetAtOverlap();
        int int45 = dateTime42.getDayOfWeek();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology52.getZone();
        org.joda.time.DateTime dateTime56 = dateTime42.withChronology(chronology52);
        org.joda.time.Interval interval57 = duration30.toIntervalTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Instant instant59 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration30, 21);
        org.joda.time.Duration duration60 = duration30.toDuration();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 1, periodType62, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology67.getZone();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.dayOfWeek();
        org.joda.time.Period period72 = duration60.toPeriod(chronology67);
        org.joda.time.Interval interval73 = interval11.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval73);
        boolean boolean75 = interval73.isAfterNow();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 52, 1, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        boolean boolean31 = instant18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str33 = dateTime17.toString();
        boolean boolean34 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime36 = dateTime17.plusHours(349200000);
        org.joda.time.DateTime dateTime38 = dateTime17.withWeekyear((int) '4');
        org.joda.time.Duration duration39 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration40 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withFields(readablePartial51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime52.withEarlierOffsetAtOverlap();
        int int55 = dateTime52.getDayOfWeek();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, periodType57, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        org.joda.time.DateTime dateTime66 = dateTime52.withChronology(chronology62);
        org.joda.time.Interval interval67 = duration40.toIntervalTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period70 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period74 = org.joda.time.Period.months(9);
        org.joda.time.Period period76 = period74.withDays(1971);
        org.joda.time.DateTime dateTime77 = dateTime38.plus((org.joda.time.ReadablePeriod) period74);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str33, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.PeriodType periodType2 = days0.getPeriodType();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, periodType5, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.secondOfMinute();
        org.joda.time.Period period17 = new org.joda.time.Period((java.lang.Object) days0, periodType3, chronology10);
        org.joda.time.PeriodType periodType18 = days0.getPeriodType();
        org.joda.time.Weeks weeks19 = days0.toStandardWeeks();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(weeks19);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        int int5 = minutes1.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes1.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType8 = minutes1.getFieldType(0);
        org.joda.time.Duration duration9 = minutes1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        int int27 = dateTime26.getYearOfEra();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType28);
        org.joda.time.Period period30 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26, periodType28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withFields(readablePartial43);
        boolean boolean45 = instant32.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withFields(readablePartial57);
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime60 = dateTime58.withEarlierOffsetAtOverlap();
        int int61 = dateTime58.getDayOfWeek();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.DateTime dateTime72 = dateTime58.withChronology(chronology68);
        org.joda.time.Interval interval73 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Instant instant75 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration46, 21);
        org.joda.time.Duration duration76 = duration46.toDuration();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone78);
        int int80 = dateTime79.getDayOfMonth();
        org.joda.time.DateTime dateTime82 = dateTime79.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property83 = dateTime82.dayOfYear();
        org.joda.time.DateTime dateTime84 = property83.roundHalfFloorCopy();
        org.joda.time.Period period85 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableDuration31, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime89 = dateTime84.plusMonths(3600052);
        org.joda.time.DateTime dateTime90 = dateTime84.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime92 = dateTime90.plus((-2147483648000L));
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration76);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds2 = seconds0.plus((int) (short) 10);
        org.joda.time.Seconds seconds4 = seconds0.multipliedBy((int) (short) 1);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.seconds(24);
        boolean boolean7 = seconds0.isGreaterThan(seconds6);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone6);
        int int8 = dateTime7.getSecondOfMinute();
        int int9 = dateTime7.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime7.toMutableDateTime(chronology23);
        int int28 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property29 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime31 = property29.addWrapFieldToCopy(429);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone39);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime40.getZone();
        boolean boolean44 = dateTime40.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean55 = mutableInterval50.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        boolean boolean56 = mutableInterval47.contains((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.Weeks weeks57 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval54);
        long long58 = mutableInterval54.getEndMillis();
        org.joda.time.DateTime dateTime59 = mutableInterval54.getEnd();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTime dateTime61 = dateTime40.toDateTime(chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-90), chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.minuteOfDay();
        org.joda.time.DurationField durationField64 = chronology60.millis();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-18L), chronology60);
        org.joda.time.DateTimeZone dateTimeZone66 = chronology60.getZone();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType35.getField(chronology60);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 49, 315569523540001L, chronology60);
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType32.getField(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3600010 + "'", int9 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime2.getZone();
        boolean boolean6 = dateTime2.isBefore((long) '#');
        int int7 = dateTime2.getDayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        boolean boolean54 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period56 = org.joda.time.Period.days((-1));
        org.joda.time.Period period58 = period56.withWeeks((int) 'a');
        org.joda.time.Period period60 = period56.plusMonths((int) (short) -1);
        org.joda.time.Period period62 = period56.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        org.joda.time.DateTime.Property property76 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks81 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        org.joda.time.MutablePeriod mutablePeriod84 = period83.toMutablePeriod();
        org.joda.time.Weeks weeks85 = period83.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period87 = period83.minusWeeks(3600010);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(weeks85);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (short) 10);
        org.joda.time.Seconds seconds4 = seconds3.negated();
        org.joda.time.Seconds seconds5 = seconds3.negated();
        org.joda.time.Seconds seconds6 = seconds0.minus(seconds3);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType9);
        mutablePeriod10.addMonths(0);
        mutablePeriod10.setSeconds((int) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean25 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean26 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval24);
        mutableInterval17.setDurationAfterStart(0L);
        boolean boolean29 = mutableInterval17.containsNow();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        mutableInterval32.setDurationAfterStart(0L);
        boolean boolean44 = mutableInterval32.containsNow();
        boolean boolean45 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj47 = mutableInterval17.clone();
        boolean boolean48 = seconds0.equals(obj47);
        org.joda.time.DurationFieldType durationFieldType49 = seconds0.getFieldType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationFieldType49);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.yearOfEra();
        java.lang.String str11 = dateTimeField10.getName();
        java.lang.String str13 = dateTimeField10.getAsShortText(98730826085640000L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yearOfEra" + "'", str11, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3130625" + "'", str13, "3130625");
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DateTimeField dateTimeField56 = chronology40.minuteOfHour();
        org.joda.time.Chronology chronology57 = chronology40.withUTC();
        org.joda.time.DurationField durationField58 = chronology57.years();
        org.joda.time.DurationField durationField59 = chronology57.weekyears();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.Instant instant63 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        boolean boolean76 = instant63.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property77 = dateTime73.dayOfWeek();
        boolean boolean78 = dateTimeZone62.equals((java.lang.Object) dateTime73);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) durationField59, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        long long8 = interval7.getStartMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        long long14 = interval12.toDurationMillis();
        org.joda.time.Interval interval16 = interval12.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 10);
        org.joda.time.Interval interval21 = interval16.withEnd((org.joda.time.ReadableInstant) instant17);
        boolean boolean23 = interval16.contains((-10L));
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period34 = org.joda.time.Period.days((-1));
        org.joda.time.Period period36 = period34.withWeeks((int) 'a');
        java.lang.String str37 = period34.toString();
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod32.addMonths((int) (short) -1);
        org.joda.time.Period period42 = org.joda.time.Period.days((-1));
        org.joda.time.Period period44 = period42.withWeeks((int) 'a');
        org.joda.time.Period period46 = period42.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        boolean boolean48 = period46.isSupported(durationFieldType47);
        mutablePeriod32.add((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, periodType53, chronology58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) '4', chronology58);
        org.joda.time.DurationField durationField61 = chronology58.centuries();
        mutablePeriod32.add((long) (short) 10, chronology58);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.clockhourOfDay();
        org.joda.time.Interval interval65 = interval16.withChronology(chronology58);
        boolean boolean66 = interval7.isBefore((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean77 = mutableInterval72.isBefore((org.joda.time.ReadableInterval) mutableInterval76);
        boolean boolean78 = mutableInterval69.contains((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.Weeks weeks79 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval76.copy();
        org.joda.time.Duration duration81 = mutableInterval80.toDuration();
        org.joda.time.Period period82 = duration81.toPeriod();
        org.joda.time.Interval interval83 = interval65.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone85);
        org.joda.time.DateTime dateTime87 = dateTime86.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration88 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration89 = duration88.toDuration();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.Duration duration91 = org.joda.time.Duration.ZERO;
        java.lang.String str92 = duration91.toString();
        org.joda.time.Duration duration93 = org.joda.time.Duration.ZERO;
        boolean boolean94 = duration91.isLongerThan((org.joda.time.ReadableDuration) duration93);
        org.joda.time.Duration duration95 = duration88.plus((org.joda.time.ReadableDuration) duration91);
        boolean boolean96 = duration81.isLongerThan((org.joda.time.ReadableDuration) duration95);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53L + "'", long14 == 53L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P-1D" + "'", str37, "P-1D");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PT0S" + "'", str92, "PT0S");
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        long long13 = durationField10.add((long) (byte) 1, (int) (short) 100);
        int int16 = durationField10.getDifference(10L, (long) '4');
        long long18 = durationField10.getMillis((long) (byte) 1);
        long long20 = durationField10.getMillis((long) (short) 10);
        long long23 = durationField10.subtract((-349199979L), 59);
        org.joda.time.DurationFieldType durationFieldType24 = durationField10.getType();
        int int27 = durationField10.getDifference((-3600000L), 1645513830150L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 315569520000001L + "'", long13 == 315569520000001L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3155695200000L + "'", long18 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 31556952000000L + "'", long20 == 31556952000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-186186301199979L) + "'", long23 == (-186186301199979L));
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        int int8 = minutes4.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod9 = minutes4.toMutablePeriod();
        boolean boolean10 = minutes2.isLessThan(minutes4);
        org.joda.time.Minutes minutes12 = minutes2.dividedBy(7200);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutes(99);
        java.lang.String str15 = minutes14.toString();
        org.joda.time.Minutes minutes16 = minutes12.minus(minutes14);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = weeks0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Weeks cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT99M" + "'", str15, "PT99M");
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(53);
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy(366);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyear();
        int int12 = dateTimeField10.getMinimumValue((-3155673599903L));
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.joda.time.Period period1 = org.joda.time.Period.millis(52);
        org.joda.time.Period period3 = period1.minusSeconds(22);
        org.joda.time.Period period5 = period1.withMillis(59);
        org.joda.time.DurationFieldType durationFieldType7 = period5.getFieldType(2);
        java.lang.Object obj10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(obj10, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 100, periodType12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 99, periodType12);
        org.joda.time.Period period16 = period5.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Period period18 = period16.withYears(29);
        org.joda.time.Period period20 = period18.plusMinutes(2022);
        org.joda.time.Period period22 = period20.plusMonths(70);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.setYears(0);
        mutablePeriod8.add((long) 4);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period30 = org.joda.time.Period.days((-1));
        org.joda.time.Period period32 = period30.withWeeks((int) 'a');
        java.lang.String str33 = period30.toString();
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) period30);
        int int35 = mutablePeriod28.getMillis();
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod28.toMutablePeriod();
        mutablePeriod36.add((int) '4', (int) (short) 0, (int) (byte) 0, (int) (short) 10, 1, (int) 'a', (int) (short) 100, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone48);
        int int50 = dateTime49.getMillisOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.plusMillis((int) '#');
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, periodType55, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) '4', chronology60);
        org.joda.time.DateTime dateTime63 = dateTime52.withChronology(chronology60);
        mutablePeriod36.setPeriod((long) (short) 100, chronology60);
        mutablePeriod8.add(0L, chronology60);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P-1D" + "'", str33, "P-1D");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod36);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3600010 + "'", int50 == 3600010);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str14 = periodType13.getName();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period26 = org.joda.time.Period.days((-1));
        org.joda.time.Period period28 = period26.withWeeks((int) 'a');
        java.lang.String str29 = period26.toString();
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) period26);
        int int31 = mutablePeriod24.getMillis();
        org.joda.time.DurationFieldType durationFieldType33 = mutablePeriod24.getFieldType(0);
        int int34 = periodType13.indexOf(durationFieldType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime4, (org.joda.time.ReadablePartial) localDateTime11, periodType13);
        org.joda.time.Chronology chronology36 = localDateTime4.getChronology();
        java.lang.String str37 = chronology36.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology36.getDateTimeMillis(622673L, 29, 11, 292278993, 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YearMonthDayTime" + "'", str14, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P-1D" + "'", str29, "P-1D");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType4);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.Period period12 = new org.joda.time.Period(10L, periodType4, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfEra();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        mutablePeriod22.addHours(100);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        mutablePeriod22.add((long) 3, chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.year();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean49 = mutableInterval44.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean50 = mutableInterval41.contains((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval48);
        long long52 = mutableInterval48.getEndMillis();
        org.joda.time.DateTime dateTime53 = mutableInterval48.getEnd();
        org.joda.time.LocalDate localDate54 = dateTime53.toLocalDate();
        int int55 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDate54);
        int[] intArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            chronology10.validate((org.joda.time.ReadablePartial) localDate54, intArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-292275054) + "'", int55 == (-292275054));
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.Interval interval19 = interval3.withChronology(chronology14);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) '4', chronology28);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withFields(readablePartial31);
        boolean boolean33 = instant20.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period35 = org.joda.time.Period.days((-1));
        org.joda.time.Period period37 = period35.withWeeks((int) 'a');
        org.joda.time.Period period39 = period35.plusMonths((int) (short) -1);
        org.joda.time.Period period41 = period35.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime30.plus((org.joda.time.ReadablePeriod) period35);
        boolean boolean43 = interval19.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.plusHours(59);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        int int48 = dateTime47.getMonthOfYear();
        org.joda.time.Duration duration49 = new org.joda.time.Duration(readableInstant46, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (byte) 1, (int) (short) 1, 29454, 3600052);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        int int11 = dateTimeField8.getDifference((long) ' ', (-7377898L));
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, periodType14, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) '4', chronology19);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withFields(readablePartial33);
        boolean boolean35 = instant22.isAfter((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology37 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone41);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.DateTime dateTime45 = dateTime42.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime42.toTimeOfDay();
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) timeOfDay46, locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone50);
        int int52 = dateTime51.getDayOfMonth();
        org.joda.time.DateTime dateTime54 = dateTime51.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(0);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, periodType59, chronology64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) '4', chronology64);
        org.joda.time.Instant instant67 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 1, periodType70, chronology75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) '4', chronology75);
        org.joda.time.ReadablePartial readablePartial78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.withFields(readablePartial78);
        boolean boolean80 = instant67.isAfter((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean81 = dateTime66.isAfter((org.joda.time.ReadableInstant) dateTime77);
        java.lang.String str82 = dateTime66.toString();
        boolean boolean83 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean84 = timeOfDay46.equals((java.lang.Object) dateTime56);
        int int85 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay46);
        long long87 = dateTimeField8.roundHalfEven((-349199979L));
        java.util.Locale locale89 = null;
        java.lang.String str90 = dateTimeField8.getAsText(10000L, locale89);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str82, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 99 + "'", int85 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-349200000L) + "'", long87 == (-349200000L));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "70" + "'", str90, "70");
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime11.minus((long) 5);
        int int16 = dateTime15.getDayOfMonth();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minus(0L);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = period27.getDays();
        org.joda.time.Period period30 = period27.minusMonths(26);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getMillis();
        org.joda.time.DurationFieldType durationFieldType17 = mutablePeriod8.getFieldType(0);
        mutablePeriod8.addHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone21);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean34 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTime dateTime37 = dateTime22.plus((org.joda.time.ReadablePeriod) weeks36);
        org.joda.time.DateTime dateTime39 = dateTime22.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, periodType42, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) '4', chronology47);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withFields(readablePartial50);
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property55 = dateTime51.era();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime51.withDurationAdded((org.joda.time.ReadableDuration) duration57, 0);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone62);
        int int64 = dateTime63.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime63.getZone();
        long long67 = dateTimeZone65.convertUTCToLocal((long) 0);
        int int69 = dateTimeZone65.getOffset((-3166581600000L));
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.Interval interval71 = duration57.toIntervalTo((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration57);
        java.lang.Object obj73 = mutablePeriod8.clone();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 349200000L + "'", long67 == 349200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 349200000 + "'", int69 == 349200000);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT10S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT10S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT10S");
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(100);
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone12);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear(0);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) '4', chronology37);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withFields(readablePartial40);
        boolean boolean42 = instant29.isAfter((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean43 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime39);
        java.lang.String str44 = dateTime28.toString();
        boolean boolean45 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime28.toString(dateTimeFormatter46);
        long long48 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime50 = dateTime28.withMillis(622673L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str44, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str47, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property6.roundHalfEvenCopy();
        int int11 = property6.getMinimumValue();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        java.lang.String str11 = dateTimeZone9.getName(100L);
        org.joda.time.DateTime dateTime12 = dateTime3.withZoneRetainFields(dateTimeZone9);
        long long14 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, 6000035L);
        int int16 = dateTimeZone9.getOffset((long) (short) -1);
        long long19 = dateTimeZone9.adjustOffset((long) (-416397), false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 6000035L + "'", long14 == 6000035L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 349200000 + "'", int16 == 349200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-416397L) + "'", long19 == (-416397L));
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 49);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("3600010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"3600010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.Interval interval19 = interval3.withChronology(chronology14);
        long long20 = interval3.getStartMillis();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period31 = org.joda.time.Period.days((-1));
        org.joda.time.Period period33 = period31.withWeeks((int) 'a');
        java.lang.String str34 = period31.toString();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) period31);
        int int36 = mutablePeriod29.getMillis();
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod29.toMutablePeriod();
        mutablePeriod29.setMillis((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        long long45 = interval43.toDurationMillis();
        org.joda.time.Interval interval47 = interval43.withEndMillis((long) (short) 100);
        long long48 = interval43.toDurationMillis();
        mutablePeriod29.setPeriod((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval43);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean58 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Interval interval59 = mutableInterval57.toInterval();
        org.joda.time.Interval interval60 = interval43.overlap((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration61 = interval59.toDuration();
        org.joda.time.Interval interval62 = interval3.gap((org.joda.time.ReadableInterval) interval59);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "P-1D" + "'", str34, "P-1D");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53L + "'", long45 == 53L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53L + "'", long48 == 53L);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNull(interval62);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) ' ');
        int int14 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.Days days17 = org.joda.time.Days.ONE;
        int int18 = days17.getDays();
        int int19 = days17.size();
        org.joda.time.Days days21 = days17.dividedBy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) days21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getName(100L);
        org.joda.time.DateTime dateTime9 = dateTime0.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded((long) 52, (int) (short) 1);
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfMonth();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusMonths((int) 'a');
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withFields(readablePartial18);
        boolean boolean20 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        org.joda.time.Interval interval30 = interval26.withEndMillis(53L);
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime22.withYearOfEra(26);
        int int35 = dateTime34.getDayOfYear();
        org.joda.time.Days days36 = org.joda.time.Days.ONE;
        int int37 = days36.getDays();
        org.joda.time.PeriodType periodType38 = days36.getPeriodType();
        org.joda.time.PeriodType periodType39 = periodType38.withMillisRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime34, periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime34.withMonthOfYear(491);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 491 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("P-6D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P-6D\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = periodFormatter3.getParseType();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter3.getPrinter();
        org.joda.time.Hours hours7 = org.joda.time.Hours.ZERO;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, periodType11, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) '4', chronology16);
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        boolean boolean32 = instant19.isAfter((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean33 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology34 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.millisOfSecond();
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) hours7, periodType8, chronology34);
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter3.withParseType(periodType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = org.joda.time.MutablePeriod.parse("2022-02-26T08:10:00.991+97:00", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = minutes1.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod5 = minutes1.toMutablePeriod();
        mutablePeriod5.setYears(24);
        mutablePeriod5.addYears((-9));
        mutablePeriod5.addYears((int) (short) 0);
        mutablePeriod5.setSeconds(1970);
        int int14 = mutablePeriod5.getSeconds();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(187200000L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        java.lang.String str5 = duration4.toString();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = duration4.toPeriod(periodType8);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period15 = org.joda.time.Period.days((-1));
        org.joda.time.Period period17 = period15.withWeeks((int) 'a');
        org.joda.time.Period period19 = period15.plusMonths((int) (short) -1);
        org.joda.time.Period period21 = period15.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime10.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withFields(readablePartial33);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property41 = dateTime10.minuteOfDay();
        int int42 = property41.getMaximumValue();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1439 + "'", int42 == 1439);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks15.plus((int) (byte) -1);
        org.joda.time.Weeks weeks19 = weeks15.minus(22);
        org.joda.time.Weeks weeks21 = weeks19.minus((int) '#');
        org.joda.time.Weeks weeks23 = weeks21.dividedBy(349200000);
        org.joda.time.Weeks weeks25 = weeks23.plus(2);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone27);
        int int29 = dateTime28.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTime dateTime43 = dateTime28.plus((org.joda.time.ReadablePeriod) weeks42);
        boolean boolean44 = weeks25.isLessThan(weeks42);
        boolean boolean45 = weeks1.isGreaterThan(weeks25);
        org.joda.time.Duration duration46 = weeks1.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DurationField durationField56 = chronology40.halfdays();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTimeZone dateTimeZone58 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField59 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology40.weekOfWeekyear();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 100);
        long long2 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = dateTime6.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime6.plusHours(349200000);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((-18L));
        int int14 = dateTime9.getMinuteOfDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property16 = dateTime9.year();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 491 + "'", int14 == 491);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period29 = mutableInterval9.toPeriod(periodType28);
        mutableInterval9.setDurationBeforeEnd(0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period14 = org.joda.time.Period.days((-1));
        org.joda.time.Period period16 = period14.withWeeks((int) 'a');
        java.lang.String str17 = period14.toString();
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) period14);
        int int19 = mutablePeriod12.getMillis();
        org.joda.time.DurationFieldType durationFieldType21 = mutablePeriod12.getFieldType(0);
        int int22 = periodType1.indexOf(durationFieldType21);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        java.lang.String str36 = period33.toString();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period33);
        mutablePeriod31.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime53.withEarlierOffsetAtOverlap();
        int int56 = dateTime53.getDayOfWeek();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, periodType58, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology63.getZone();
        org.joda.time.DateTime dateTime67 = dateTime53.withChronology(chronology63);
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType70 = null;
        int int71 = minutes69.get(durationFieldType70);
        int int73 = minutes69.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod74 = minutes69.toMutablePeriod();
        long long77 = chronology63.add((org.joda.time.ReadablePeriod) mutablePeriod74, (long) '#', (int) (short) 10);
        mutablePeriod31.setPeriod((long) (short) 100, (long) 2, chronology63);
        org.joda.time.DurationField durationField79 = chronology63.halfdays();
        org.joda.time.DurationField durationField80 = durationFieldType21.getField(chronology63);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(chronology85);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology89 = chronology85.withZone(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = chronology89.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((java.lang.Object) durationField80, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YearMonthDayTime" + "'", str2, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P-1D" + "'", str17, "P-1D");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P-1D" + "'", str36, "P-1D");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 6000035L + "'", long77 == 6000035L);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.DurationFieldType durationFieldType8 = mutablePeriod6.getFieldType(3);
        int int9 = mutablePeriod6.getMonths();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutableInterval mutableInterval15 = interval13.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean26 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(0L);
        boolean boolean30 = mutableInterval18.containsNow();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        long long36 = interval34.toDurationMillis();
        org.joda.time.Interval interval38 = interval34.withEndMillis((long) (short) 100);
        long long39 = interval34.toDurationMillis();
        boolean boolean40 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval34);
        boolean boolean42 = interval34.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = interval46.toMutableInterval();
        boolean boolean49 = interval34.contains((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Period period50 = interval46.toPeriod();
        boolean boolean51 = interval46.isAfterNow();
        boolean boolean52 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval46);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        int int57 = minutes55.get(durationFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = minutes55.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod59 = minutes55.toMutablePeriod();
        org.joda.time.Instant instant60 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) '4', chronology68);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withFields(readablePartial71);
        boolean boolean73 = instant60.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period75 = org.joda.time.Period.days((-1));
        org.joda.time.Period period77 = period75.withWeeks((int) 'a');
        org.joda.time.Period period79 = period75.plusMonths((int) (short) -1);
        org.joda.time.Period period81 = period75.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime82 = dateTime70.plus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.MutablePeriod mutablePeriod83 = period75.toMutablePeriod();
        org.joda.time.Minutes minutes85 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType86 = null;
        int int87 = minutes85.get(durationFieldType86);
        int int89 = minutes85.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod90 = minutes85.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType92 = minutes85.getFieldType(0);
        int int93 = mutablePeriod83.get(durationFieldType92);
        mutablePeriod59.set(durationFieldType92, 10);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        int int97 = mutablePeriod6.getYears();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 53L + "'", long36 == 53L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 53L + "'", long39 == 53L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod90);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, dateTimeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str7 = dateTimeZone4.getID();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(0L, 355201155L, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutableInterval mutableInterval14 = interval12.toMutableInterval();
        org.joda.time.Interval interval16 = interval12.withEndMillis(53L);
        org.joda.time.Chronology chronology17 = interval12.getChronology();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean28 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean29 = mutableInterval20.contains((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        long long35 = interval33.toDurationMillis();
        org.joda.time.Interval interval37 = interval33.withEndMillis((long) (short) 100);
        mutableInterval27.setInterval((org.joda.time.ReadableInterval) interval33);
        boolean boolean39 = mutableInterval27.containsNow();
        boolean boolean40 = interval12.contains((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean41 = interval8.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean42 = interval8.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean53 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean54 = mutableInterval45.contains((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Duration duration56 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) '4', chronology65);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withFields(readablePartial68);
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfDay();
        org.joda.time.DateTime dateTime71 = dateTime69.withEarlierOffsetAtOverlap();
        int int72 = dateTime69.getDayOfWeek();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.Chronology chronology79 = interval78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 1, periodType74, chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology79.getZone();
        org.joda.time.DateTime dateTime83 = dateTime69.withChronology(chronology79);
        org.joda.time.Interval interval84 = duration57.toIntervalTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period87 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration57);
        mutableInterval52.setDurationAfterStart((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval90 = mutableInterval52.toInterval();
        boolean boolean91 = interval8.isBefore((org.joda.time.ReadableInterval) interval90);
        boolean boolean92 = interval90.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:00" + "'", str7, "+97:00");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 53L + "'", long35 == 53L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology25 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime30.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay34 = dateTime30.toTimeOfDay();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) timeOfDay34, locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone38);
        int int40 = dateTime39.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(0);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.Instant instant55 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, periodType58, chronology63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) '4', chronology63);
        org.joda.time.ReadablePartial readablePartial66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.withFields(readablePartial66);
        boolean boolean68 = instant55.isAfter((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime65);
        java.lang.String str70 = dateTime54.toString();
        boolean boolean71 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean72 = timeOfDay34.equals((java.lang.Object) dateTime44);
        java.lang.String str73 = timeOfDay34.toString();
        int int74 = timeOfDay34.size();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str70, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "T01:00:00.010" + "'", str73, "T01:00:00.010");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Hours hours2 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) weeks1);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType2);
        mutablePeriod3.addMonths(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean17 = mutableInterval12.isBefore((org.joda.time.ReadableInterval) mutableInterval16);
        boolean boolean18 = mutableInterval9.contains((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Interval interval26 = interval22.withEndMillis((long) (short) 100);
        mutableInterval16.setInterval((org.joda.time.ReadableInterval) interval22);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period39 = org.joda.time.Period.days((-1));
        org.joda.time.Period period41 = period39.withWeeks((int) 'a');
        java.lang.String str42 = period39.toString();
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) period39);
        int int44 = mutablePeriod37.getMillis();
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod37.toMutablePeriod();
        mutablePeriod45.add((int) '4', (int) (short) 0, (int) (byte) 0, (int) (short) 10, 1, (int) 'a', (int) (short) 100, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone57);
        int int59 = dateTime58.getMillisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.plusMillis((int) '#');
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 1, periodType64, chronology69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) '4', chronology69);
        org.joda.time.DateTime dateTime72 = dateTime61.withChronology(chronology69);
        mutablePeriod45.setPeriod((long) (short) 100, chronology69);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone75);
        org.joda.time.DateTime dateTime77 = dateTime76.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration78 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration79 = duration78.toDuration();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableDuration) duration78);
        org.joda.time.DurationFieldType durationFieldType82 = mutablePeriod80.getFieldType(3);
        mutablePeriod45.add(durationFieldType82, (int) (short) -1);
        mutablePeriod3.set(durationFieldType82, (int) (byte) 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "P-1D" + "'", str42, "P-1D");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod45);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3600010 + "'", int59 == 3600010);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(durationFieldType82);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        int int5 = property4.getLeapAmount();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        int int8 = property4.getMaximumShortTextLength(locale7);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((java.lang.Object) locale7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "60" + "'", str6, "60");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withParseType(periodType5);
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter3.getParser();
        boolean boolean8 = periodFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod9 = org.joda.time.MutablePeriod.parse("490", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = minutes1.getFieldType();
        org.joda.time.Duration duration5 = minutes1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone7);
        int int9 = dateTime8.getDayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, periodType11, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology16.getZone();
        org.joda.time.DateTime dateTime20 = dateTime8.withZoneRetainFields(dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) '4', chronology28);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, periodType34, chronology39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) '4', chronology39);
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withFields(readablePartial42);
        boolean boolean44 = instant31.isAfter((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean45 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str46 = dateTime30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        int int49 = dateTime30.get(dateTimeFieldType47);
        boolean boolean50 = dateTime20.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime52 = dateTime20.withWeekOfWeekyear(5);
        org.joda.time.DateTime dateTime54 = dateTime20.minusWeeks((-9));
        org.joda.time.Period period55 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime54.getYearOfEra();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str46, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        java.lang.String str16 = property14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property14.getFieldType();
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField18.getAsText(352800010L, locale20);
        long long23 = dateTimeField18.roundFloor(1645513773137L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[dayOfWeek]" + "'", str16, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Friday" + "'", str21, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645484400000L + "'", long23 == 1645484400000L);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.PeriodType periodType2 = days0.getPeriodType();
        java.lang.String str3 = days0.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P1D" + "'", str3, "P1D");
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getYear();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = interval11.toMutableInterval();
        org.joda.time.Interval interval15 = interval11.withEndMillis(53L);
        org.joda.time.Chronology chronology16 = interval11.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean27 = mutableInterval22.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean28 = mutableInterval19.contains((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        long long34 = interval32.toDurationMillis();
        org.joda.time.Interval interval36 = interval32.withEndMillis((long) (short) 100);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) interval32);
        boolean boolean38 = mutableInterval26.containsNow();
        boolean boolean39 = interval11.contains((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withFields(readablePartial51);
        boolean boolean53 = instant40.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property54 = dateTime50.dayOfWeek();
        org.joda.time.Hours hours55 = org.joda.time.Hours.EIGHT;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period66 = org.joda.time.Period.days((-1));
        org.joda.time.Period period68 = period66.withWeeks((int) 'a');
        java.lang.String str69 = period66.toString();
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) period66);
        int int71 = mutablePeriod64.getMillis();
        org.joda.time.DurationFieldType durationFieldType73 = mutablePeriod64.getFieldType(0);
        int int74 = hours55.get(durationFieldType73);
        org.joda.time.DateTime dateTime76 = dateTime50.withFieldAdded(durationFieldType73, (int) (short) 100);
        boolean boolean77 = interval11.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime78 = dateTime50.toLocalDateTime();
        int int79 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 53L + "'", long34 == 53L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "P-1D" + "'", str69, "P-1D");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withEarlierOffsetAtOverlap();
        int int15 = dateTime12.getDayOfWeek();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology22);
        org.joda.time.Interval interval27 = duration0.toIntervalTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        org.joda.time.Interval interval30 = interval27.withPeriodAfterStart((org.joda.time.ReadablePeriod) weeks29);
        org.joda.time.Seconds seconds31 = weeks29.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(seconds31);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean13 = mutableInterval2.isBefore(0L);
        mutableInterval2.setDurationBeforeEnd(6000035L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        long long21 = interval19.toDurationMillis();
        org.joda.time.Interval interval23 = interval19.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant27 = instant24.withDurationAdded(readableDuration25, 10);
        org.joda.time.Interval interval28 = interval23.withEnd((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) '4', chronology37);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withFields(readablePartial40);
        boolean boolean42 = instant29.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withFields(readablePartial54);
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime55.withEarlierOffsetAtOverlap();
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.DateTime dateTime69 = dateTime55.withChronology(chronology65);
        org.joda.time.Interval interval70 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant72 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration43, 21);
        org.joda.time.Duration duration73 = duration43.toDuration();
        org.joda.time.Instant instant74 = instant24.minus((org.joda.time.ReadableDuration) duration43);
        boolean boolean75 = mutableInterval2.contains((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration80 = duration77.withDurationAdded((-3600000L), 3);
        org.joda.time.Duration duration81 = duration80.toDuration();
        org.joda.time.Duration duration83 = duration81.withMillis(1672531200000L);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 53L + "'", long21 == 53L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.DateTime dateTime16 = dateTime5.withChronology(chronology13);
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = dateTime29.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withFields(readablePartial43);
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.withEarlierOffsetAtOverlap();
        int int47 = dateTime44.getDayOfWeek();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology54.getZone();
        org.joda.time.DateTime dateTime58 = dateTime44.withChronology(chronology54);
        int int59 = dateTime58.getYearOfEra();
        org.joda.time.DateTime dateTime60 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology61 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime30);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale63);
        org.joda.time.Chronology chronology65 = localDateTime30.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone70);
        int int72 = dateTime71.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        boolean boolean75 = dateTime71.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean86 = mutableInterval81.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        boolean boolean87 = mutableInterval78.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Weeks weeks88 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval85);
        long long89 = mutableInterval85.getEndMillis();
        org.joda.time.DateTime dateTime90 = mutableInterval85.getEnd();
        org.joda.time.Chronology chronology91 = mutableInterval85.getChronology();
        org.joda.time.DateTime dateTime92 = dateTime71.toDateTime(chronology91);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((long) (-90), chronology91);
        org.joda.time.DateTimeField dateTimeField94 = chronology91.minuteOfDay();
        org.joda.time.DurationField durationField95 = chronology91.millis();
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime((-18L), chronology91);
        org.joda.time.DateTimeZone dateTimeZone97 = chronology91.getZone();
        org.joda.time.DateTimeField dateTimeField98 = dateTimeFieldType66.getField(chronology91);
        int int99 = localDateTime30.get(dateTimeFieldType66);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Feb" + "'", str64, "Feb");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(weeks88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 52L + "'", long89 == 52L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeZone97);
        org.junit.Assert.assertNotNull(dateTimeField98);
// flaky:         org.junit.Assert.assertTrue("'" + int99 + "' != '" + 9 + "'", int99 == 9);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.setYears(0);
        mutablePeriod8.add((long) 4);
        mutablePeriod8.setSeconds((int) (short) 10);
        mutablePeriod8.setYears(24);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        java.lang.String str36 = period33.toString();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period33);
        int int38 = mutablePeriod31.getMillis();
        org.joda.time.DurationFieldType durationFieldType40 = mutablePeriod31.getFieldType(0);
        mutablePeriod31.setMonths(10);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds44 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) mutablePeriod8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P24Y10M-2DT10.004S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P-1D" + "'", str36, "P-1D");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DateTimeField dateTimeField56 = chronology40.minuteOfHour();
        org.joda.time.Chronology chronology57 = chronology40.withUTC();
        org.joda.time.DurationField durationField58 = chronology57.years();
        java.lang.String str59 = durationField58.toString();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DurationField[years]" + "'", str59, "DurationField[years]");
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.LocalDate localDate4 = dateTime2.toLocalDate();
        org.joda.time.DateTimeField dateTimeField6 = localDate4.getField(0);
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localDate4, readablePartial7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period37 = org.joda.time.Period.days((-1));
        org.joda.time.Period period39 = period37.withWeeks((int) 'a');
        java.lang.String str40 = period37.toString();
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) period37);
        mutablePeriod35.setYears(0);
        mutablePeriod35.setPeriod((int) (byte) -1, 100, (int) (byte) 100, (-1), 100, (int) (short) 10, 429, 0);
        mutablePeriod35.addYears(429);
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.setWeeks((int) (byte) 0);
        mutablePeriod35.addWeeks(9);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P-1D" + "'", str40, "P-1D");
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        java.lang.String str26 = period22.toString();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str29 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) -1, periodType28);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period41 = org.joda.time.Period.days((-1));
        org.joda.time.Period period43 = period41.withWeeks((int) 'a');
        java.lang.String str44 = period41.toString();
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) period41);
        int int46 = mutablePeriod39.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = mutablePeriod39.getFieldType(0);
        int int49 = periodType28.indexOf(durationFieldType48);
        boolean boolean50 = period22.equals((java.lang.Object) int49);
        org.joda.time.Hours hours51 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours52 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours53 = hours51.minus(hours52);
        boolean boolean54 = period22.equals((java.lang.Object) hours51);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((java.lang.Object) period22);
        mutablePeriod55.addMinutes(43);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P-1M-1D" + "'", str26, "P-1M-1D");
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YearMonthDayTime" + "'", str29, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P-1D" + "'", str44, "P-1D");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-19045), 42, 5, 0);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str25 = dateTime9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        int int28 = dateTime9.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((-349199948L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone33);
        java.util.Locale locale35 = null;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        org.joda.time.DateTime dateTime38 = dateTime29.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = dateTime42.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = dateTime49.toLocalDateTime();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str53 = periodType52.getName();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (short) -1, periodType52);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period65 = org.joda.time.Period.days((-1));
        org.joda.time.Period period67 = period65.withWeeks((int) 'a');
        java.lang.String str68 = period65.toString();
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) period65);
        int int70 = mutablePeriod63.getMillis();
        org.joda.time.DurationFieldType durationFieldType72 = mutablePeriod63.getFieldType(0);
        int int73 = periodType52.indexOf(durationFieldType72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime43, (org.joda.time.ReadablePartial) localDateTime50, periodType52);
        boolean boolean75 = dateTimeZone37.isLocalDateTimeGap(localDateTime43);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str25, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "YearMonthDayTime" + "'", str53, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "P-1D" + "'", str68, "P-1D");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DateTimeField dateTimeField56 = chronology40.minuteOfHour();
        org.joda.time.Chronology chronology57 = chronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        int int60 = dateTimeField58.getLeapAmount((-1353793568400090L));
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(16);
        org.joda.time.Period period3 = period1.withMinutes((int) (short) 100);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        java.util.Locale locale12 = null;
        int int13 = property10.getMaximumShortTextLength(locale12);
        int int14 = property10.getLeapAmount();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant16);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.joda.time.Period period1 = org.joda.time.Period.millis(27425229);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean13 = mutableInterval2.isBefore(0L);
        java.lang.Object obj14 = mutableInterval2.clone();
        boolean boolean15 = mutableInterval2.isBeforeNow();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(99);
        org.joda.time.Hours hours2 = minutes1.toStandardHours();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getMillis();
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod8.toMutablePeriod();
        mutablePeriod8.setMillis((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Interval interval26 = interval22.withEndMillis((long) (short) 100);
        long long27 = interval22.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean37 = mutableInterval32.isBefore((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval38 = mutableInterval36.toInterval();
        org.joda.time.Interval interval39 = interval22.overlap((org.joda.time.ReadableInterval) interval38);
        boolean boolean41 = interval39.isBefore(164096150400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval43 = interval39.withStartMillis(13654800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 53L + "'", long27 == 53L);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        int int26 = dateTime25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int28 = dateTime25.get(dateTimeFieldType27);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime25.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = yearMonthDay29.getValue(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days1 = org.joda.time.Days.ONE;
        int int2 = days1.getDays();
        int int3 = days1.size();
        org.joda.time.Days days5 = days1.dividedBy((int) (short) -1);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        boolean boolean7 = days5.isLessThan(days6);
        boolean boolean8 = days0.isLessThan(days5);
        org.joda.time.Days days10 = days0.multipliedBy(2);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.Days days12 = days11.negated();
        boolean boolean13 = days10.isGreaterThan(days11);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4867790359L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean5 = instant1.isSupported(dateTimeFieldType3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = dateTime44.toLocalDateTime();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 1, periodType48, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) '4', chronology53);
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.withFields(readablePartial56);
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property61 = dateTime57.era();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime57.withDurationAdded((org.joda.time.ReadableDuration) duration63, 0);
        long long66 = duration63.getStandardHours();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration63, periodType67);
        org.joda.time.Period period69 = duration37.toPeriod(periodType67);
        org.joda.time.Period period71 = period69.withSeconds(366);
        org.joda.time.Period period73 = period69.withSeconds(2);
        int int74 = period73.getSeconds();
        org.joda.time.Period period76 = period73.minusMillis(360000000);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        java.lang.String str18 = dateTime2.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime2.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone22);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean35 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval34);
        boolean boolean36 = mutableInterval27.contains((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTime dateTime38 = dateTime23.plus((org.joda.time.ReadablePeriod) weeks37);
        int int39 = dateTime23.getYearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(59);
        org.joda.time.LocalTime localTime44 = dateTime41.toLocalTime();
        org.joda.time.DateTime dateTime45 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone47);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfFloorCopy();
        java.util.Locale locale54 = null;
        int int55 = property52.getMaximumShortTextLength(locale54);
        org.joda.time.DurationField durationField56 = property52.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property52.getFieldType();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getRangeDurationType();
        int int59 = dateTime2.get(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getRangeDurationType();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-05T01:00:00.010+97:00" + "'", str18, "1970-01-05T01:00:00.010+97:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-05T01:00:00.010+97:00" + "'", str20, "1970-01-05T01:00:00.010+97:00");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(durationFieldType60);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval5 = interval3.toMutableInterval();
        org.joda.time.Interval interval7 = interval3.withEndMillis(53L);
        org.joda.time.Chronology chronology8 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean19 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean20 = mutableInterval11.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        long long26 = interval24.toDurationMillis();
        org.joda.time.Interval interval28 = interval24.withEndMillis((long) (short) 100);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) interval24);
        boolean boolean30 = mutableInterval18.containsNow();
        boolean boolean31 = interval3.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean42 = mutableInterval37.isBefore((org.joda.time.ReadableInterval) mutableInterval41);
        boolean boolean43 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean48 = mutableInterval18.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology55.getZone();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.monthOfYear();
        boolean boolean63 = mutableInterval18.equals((java.lang.Object) dateTimeField62);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 53L + "'", long26 == 53L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        int int18 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime2.minusHours((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(59);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean34 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval33);
        long long37 = mutableInterval33.getEndMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean48 = mutableInterval43.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        boolean boolean49 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period61 = org.joda.time.Period.days((-1));
        org.joda.time.Period period63 = period61.withWeeks((int) 'a');
        java.lang.String str64 = period61.toString();
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) period61);
        mutablePeriod59.setYears(0);
        mutablePeriod59.setPeriod((int) (byte) -1, 100, (int) (byte) 100, (-1), 100, (int) (short) 10, 429, 0);
        mutablePeriod59.addYears(429);
        mutableInterval33.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Duration duration80 = mutableInterval33.toDuration();
        org.joda.time.Period period81 = mutableInterval33.toPeriod();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) period81);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval82.setInterval(1645513806899L, 349200042L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P-1D" + "'", str64, "P-1D");
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        int int26 = dateTime25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int28 = dateTime25.get(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime25.withDayOfWeek(27425229);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27425229 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getMillis();
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod8.toMutablePeriod();
        mutablePeriod8.setMillis((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Interval interval26 = interval22.withEndMillis((long) (short) 100);
        long long27 = interval22.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Period period29 = interval22.toPeriod();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval39);
        long long43 = mutableInterval39.getEndMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean54 = mutableInterval49.isBefore((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean55 = mutableInterval46.contains((org.joda.time.ReadableInterval) mutableInterval53);
        mutableInterval39.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTime dateTime57 = mutableInterval53.getStart();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone59);
        int int61 = dateTime60.getSecondOfMinute();
        int int62 = dateTime60.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone64);
        int int66 = dateTime65.getMillisOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.plusMillis((int) '#');
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 1, periodType71, chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) '4', chronology76);
        org.joda.time.DateTime dateTime79 = dateTime68.withChronology(chronology76);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime60.toMutableDateTime(chronology76);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) mutableInterval53, chronology76);
        mutablePeriod81.setPeriod((-292275054), (int) (byte) 10, (int) ' ', 0, (int) (short) -1, 3600, 21, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType91.getDurationType();
        mutablePeriod81.add(durationFieldType92, 6);
        org.joda.time.Period period95 = period29.withFields((org.joda.time.ReadablePeriod) mutablePeriod81);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod81.setValue((-97), (-2147483639));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 53L + "'", long27 == 53L);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3600010 + "'", int62 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3600010 + "'", int66 == 3600010);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Seconds seconds3 = seconds1.multipliedBy(349200000);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration5 = seconds4.toStandardDuration();
        org.joda.time.Seconds seconds7 = seconds4.dividedBy(27425229);
        boolean boolean8 = seconds3.isLessThan(seconds7);
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration10 = seconds9.toStandardDuration();
        boolean boolean11 = seconds3.isGreaterThan(seconds9);
        org.joda.time.Duration duration12 = seconds3.toStandardDuration();
        int int13 = seconds3.getSeconds();
        org.joda.time.PeriodType periodType14 = seconds3.getPeriodType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withEarlierOffsetAtOverlap();
        int int21 = dateTime18.getDayOfWeek();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTime dateTime32 = dateTime18.withChronology(chronology28);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = minutes34.get(durationFieldType35);
        int int38 = minutes34.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod39 = minutes34.toMutablePeriod();
        long long42 = chronology28.add((org.joda.time.ReadablePeriod) mutablePeriod39, (long) '#', (int) (short) 10);
        org.joda.time.Period period43 = mutablePeriod39.toPeriod();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        mutablePeriod39.add((long) 60, chronology46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(684034L, 1645513802047L, chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 99, 5899L, chronology46);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 70, 9L, periodType2, chronology46);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6000035L + "'", long42 == 6000035L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.DateTime dateTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean23 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean24 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval25 = mutableInterval15.toInterval();
        boolean boolean26 = interval12.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean37 = mutableInterval32.isBefore((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean38 = mutableInterval29.contains((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval36);
        long long40 = mutableInterval36.getEndMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean51 = mutableInterval46.isBefore((org.joda.time.ReadableInterval) mutableInterval50);
        boolean boolean52 = mutableInterval43.contains((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Period period55 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType56);
        org.joda.time.Period period58 = mutableInterval50.toPeriod(periodType56);
        boolean boolean59 = mutableInterval36.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        boolean boolean60 = interval12.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.DateTime dateTime61 = mutableInterval36.getStart();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks13 = weeks12.negated();
        org.joda.time.Weeks weeks15 = weeks13.plus((int) (byte) -1);
        org.joda.time.PeriodType periodType16 = weeks15.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod27.add((long) 3);
        mutablePeriod27.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(4, (int) '#', 3600052, (int) (short) -1, 21, (-1), 100, 22);
        mutablePeriod40.setValue(0, 366);
        mutablePeriod40.setHours(349200000);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int47 = mutablePeriod40.size();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        mutablePeriod40.add(durationFieldType48, 3600010);
        org.joda.time.Period period52 = period17.withFieldAdded(durationFieldType48, 0);
        boolean boolean53 = weeks15.isSupported(durationFieldType48);
        java.lang.Object obj54 = null;
        boolean boolean55 = weeks15.equals(obj54);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours1 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours2 = hours0.minus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours4 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours5 = hours3.minus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = hours1.getFieldType(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getYearOfEra();
        org.joda.time.DateTime.Property property51 = dateTime48.yearOfCentury();
        org.joda.time.DateTime dateTime53 = dateTime48.plusMillis((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay54 = dateTime53.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = dateTime58.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = dateTime65.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        org.joda.time.Period period69 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime59, (org.joda.time.ReadablePartial) localDateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks70 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) timeOfDay54, (org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) '4', chronology17);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withFields(readablePartial20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withEarlierOffsetAtOverlap();
        int int24 = dateTime21.getDayOfWeek();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, periodType26, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology31.getZone();
        org.joda.time.DateTime dateTime35 = dateTime21.withChronology(chronology31);
        org.joda.time.Interval interval36 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period39 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period40 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType41 = period40.getPeriodType();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration9, periodType41);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withFields(readablePartial54);
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime55.withEarlierOffsetAtOverlap();
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.DateTime dateTime69 = dateTime55.withChronology(chronology65);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = null;
        int int73 = minutes71.get(durationFieldType72);
        int int75 = minutes71.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod76 = minutes71.toMutablePeriod();
        long long79 = chronology65.add((org.joda.time.ReadablePeriod) mutablePeriod76, (long) '#', (int) (short) 10);
        org.joda.time.Period period80 = duration9.toPeriod(periodType43, chronology65);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) 1, periodType82, chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone90 = chronology87.getZone();
        org.joda.time.DateTimeField dateTimeField91 = chronology87.minuteOfHour();
        org.joda.time.Period period92 = new org.joda.time.Period(3600052L, periodType43, chronology87);
        org.joda.time.Period period94 = period92.plusDays((int) (byte) 10);
        org.joda.time.Period period96 = period94.minusHours((-19045));
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 6000035L + "'", long79 == 6000035L);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfHour();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField13.getMaximumTextLength(locale14);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withEarlierOffsetAtOverlap();
        int int15 = dateTime12.getDayOfWeek();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology22);
        org.joda.time.Interval interval27 = duration0.toIntervalTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period30 = duration0.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.era();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, periodType34, chronology39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) '4', chronology39);
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withFields(readablePartial42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) ' ');
        boolean boolean46 = dateTime41.isAfterNow();
        org.joda.time.TimeOfDay timeOfDay47 = dateTime41.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = property31.compareTo((org.joda.time.ReadablePartial) timeOfDay47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.DateTime dateTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean23 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean24 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval25 = mutableInterval15.toInterval();
        boolean boolean26 = interval12.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean37 = mutableInterval32.isBefore((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean38 = mutableInterval29.contains((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval36);
        long long40 = mutableInterval36.getEndMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean51 = mutableInterval46.isBefore((org.joda.time.ReadableInterval) mutableInterval50);
        boolean boolean52 = mutableInterval43.contains((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Period period55 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType56);
        org.joda.time.Period period58 = mutableInterval50.toPeriod(periodType56);
        boolean boolean59 = mutableInterval36.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        boolean boolean60 = interval12.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.DateTime dateTime61 = mutableInterval36.getEnd();
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale7 = periodFormatter6.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = org.joda.time.Period.parse("AD", periodFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(100);
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumTextLength(locale11);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 41858);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, periodType4, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withFields(readablePartial12);
        boolean boolean14 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withFields(readablePartial26);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withEarlierOffsetAtOverlap();
        int int30 = dateTime27.getDayOfWeek();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime27.withChronology(chronology37);
        org.joda.time.Interval interval42 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant44 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration15, 21);
        org.joda.time.Duration duration45 = duration15.toDuration();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology52.getZone();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.Period period57 = duration45.toPeriod(chronology52);
        boolean boolean58 = dateTimeFieldType0.isSupported(chronology52);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(4867774815L);
        long long63 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) (short) -1, 9);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType67 = null;
        int int68 = minutes66.get(durationFieldType67);
        int int70 = minutes66.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod71 = minutes66.toMutablePeriod();
        boolean boolean72 = minutes64.isLessThan(minutes66);
        int[] intArray75 = chronology52.get((org.joda.time.ReadablePeriod) minutes64, (long) 79, (long) 3600052);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime76.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 43809973334L + "'", long63 == 43809973334L);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[59]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 10);
        org.joda.time.Interval interval12 = interval7.withEnd((org.joda.time.ReadableInstant) instant8);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str14 = periodType13.getName();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Period period17 = interval12.toPeriod(periodType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = period17.withWeeks((-97));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YearMonthDayTime" + "'", str14, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.joda.time.Period period4 = new org.joda.time.Period((-97), 365, (-9), 56);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, dateTimeZone7);
        boolean boolean10 = dateTimeZone7.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone7);
        java.util.TimeZone timeZone13 = dateTimeZone7.toTimeZone();
        boolean boolean14 = period4.equals((java.lang.Object) dateTimeZone7);
        long long18 = dateTimeZone7.convertLocalToUTC(0L, false, (-292275054L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-349200000L) + "'", long18 == (-349200000L));
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.Chronology chronology11 = chronology6.withUTC();
        org.joda.time.DurationField durationField12 = chronology6.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology6);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) ' ');
        boolean boolean28 = dateTime23.isAfterNow();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime23.toDateTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.Chronology chronology39 = chronology6.withZone(dateTimeZone35);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(7);
        int int2 = period1.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Hours hours2 = days0.toStandardHours();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, dateTimeZone8);
        int int11 = dateTimeZone8.getOffsetFromLocal((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((int) (byte) 10, (int) (byte) 0, (-19), 70, (int) ' ', 187440000, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 349200000 + "'", int11 == 349200000);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((java.lang.Object) dateTimeFieldType0, chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.joda.time.Period period2 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType3);
        int int5 = mutablePeriod4.getDays();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue(429, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 429");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Period period16 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType17);
        org.joda.time.Period period19 = mutableInterval11.toPeriod(periodType17);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Instant instant42 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration40, 3600010);
        boolean boolean43 = mutableInterval11.isAfter((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology44 = instant37.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 349200000, 6L, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration4 = duration1.withDurationAdded((-3600000L), 3);
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withFields(readablePartial16);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.withEarlierOffsetAtOverlap();
        int int20 = dateTime17.getDayOfWeek();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology27.getZone();
        org.joda.time.DateTime dateTime31 = dateTime17.withChronology(chronology27);
        int int32 = dateTime31.getDayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime31.plusHours(3599);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period36 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34, periodType35);
        long long37 = duration4.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-14400000L) + "'", long37 == (-14400000L));
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(349200000);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.minus(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTime dateTime27 = mutableInterval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone29);
        int int31 = dateTime30.getSecondOfMinute();
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.plusMillis((int) '#');
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.DateTime dateTime49 = dateTime38.withChronology(chronology46);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime30.toMutableDateTime(chronology46);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) mutableInterval23, chronology46);
        mutablePeriod51.setPeriod((-292275054), (int) (byte) 10, (int) ' ', 0, (int) (short) -1, 3600, 21, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        mutablePeriod51.add(durationFieldType62, 6);
        int int65 = mutablePeriod51.getYears();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3600010 + "'", int32 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3600010 + "'", int36 == 3600010);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-292275048) + "'", int65 == (-292275048));
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(0L);
        boolean boolean14 = mutableInterval2.containsNow();
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval2.copy();
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval2.toMutableInterval();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withFields(readablePartial28);
        boolean boolean30 = instant17.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period32 = org.joda.time.Period.days((-1));
        org.joda.time.Period period34 = period32.withWeeks((int) 'a');
        org.joda.time.Period period36 = period32.plusMonths((int) (short) -1);
        org.joda.time.Period period38 = period32.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime39 = dateTime27.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.MutablePeriod mutablePeriod40 = period32.toMutablePeriod();
        org.joda.time.Period period41 = period32.toPeriod();
        int int42 = period41.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTime dateTime27 = mutableInterval23.getStart();
        int int28 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfDay();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        long long33 = durationField30.getMillis((long) 1500, 315569523540001L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3599 + "'", int28 == 3599);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1500L + "'", long33 == 1500L);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType1 = hours0.getPeriodType();
        org.joda.time.PeriodType periodType2 = hours0.getPeriodType();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(355200035L, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfMinute();
        long long10 = dateTimeField8.roundHalfCeiling((long) (-1));
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeField8.getAsShortText((int) (short) -1, locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField8.getAsText(315569174340001L, locale15);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1" + "'", str13, "-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.DateTime dateTime16 = dateTime5.withChronology(chronology13);
        org.joda.time.DurationField durationField17 = chronology13.days();
        long long20 = durationField17.subtract(0L, 360000000);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31104000000000000L) + "'", long20 == (-31104000000000000L));
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.Chronology chronology11 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withFields(readablePartial26);
        boolean boolean28 = instant15.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfWeek();
        boolean boolean30 = dateTimeZone14.equals((java.lang.Object) dateTime25);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) '4', chronology38);
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withFields(readablePartial41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime42.withEarlierOffsetAtOverlap();
        int int45 = dateTime42.getDayOfWeek();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology52.getZone();
        org.joda.time.DateTime dateTime56 = dateTime42.withChronology(chronology52);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = null;
        int int60 = minutes58.get(durationFieldType59);
        int int62 = minutes58.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod63 = minutes58.toMutablePeriod();
        long long66 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod63, (long) '#', (int) (short) 10);
        org.joda.time.Period period67 = mutablePeriod63.toPeriod();
        boolean boolean68 = dateTimeZone14.equals((java.lang.Object) mutablePeriod63);
        int[] intArray70 = chronology11.get((org.joda.time.ReadablePeriod) mutablePeriod63, (long) 26);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 6000035L + "'", long66 == 6000035L);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 0, 0, 26]");
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(0L);
        boolean boolean14 = mutableInterval2.containsNow();
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.Instant instant17 = instant15.minus(100L);
        org.joda.time.Chronology chronology18 = instant15.getChronology();
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.ZERO;
        java.lang.String str21 = duration20.toString();
        org.joda.time.Duration duration22 = org.joda.time.Duration.ZERO;
        boolean boolean23 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 1);
        org.joda.time.Instant instant27 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration22, 3600010);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, periodType30, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '4', chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withFields(readablePartial38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) ' ');
        boolean boolean42 = dateTime37.isAfterNow();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology48.getZone();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = dateTime37.toDateTime(dateTimeZone49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant27, (org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter7.getPrinter();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Days days11 = org.joda.time.Days.ONE;
        int int12 = days11.getDays();
        org.joda.time.MutablePeriod mutablePeriod13 = days11.toMutablePeriod();
        java.lang.String str14 = days11.toString();
        org.joda.time.PeriodType periodType15 = days11.getPeriodType();
        org.joda.time.Days days17 = days11.minus(4);
        org.joda.time.DurationFieldType durationFieldType18 = days11.getFieldType();
        int int19 = periodType9.indexOf(durationFieldType18);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter7.withParseType(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = periodFormatter20.parsePeriod("PT-3600.045S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P1D" + "'", str14, "P1D");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodFormatter20);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        boolean boolean9 = minutes1.isLessThan(minutes3);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        boolean boolean16 = minutes10.isGreaterThan(minutes12);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        int int20 = minutes18.get(durationFieldType19);
        org.joda.time.DurationFieldType durationFieldType21 = minutes18.getFieldType();
        boolean boolean22 = minutes10.isLessThan(minutes18);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = minutes24.get(durationFieldType25);
        org.joda.time.Minutes minutes27 = minutes10.minus(minutes24);
        boolean boolean28 = minutes1.isGreaterThan(minutes24);
        org.joda.time.Minutes minutes29 = null;
        boolean boolean30 = minutes24.isGreaterThan(minutes29);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval5 = interval3.toMutableInterval();
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        boolean boolean19 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, readableDuration22);
        boolean boolean24 = interval3.abuts((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Interval interval25 = interval3.toInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        boolean boolean54 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period56 = org.joda.time.Period.days((-1));
        org.joda.time.Period period58 = period56.withWeeks((int) 'a');
        org.joda.time.Period period60 = period56.plusMonths((int) (short) -1);
        org.joda.time.Period period62 = period56.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        org.joda.time.DateTime.Property property76 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks81 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        org.joda.time.Period period84 = period83.toPeriod();
        org.joda.time.Period period86 = period84.plusMillis((-97));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period88 = period86.plusMonths(10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears((int) '#');
        int int13 = dateTime9.getCenturyOfEra();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.Hours hours31 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours32 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours33 = hours31.minus(hours32);
        org.joda.time.Duration duration34 = hours32.toStandardDuration();
        org.joda.time.DateTime dateTime35 = dateTime25.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration44 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withFields(readablePartial55);
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime56.withEarlierOffsetAtOverlap();
        int int59 = dateTime56.getDayOfWeek();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology66.getZone();
        org.joda.time.DateTime dateTime70 = dateTime56.withChronology(chronology66);
        org.joda.time.Interval interval71 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period74 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType76 = period75.getPeriodType();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration44, periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime35, periodType76);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 1, periodType80, chronology85);
        org.joda.time.DateTimeField dateTimeField87 = chronology85.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone88 = chronology85.getZone();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.minuteOfHour();
        org.joda.time.DurationField durationField90 = chronology85.weeks();
        org.joda.time.DateTimeField dateTimeField91 = chronology85.yearOfCentury();
        org.joda.time.DateTime dateTime92 = dateTime9.toDateTime(chronology85);
        org.joda.time.DurationField durationField93 = chronology85.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long95 = durationField93.getMillis(489);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours1 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours2 = hours0.minus(hours1);
        int int3 = hours1.getHours();
        org.joda.time.DurationFieldType durationFieldType4 = hours1.getFieldType();
        java.lang.String str5 = durationFieldType4.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, periodType5, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) '4', chronology10);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withFields(readablePartial13);
        boolean boolean15 = instant2.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withEarlierOffsetAtOverlap();
        int int31 = dateTime28.getDayOfWeek();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTime dateTime42 = dateTime28.withChronology(chronology38);
        org.joda.time.Interval interval43 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Instant instant45 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration16, 21);
        org.joda.time.Duration duration46 = duration16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone48);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.Period period55 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration1, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Hours hours57 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType58 = hours57.getPeriodType();
        org.joda.time.PeriodType periodType59 = periodType58.withMinutesRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateTime54, periodType59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean71 = mutableInterval66.isBefore((org.joda.time.ReadableInterval) mutableInterval70);
        boolean boolean72 = mutableInterval63.contains((org.joda.time.ReadableInterval) mutableInterval70);
        mutableInterval63.setDurationAfterStart(0L);
        boolean boolean75 = mutableInterval63.containsNow();
        org.joda.time.Instant instant76 = org.joda.time.Instant.now();
        org.joda.time.Instant instant78 = instant76.minus(100L);
        org.joda.time.Chronology chronology79 = instant76.getChronology();
        mutableInterval63.setEnd((org.joda.time.ReadableInstant) instant76);
        org.joda.time.Duration duration81 = org.joda.time.Duration.ZERO;
        java.lang.String str82 = duration81.toString();
        org.joda.time.Duration duration83 = org.joda.time.Duration.ZERO;
        boolean boolean84 = duration81.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = duration83.plus((long) 1);
        org.joda.time.Instant instant88 = instant76.withDurationAdded((org.joda.time.ReadableDuration) duration83, 3600010);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTime dateTime91 = dateTime54.withWeekyear((int) '4');
        boolean boolean93 = dateTime91.isAfter(31556908800000L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0S" + "'", str82, "PT0S");
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (short) 10);
        org.joda.time.Seconds seconds4 = seconds3.negated();
        org.joda.time.Seconds seconds5 = seconds3.negated();
        org.joda.time.Seconds seconds6 = seconds0.minus(seconds3);
        java.lang.String str7 = seconds6.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT-10S" + "'", str7, "PT-10S");
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period30 = period27.withMonths((int) (byte) 0);
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.DateTime dateTime33 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period31, (int) (byte) 0);
        org.joda.time.Hours hours34 = period31.toStandardHours();
        org.joda.time.Minutes minutes35 = hours34.toStandardMinutes();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(minutes35);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        long long27 = mutableInterval23.getEndMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean38 = mutableInterval33.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks41 = weeks40.negated();
        org.joda.time.Weeks weeks43 = weeks41.plus((int) (byte) -1);
        org.joda.time.PeriodType periodType44 = weeks43.getPeriodType();
        org.joda.time.Period period45 = mutableInterval23.toPeriod(periodType44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(periodType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType48 = periodType44.getFieldType(489);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 489");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period37 = org.joda.time.Period.days((-1));
        org.joda.time.Period period39 = period37.withWeeks((int) 'a');
        java.lang.String str40 = period37.toString();
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) period37);
        mutablePeriod35.setYears(0);
        mutablePeriod35.setPeriod((int) (byte) -1, 100, (int) (byte) 100, (-1), 100, (int) (short) 10, 429, 0);
        mutablePeriod35.addYears(429);
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.addMonths(490);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) '4', chronology66);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.withFields(readablePartial69);
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfDay();
        org.joda.time.DateTime dateTime72 = dateTime70.withEarlierOffsetAtOverlap();
        int int73 = dateTime70.getDayOfWeek();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.Chronology chronology80 = interval79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 1, periodType75, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone83 = chronology80.getZone();
        org.joda.time.DateTime dateTime84 = dateTime70.withChronology(chronology80);
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType87 = null;
        int int88 = minutes86.get(durationFieldType87);
        int int90 = minutes86.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod91 = minutes86.toMutablePeriod();
        long long94 = chronology80.add((org.joda.time.ReadablePeriod) mutablePeriod91, (long) '#', (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField95 = chronology80.minuteOfDay();
        boolean boolean96 = dateTimeFieldType58.isSupported(chronology80);
        org.joda.time.DurationFieldType durationFieldType97 = dateTimeFieldType58.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod35.set(durationFieldType97, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'eras'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P-1D" + "'", str40, "P-1D");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 6000035L + "'", long94 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(durationFieldType97);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval2.copy();
        org.joda.time.Days days13 = org.joda.time.Days.ZERO;
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) days13);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean25 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean26 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean28 = mutableInterval17.isBefore(0L);
        mutableInterval17.setDurationBeforeEnd(6000035L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        long long36 = interval34.toDurationMillis();
        org.joda.time.Interval interval38 = interval34.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant39.withDurationAdded(readableDuration40, 10);
        org.joda.time.Interval interval43 = interval38.withEnd((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant44 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology52);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withFields(readablePartial55);
        boolean boolean57 = instant44.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, periodType61, chronology66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) '4', chronology66);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.withFields(readablePartial69);
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfDay();
        org.joda.time.DateTime dateTime72 = dateTime70.withEarlierOffsetAtOverlap();
        int int73 = dateTime70.getDayOfWeek();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.Chronology chronology80 = interval79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 1, periodType75, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone83 = chronology80.getZone();
        org.joda.time.DateTime dateTime84 = dateTime70.withChronology(chronology80);
        org.joda.time.Interval interval85 = duration58.toIntervalTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Instant instant87 = instant44.withDurationAdded((org.joda.time.ReadableDuration) duration58, 21);
        org.joda.time.Duration duration88 = duration58.toDuration();
        org.joda.time.Instant instant89 = instant39.minus((org.joda.time.ReadableDuration) duration58);
        boolean boolean90 = mutableInterval17.contains((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Duration duration92 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Instant instant93 = instant39.plus((org.joda.time.ReadableDuration) duration92);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setStart((org.joda.time.ReadableInstant) instant93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 53L + "'", long36 == 53L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(instant93);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.EIGHT;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        java.lang.String str21 = period18.toString();
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) period18);
        int int23 = mutablePeriod16.getMillis();
        org.joda.time.DurationFieldType durationFieldType25 = mutablePeriod16.getFieldType(0);
        int int26 = hours7.get(durationFieldType25);
        mutablePeriod5.set(durationFieldType25, (int) (short) 0);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str31 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (short) -1, periodType30);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period43 = org.joda.time.Period.days((-1));
        org.joda.time.Period period45 = period43.withWeeks((int) 'a');
        java.lang.String str46 = period43.toString();
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) period43);
        int int48 = mutablePeriod41.getMillis();
        org.joda.time.DurationFieldType durationFieldType50 = mutablePeriod41.getFieldType(0);
        int int51 = periodType30.indexOf(durationFieldType50);
        int int52 = mutablePeriod5.indexOf(durationFieldType50);
        java.lang.Object obj53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType55 = period54.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(obj53, periodType55);
        java.lang.String str57 = periodType55.toString();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, periodType59, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology64.getZone();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.minuteOfHour();
        org.joda.time.DurationField durationField69 = chronology64.weeks();
        org.joda.time.Period period70 = new org.joda.time.Period((java.lang.Object) mutablePeriod5, periodType55, chronology64);
        int int71 = periodType55.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P-1D" + "'", str21, "P-1D");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YearMonthDayTime" + "'", str31, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P-1D" + "'", str46, "P-1D");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PeriodType[Standard]" + "'", str57, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.PeriodType periodType1 = hours0.getPeriodType();
        org.joda.time.Hours hours2 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours3 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours4 = hours2.minus(hours3);
        int int5 = hours3.getHours();
        org.joda.time.Hours hours6 = hours0.minus(hours3);
        org.joda.time.Hours hours7 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours8 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours9 = hours7.minus(hours8);
        org.joda.time.Hours hours10 = hours6.plus(hours8);
        org.joda.time.Duration duration11 = hours6.toStandardDuration();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.millisOfDay();
        java.util.Locale locale12 = null;
        int int13 = dateTimeField11.getMaximumShortTextLength(locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField11.getAsShortText(57, locale15);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "57" + "'", str16, "57");
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        boolean boolean54 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period56 = org.joda.time.Period.days((-1));
        org.joda.time.Period period58 = period56.withWeeks((int) 'a');
        org.joda.time.Period period60 = period56.plusMonths((int) (short) -1);
        org.joda.time.Period period62 = period56.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        org.joda.time.DateTime.Property property76 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks81 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType86);
        mutablePeriod87.addMonths(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray90 = mutablePeriod87.getFieldTypes();
        org.joda.time.DateTime dateTime91 = dateTime75.plus((org.joda.time.ReadablePeriod) mutablePeriod87);
        org.joda.time.DateTime.Property property92 = dateTime91.minuteOfHour();
        java.util.Locale locale94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = property92.setCopy("PT10M", locale94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT10M\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(durationFieldTypeArray90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("20");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"20\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, periodType7, chronology12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) '4', chronology12);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withFields(readablePartial15);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime16.era();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        long long25 = duration22.getStandardHours();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration22, periodType26);
        int int28 = mutablePeriod27.size();
        org.joda.time.Days days29 = org.joda.time.Days.ONE;
        int int30 = days29.getDays();
        org.joda.time.MutablePeriod mutablePeriod31 = days29.toMutablePeriod();
        mutablePeriod31.addWeeks((int) '4');
        mutablePeriod31.addDays((int) (byte) 0);
        int[] intArray36 = mutablePeriod31.getValues();
        mutablePeriod31.setYears((int) 'a');
        org.joda.time.Period period40 = org.joda.time.Period.weeks(22);
        org.joda.time.Period period42 = period40.minusSeconds((-416397));
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period40);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) period40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 52, 1, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean22 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean23 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval14.setDurationAfterStart(0L);
        boolean boolean26 = mutableInterval14.containsNow();
        boolean boolean27 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval14);
        mutableInterval14.setDurationAfterStart((long) 365);
        long long30 = mutableInterval14.getStartMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = interval36.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        boolean boolean43 = interval36.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period44 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Days days45 = duration32.toStandardDays();
        org.joda.time.Duration duration46 = duration32.toDuration();
        org.joda.time.Duration duration49 = duration32.withDurationAdded((-106851L), 0);
        long long50 = duration49.getMillis();
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        long long52 = duration49.getMillis();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        int int2 = period0.getMillis();
        org.joda.time.Period period4 = period0.plusMillis(3600052);
        int int5 = period0.getMonths();
        org.joda.time.Period period6 = period0.negated();
        int int7 = period0.getWeeks();
        org.joda.time.Days days8 = period0.toStandardDays();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(days8);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        boolean boolean31 = instant18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str33 = dateTime17.toString();
        boolean boolean34 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime36 = dateTime17.plusHours(349200000);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = minutes40.get(durationFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = minutes40.getFieldType();
        boolean boolean44 = minutes38.isGreaterThan(minutes40);
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes40, (org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.Chronology chronology48 = instant45.getChronology();
        org.joda.time.Chronology chronology49 = chronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.joda.time.DateTime dateTime51 = dateTime36.toDateTime(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime51.withMinuteOfHour((-457087));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457087 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str33, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.DateTime dateTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.DurationField durationField13 = property6.getDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        long long17 = dateTimeField14.add(946335600000L, 21);
        org.joda.time.Period period21 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology28.getZone();
        org.joda.time.Period period30 = new org.joda.time.Period(10L, periodType22, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period43 = org.joda.time.Period.days((-1));
        org.joda.time.Period period45 = period43.withWeeks((int) 'a');
        java.lang.String str46 = period43.toString();
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) period43);
        mutablePeriod41.addMonths((int) (short) -1);
        org.joda.time.Period period51 = org.joda.time.Period.days((-1));
        org.joda.time.Period period53 = period51.withWeeks((int) 'a');
        org.joda.time.Period period55 = period51.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        boolean boolean57 = period55.isSupported(durationFieldType56);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 1, periodType62, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) '4', chronology67);
        org.joda.time.DurationField durationField70 = chronology67.centuries();
        mutablePeriod41.add((long) (short) 10, chronology67);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.clockhourOfDay();
        long long74 = dateTimeField72.roundHalfCeiling((long) 4);
        long long77 = dateTimeField72.addWrapField((long) (-1), 52);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone79);
        org.joda.time.DateTime dateTime81 = dateTime80.toDateTime();
        org.joda.time.LocalDate localDate82 = dateTime80.toLocalDate();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology88.getZone();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) 1, dateTimeZone89);
        org.joda.time.DateTime dateTime91 = localDate82.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        int int92 = dateTimeField72.getMinimumValue((org.joda.time.ReadablePartial) localDate82);
        java.util.Locale locale93 = null;
        java.lang.String str94 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDate82, locale93);
        int int95 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDate82);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 948150000000L + "'", long17 == 948150000000L);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P-1D" + "'", str46, "P-1D");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 14399999L + "'", long77 == 14399999L);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970" + "'", str94, "1970");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 365 + "'", int95 == 365);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.minusHours(24);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime.Property property17 = dateTime15.centuryOfEra();
        int int18 = property17.getMinimumValue();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-04T01:00:00.052+97:00" + "'", str16, "1970-01-04T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        java.lang.String str28 = dateTimeZone26.getName(100L);
        org.joda.time.DateTime dateTime29 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        java.lang.String str37 = dateTimeZone35.getName(100L);
        org.joda.time.DateTime dateTime38 = dateTime29.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology39 = chronology17.withZone(dateTimeZone35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1353793219200090L), 187200000L, chronology39);
        boolean boolean41 = durationFieldType8.isSupported(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime7.toDateTime(chronology39);
        org.joda.time.DateTime dateTime44 = dateTime7.plusWeeks(292278993);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(100);
        int int48 = dateTimeZone46.getStandardOffset((long) (-10));
        org.joda.time.DateTime dateTime49 = dateTime7.withZone(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 360000000 + "'", int48 == 360000000);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days0.toMutablePeriod();
        org.joda.time.PeriodType periodType3 = days0.getPeriodType();
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) days0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.centuries();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.set(durationFieldType7, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval5 = interval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        long long23 = interval21.toDurationMillis();
        org.joda.time.Interval interval25 = interval21.withEndMillis((long) (short) 100);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) interval21);
        boolean boolean27 = interval3.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean38 = mutableInterval33.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval37);
        long long41 = mutableInterval37.getEndMillis();
        org.joda.time.DateTime dateTime42 = mutableInterval37.getEnd();
        boolean boolean43 = interval21.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        long long49 = interval47.toDurationMillis();
        org.joda.time.Interval interval51 = interval47.withEndMillis((long) (short) 100);
        boolean boolean52 = interval21.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Period period53 = interval21.toPeriod();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.MutableInterval mutableInterval59 = interval57.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        boolean boolean64 = interval57.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.minusDays(1935);
        boolean boolean67 = interval21.contains((org.joda.time.ReadableInstant) dateTime63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = dateTime63.withTime(79, 29422512, (-1106), 60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53L + "'", long49 == 53L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        boolean boolean13 = dateTime11.isAfterNow();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = dateTime7.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Days days17 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Days days18 = org.joda.time.Days.ONE;
        int int19 = days18.getDays();
        org.joda.time.MutablePeriod mutablePeriod20 = days18.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period31 = org.joda.time.Period.days((-1));
        org.joda.time.Period period33 = period31.withWeeks((int) 'a');
        java.lang.String str34 = period31.toString();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) period31);
        int int36 = mutablePeriod29.getMillis();
        org.joda.time.DurationFieldType durationFieldType38 = mutablePeriod29.getFieldType(0);
        mutablePeriod20.add(durationFieldType38, 10);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', chronology50);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withFields(readablePartial53);
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfDay();
        org.joda.time.DateTime dateTime56 = dateTime54.withEarlierOffsetAtOverlap();
        int int57 = dateTime54.getDayOfWeek();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, periodType59, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology64.getZone();
        org.joda.time.DateTime dateTime68 = dateTime54.withChronology(chronology64);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.weekOfWeekyear();
        org.joda.time.DurationField durationField70 = chronology64.months();
        mutablePeriod20.setPeriod(60480000000L, (-349199968L), chronology64);
        org.joda.time.DurationField durationField72 = chronology64.minutes();
        org.joda.time.DateTime dateTime73 = dateTime12.toDateTime(chronology64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime12.withSecondOfMinute(27425230);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27425230 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "P-1D" + "'", str34, "P-1D");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.joda.time.Hours hours0 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours2 = hours0.minus(hours1);
        org.joda.time.Hours hours4 = hours1.minus((-292275054));
        org.joda.time.Hours hours6 = hours4.plus(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) hours4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 17536503540");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean22 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean23 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval14.setDurationAfterStart(0L);
        boolean boolean26 = mutableInterval14.containsNow();
        boolean boolean27 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Hours hours29 = org.joda.time.Hours.hours((int) (byte) 100);
        mutableInterval9.setPeriodAfterStart((org.joda.time.ReadablePeriod) hours29);
        org.joda.time.Hours hours32 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType33 = hours32.getPeriodType();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 'a', periodType33);
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        mutableInterval9.setStartMillis((long) 1970);
        org.joda.time.Duration duration38 = mutableInterval9.toDuration();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, periodType6, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) '4', chronology11);
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withFields(readablePartial14);
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.withEarlierOffsetAtOverlap();
        int int18 = dateTime15.getDayOfWeek();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DateTime dateTime29 = dateTime15.withChronology(chronology25);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        int int35 = minutes31.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod36 = minutes31.toMutablePeriod();
        long long39 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) '#', (int) (short) 10);
        org.joda.time.Period period40 = mutablePeriod36.toPeriod();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        mutablePeriod36.add((long) 60, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(684034L, 1645513802047L, chronology43);
        org.joda.time.Period period46 = new org.joda.time.Period((long) 99, 5899L, chronology43);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime59 = dateTime56.minusYears((int) '#');
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 1, periodType62, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) '4', chronology67);
        org.joda.time.ReadablePartial readablePartial70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.withFields(readablePartial70);
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        org.joda.time.DateTime dateTime73 = dateTime71.withEarlierOffsetAtOverlap();
        int int74 = dateTime71.getDayOfWeek();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.Chronology chronology81 = interval80.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 1, periodType76, chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology81.getZone();
        org.joda.time.DateTime dateTime85 = dateTime71.withChronology(chronology81);
        org.joda.time.Minutes minutes87 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType88 = null;
        int int89 = minutes87.get(durationFieldType88);
        int int91 = minutes87.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod92 = minutes87.toMutablePeriod();
        long long95 = chronology81.add((org.joda.time.ReadablePeriod) mutablePeriod92, (long) '#', (int) (short) 10);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) mutablePeriod92);
        java.util.GregorianCalendar gregorianCalendar97 = dateTime59.toGregorianCalendar();
        org.joda.time.Interval interval98 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period46, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 6000035L + "'", long39 == 6000035L);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(minutes87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 6000035L + "'", long95 == 6000035L);
        org.junit.Assert.assertNotNull(gregorianCalendar97);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean18 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean19 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Weeks weeks21 = weeks20.negated();
        org.joda.time.Weeks weeks23 = weeks21.plus((int) (byte) -1);
        org.joda.time.Weeks weeks25 = weeks21.minus(22);
        org.joda.time.Weeks weeks27 = weeks25.minus((int) '#');
        org.joda.time.Weeks weeks29 = weeks27.dividedBy(349200000);
        org.joda.time.Weeks weeks30 = weeks27.negated();
        org.joda.time.Weeks weeks32 = weeks30.multipliedBy((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer7, (org.joda.time.ReadablePeriod) weeks32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone8);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        boolean boolean13 = dateTime9.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval23);
        long long27 = mutableInterval23.getEndMillis();
        org.joda.time.DateTime dateTime28 = mutableInterval23.getEnd();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-90), chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((int) (short) 10, 24, 1976, 27425230, 10, (-292275054), chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27425230 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str14 = periodType13.getName();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period26 = org.joda.time.Period.days((-1));
        org.joda.time.Period period28 = period26.withWeeks((int) 'a');
        java.lang.String str29 = period26.toString();
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) period26);
        int int31 = mutablePeriod24.getMillis();
        org.joda.time.DurationFieldType durationFieldType33 = mutablePeriod24.getFieldType(0);
        int int34 = periodType13.indexOf(durationFieldType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime4, (org.joda.time.ReadablePartial) localDateTime11, periodType13);
        org.joda.time.Chronology chronology36 = localDateTime4.getChronology();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, periodType38, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.Chronology chronology47 = chronology36.withZone(dateTimeZone46);
        int int49 = dateTimeZone46.getStandardOffset((-292275054L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YearMonthDayTime" + "'", str14, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P-1D" + "'", str29, "P-1D");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 349200000 + "'", int49 == 349200000);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withFields(readablePartial17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration24, 0);
        long long27 = duration24.getStandardHours();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, periodType31, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology36.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfWeek();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, 53L, chronology36);
        org.joda.time.DateTime dateTime42 = interval41.getStart();
        org.joda.time.Period period43 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType44 = period43.getPeriodType();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime42, periodType44);
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter2.withParseType(periodType44);
        java.io.Writer writer47 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period58 = org.joda.time.Period.days((-1));
        org.joda.time.Period period60 = period58.withWeeks((int) 'a');
        java.lang.String str61 = period58.toString();
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) period58);
        int int63 = mutablePeriod56.getYears();
        mutablePeriod56.addHours((int) (short) 1);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        mutablePeriod56.add((org.joda.time.ReadableDuration) duration67);
        mutablePeriod56.addWeeks(42);
        mutablePeriod56.addHours(6);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer47, (org.joda.time.ReadablePeriod) mutablePeriod56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter46);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "P-1D" + "'", str61, "P-1D");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(duration67);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long6 = dateTimeZone2.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str21 = periodType20.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, periodType20);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        java.lang.String str36 = period33.toString();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period33);
        int int38 = mutablePeriod31.getMillis();
        org.joda.time.DurationFieldType durationFieldType40 = mutablePeriod31.getFieldType(0);
        int int41 = periodType20.indexOf(durationFieldType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDateTime18, periodType20);
        boolean boolean43 = dateTimeZone2.isLocalDateTimeGap(localDateTime18);
        java.util.TimeZone timeZone44 = dateTimeZone2.toTimeZone();
        int int46 = dateTimeZone2.getOffsetFromLocal(4867867182L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 6000035L + "'", long6 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "YearMonthDayTime" + "'", str21, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P-1D" + "'", str36, "P-1D");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 349200000 + "'", int46 == 349200000);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.DateTime dateTime14 = mutableInterval9.getEnd();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("29422512");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"29422512\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds2 = seconds0.plus((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod3 = seconds0.toMutablePeriod();
        mutablePeriod3.setMillis(11);
        mutablePeriod3.addYears(1971);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter7.getPrinter();
        org.joda.time.Days days9 = org.joda.time.Days.TWO;
        org.joda.time.Days days11 = days9.minus((int) '4');
        org.joda.time.Days days13 = days9.multipliedBy(100);
        org.joda.time.Days days14 = org.joda.time.Days.TWO;
        org.joda.time.Days days15 = org.joda.time.Days.ONE;
        int int16 = days15.getDays();
        int int17 = days15.size();
        org.joda.time.Days days19 = days15.dividedBy((int) (short) -1);
        org.joda.time.Days days20 = org.joda.time.Days.THREE;
        boolean boolean21 = days19.isLessThan(days20);
        boolean boolean22 = days14.isLessThan(days19);
        org.joda.time.Days days24 = days14.multipliedBy(2);
        int int25 = days24.size();
        boolean boolean26 = days9.isLessThan(days24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = periodFormatter7.print((org.joda.time.ReadablePeriod) days24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime11.dayOfMonth();
        java.lang.String str28 = property27.getAsString();
        int int29 = property27.getMaximumValue();
        java.lang.String str30 = property27.toString();
        int int31 = property27.getLeapAmount();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "5" + "'", str28, "5");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[dayOfMonth]" + "'", str30, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1320L);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        boolean boolean7 = minutes1.isGreaterThan(minutes3);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes3, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.Chronology chronology11 = instant8.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.era();
        org.joda.time.DurationField durationField14 = chronology11.weekyears();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 366, chronology11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withEarlierOffsetAtOverlap();
        int int31 = dateTime28.getDayOfWeek();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, periodType33, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTime dateTime42 = dateTime28.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.weekOfWeekyear();
        java.lang.String str45 = dateTimeField43.getAsText((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField43.getType();
        boolean boolean47 = dateTime15.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2" + "'", str45, "2");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property2 = dateTime0.minuteOfDay();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, periodType6, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) '4', chronology11);
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withFields(readablePartial14);
        boolean boolean16 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone19);
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTime dateTime32 = dateTime20.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.withZone(dateTimeZone31);
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime36 = dateTime0.plusMonths(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.joda.time.Hours hours0 = org.joda.time.Hours.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = hours0.toMutablePeriod();
        org.joda.time.Seconds seconds2 = hours0.toStandardSeconds();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.joda.time.Period period1 = org.joda.time.Period.days((-1));
        org.joda.time.Hours hours2 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType3 = hours2.getPeriodType();
        org.joda.time.Period period4 = period1.withFields((org.joda.time.ReadablePeriod) hours2);
        int int5 = period1.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, periodType5, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        org.joda.time.DateTime dateTime14 = dateTime2.withZoneRetainFields(dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, periodType28, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) '4', chronology33);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withFields(readablePartial36);
        boolean boolean38 = instant25.isAfter((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean39 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime35);
        java.lang.String str40 = dateTime24.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        int int43 = dateTime24.get(dateTimeFieldType41);
        boolean boolean44 = dateTime14.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime.Property property45 = dateTime14.weekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str40, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        boolean boolean31 = instant18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str33 = dateTime17.toString();
        boolean boolean34 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime36 = dateTime17.plusHours(349200000);
        org.joda.time.DateTime dateTime38 = dateTime17.withWeekyear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone40);
        int int42 = dateTime41.getDayOfMonth();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfDay((int) 'a');
        boolean boolean45 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property46 = dateTime44.monthOfYear();
        org.joda.time.Duration duration47 = org.joda.time.Duration.ZERO;
        java.lang.String str48 = duration47.toString();
        org.joda.time.Duration duration49 = org.joda.time.Duration.ZERO;
        boolean boolean50 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.plus((long) 1);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1, periodType54, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.centuryOfEra();
        org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) duration52, chronology59);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration52);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str33, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0S" + "'", str48, "PT0S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone5);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime6.getZone();
        org.joda.time.DateMidnight dateMidnight9 = dateTime6.toDateMidnight();
        org.joda.time.Days days10 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears(490);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(6);
        int int15 = dateTime12.getDayOfWeek();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        org.joda.time.DurationField durationField11 = dateTimeField9.getDurationField();
        java.util.Locale locale12 = null;
        int int13 = dateTimeField9.getMaximumTextLength(locale12);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long6 = dateTimeZone2.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str21 = periodType20.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, periodType20);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        java.lang.String str36 = period33.toString();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period33);
        int int38 = mutablePeriod31.getMillis();
        org.joda.time.DurationFieldType durationFieldType40 = mutablePeriod31.getFieldType(0);
        int int41 = periodType20.indexOf(durationFieldType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDateTime18, periodType20);
        boolean boolean43 = dateTimeZone2.isLocalDateTimeGap(localDateTime18);
        java.lang.String str45 = dateTimeZone2.getShortName((long) 2);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 6000035L + "'", long6 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "YearMonthDayTime" + "'", str21, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P-1D" + "'", str36, "P-1D");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+97:00" + "'", str45, "+97:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(64190322003130L);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) ' ');
        boolean boolean14 = dateTime9.isAfterNow();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime9.toDateTime(dateTimeZone21);
        org.joda.time.Hours hours24 = org.joda.time.Hours.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = hours24.toMutablePeriod();
        org.joda.time.DateTime dateTime26 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        int int27 = dateTime26.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(355200035L);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.copy();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period13 = org.joda.time.Period.days((-1));
        org.joda.time.Period period15 = period13.withWeeks((int) 'a');
        java.lang.String str16 = period13.toString();
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) period13);
        mutablePeriod11.addMonths((int) (short) -1);
        org.joda.time.Period period21 = org.joda.time.Period.days((-1));
        org.joda.time.Period period23 = period21.withWeeks((int) 'a');
        org.joda.time.Period period25 = period21.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = period25.isSupported(durationFieldType26);
        mutablePeriod11.add((org.joda.time.ReadablePeriod) period25);
        mutablePeriod11.setWeeks(4);
        int int31 = mutablePeriod11.getWeeks();
        mutablePeriod11.addMillis(489);
        org.joda.time.Period period34 = mutablePeriod11.toPeriod();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval36 = new org.joda.time.Interval((java.lang.Object) mutablePeriod2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P-1D" + "'", str16, "P-1D");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str13 = dateTimeZone10.getNameKey(6048000002L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 24, dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTime14.toString("PeriodType[StandardNoSeconds]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
// flaky:         org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        mutablePeriod1.addSeconds(27425229);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.joda.time.Period period1 = org.joda.time.Period.months(29);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = dateTime5.toLocalDateTime();
        org.joda.time.DateTime dateTime8 = dateTime5.plusMonths((int) 'a');
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) '4', chronology17);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withFields(readablePartial20);
        boolean boolean22 = instant9.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = interval28.toMutableInterval();
        org.joda.time.Interval interval32 = interval28.withEndMillis(53L);
        org.joda.time.Chronology chronology33 = interval28.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime24.withYearOfEra(26);
        int int37 = dateTime36.getDayOfYear();
        org.joda.time.Days days38 = org.joda.time.Days.ONE;
        int int39 = days38.getDays();
        org.joda.time.PeriodType periodType40 = days38.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withMillisRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime36, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = period1.normalizedStandard(periodType44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 11 + "'", int37 == 11);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours0.minus((int) (short) 100);
        org.joda.time.Period period3 = hours2.toPeriod();
        org.joda.time.Period period5 = period3.plusMonths((int) (byte) 100);
        org.joda.time.Period period7 = period3.withMonths(100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone10);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        boolean boolean22 = period7.isSupported(durationFieldType21);
        org.joda.time.Period period24 = period7.minusHours(22);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period30 = period27.withMonths((int) (byte) 0);
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.DateTime dateTime33 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period31, (int) (byte) 0);
        org.joda.time.Period period35 = period31.withMonths((-1));
        org.joda.time.Period period36 = period31.normalizedStandard();
        org.joda.time.Period period38 = period31.withMonths(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfDay();
        org.joda.time.Instant instant42 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', chronology50);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withFields(readablePartial53);
        boolean boolean55 = instant42.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property56 = dateTime52.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone58);
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 1, periodType62, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology67.getZone();
        org.joda.time.DateTime dateTime71 = dateTime59.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = dateTime52.withZone(dateTimeZone70);
        org.joda.time.Seconds seconds73 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime75 = dateTime39.plusMillis((int) (short) 1);
        org.joda.time.Duration duration76 = period38.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight77 = dateTime39.toDateMidnight();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(seconds73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((int) (short) 1);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withFields(readablePartial18);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime19.era();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration25, 0);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, periodType31, chronology36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) '4', chronology36);
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withFields(readablePartial39);
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.withEarlierOffsetAtOverlap();
        int int43 = dateTime42.getMillisOfDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekOfWeekyear(4);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean59 = mutableInterval54.isBefore((org.joda.time.ReadableInterval) mutableInterval58);
        boolean boolean60 = mutableInterval51.contains((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Period period63 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType64 = period63.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType64);
        org.joda.time.Period period66 = mutableInterval58.toPeriod(periodType64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType64);
        org.joda.time.PeriodType periodType68 = periodType64.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.MutableInterval mutableInterval74 = interval72.toMutableInterval();
        org.joda.time.Interval interval76 = interval72.withEndMillis(53L);
        org.joda.time.Chronology chronology77 = interval72.getChronology();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 0, (long) (byte) 0, periodType68, chronology77);
        org.joda.time.PeriodType periodType79 = periodType68.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime42, periodType79);
        org.joda.time.DateTime dateTime82 = dateTime42.plus(43809973334L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3600052 + "'", int43 == 3600052);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        int int18 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime2.minusHours((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(59);
        org.joda.time.DateTime dateTime24 = dateTime20.withDayOfMonth(4);
        int int25 = dateTime24.getMonthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime24.withWeekOfWeekyear(50);
        org.joda.time.Duration duration28 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration29 = duration28.toDuration();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        org.joda.time.Period period36 = duration28.toPeriod(chronology34);
        org.joda.time.Period period38 = period36.minusYears((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) (short) 0);
        java.lang.String str43 = dateTime40.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfDay();
        int int49 = property48.getLeapAmount();
        java.lang.String str50 = property48.getAsShortText();
        java.util.Locale locale51 = null;
        int int52 = property48.getMaximumShortTextLength(locale51);
        org.joda.time.DateTime dateTime53 = property48.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-26T08:11:16.820+97:00" + "'", str43, "2022-02-26T08:11:16.820+97:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "60" + "'", str50, "60");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, dateTimeZone13);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone17);
        int int19 = dateTime18.getSecondOfMinute();
        int int20 = dateTime18.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone22);
        int int24 = dateTime23.getMillisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMillis((int) '#');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, periodType29, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) '4', chronology34);
        org.joda.time.DateTime dateTime37 = dateTime26.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime18.toMutableDateTime(chronology34);
        int int39 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property40 = dateTime18.centuryOfEra();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy(429);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DurationField durationField55 = dateTimeField54.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone57);
        int int59 = dateTime58.getDayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime58.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime63 = dateTime61.withYear(0);
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone66);
        int int68 = dateTime67.getSecondOfMinute();
        int int69 = dateTime67.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone71);
        int int73 = dateTime72.getMillisOfDay();
        org.joda.time.DateTime dateTime75 = dateTime72.plusMillis((int) '#');
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 1, periodType78, chronology83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) '4', chronology83);
        org.joda.time.DateTime dateTime86 = dateTime75.withChronology(chronology83);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime67.toMutableDateTime(chronology83);
        org.joda.time.DateTime dateTime88 = dateTime63.toDateTime(chronology83);
        org.joda.time.DateTime dateTime90 = dateTime63.plusYears(21);
        org.joda.time.LocalDate localDate91 = dateTime90.toLocalDate();
        int[] intArray93 = new int[] { 9 };
        int int94 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) localDate91, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField10.add((org.joda.time.ReadablePartial) yearMonthDay43, 7, intArray93, 429);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3600010 + "'", int20 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3600010 + "'", int24 == 3600010);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 349200000 + "'", int39 == 349200000);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNull(durationField55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3600010 + "'", int69 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3600010 + "'", int73 == 3600010);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[9]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        mutablePeriod6.clear();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours9 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours10 = hours8.minus(hours9);
        org.joda.time.Duration duration11 = hours9.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.Period period16 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.Duration duration19 = org.joda.time.Duration.ZERO;
        java.lang.String str20 = duration19.toString();
        boolean boolean21 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration19);
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration19);
        mutablePeriod6.addSeconds(56);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusDays(52);
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        java.lang.String str8 = property7.getAsString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "19" + "'", str8, "19");
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime14.getFieldType((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone20);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumTextLength(locale27);
        java.lang.String str29 = property25.getName();
        org.joda.time.DateTime dateTime30 = property25.roundHalfCeilingCopy();
        org.joda.time.Interval interval31 = property25.toInterval();
        org.joda.time.Period period37 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType38);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.Period period46 = new org.joda.time.Period(10L, periodType38, chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.halfdayOfDay();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) 8, (long) 1970, chronology44);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone50);
        int int52 = dateTime51.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime51.getZone();
        long long55 = dateTimeZone53.convertUTCToLocal((long) 0);
        int int57 = dateTimeZone53.getOffset((-3166581600000L));
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology63.getZone();
        java.lang.String str66 = dateTimeZone64.getName(100L);
        org.joda.time.DateTime dateTime67 = dateTime58.withZoneRetainFields(dateTimeZone64);
        int int68 = dateTime67.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime69 = dateTime67.toLocalDateTime();
        boolean boolean70 = dateTimeZone53.isLocalDateTimeGap(localDateTime69);
        long long72 = chronology44.set((org.joda.time.ReadablePartial) localDateTime69, (long) 1935);
        int int73 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.Weeks weeks74 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localDateTime14, (org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) weeks74);
        org.joda.time.Hours hours76 = weeks74.toStandardHours();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfYear" + "'", str29, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 349200000L + "'", long55 == 349200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 349200000 + "'", int57 == 349200000);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+97:00" + "'", str66, "+97:00");
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 491 + "'", int68 == 491);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645513877141L + "'", long72 == 1645513877141L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(weeks74);
        org.junit.Assert.assertNotNull(hours76);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period25 = org.joda.time.Period.days((-1));
        org.joda.time.Period period27 = period25.withWeeks((int) 'a');
        java.lang.String str28 = period25.toString();
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) period25);
        mutablePeriod23.addMonths((int) (short) -1);
        mutablePeriod23.setSeconds(1970);
        int[] intArray35 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod23, 0L);
        org.joda.time.DateTime dateTime36 = dateTime6.toDateTime(chronology13);
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = dateTime36.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P-1D" + "'", str28, "P-1D");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 365);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period60 = org.joda.time.Period.days((-1));
        org.joda.time.Period period62 = period60.withWeeks((int) 'a');
        java.lang.String str63 = period60.toString();
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) period60);
        mutablePeriod58.addMonths((int) (short) -1);
        org.joda.time.Period period68 = org.joda.time.Period.days((-1));
        org.joda.time.Period period70 = period68.withWeeks((int) 'a');
        org.joda.time.Period period72 = period68.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = period72.isSupported(durationFieldType73);
        mutablePeriod58.add((org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 1, periodType79, chronology84);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) '4', chronology84);
        org.joda.time.DurationField durationField87 = chronology84.centuries();
        mutablePeriod58.add((long) (short) 10, chronology84);
        org.joda.time.DateTimeField dateTimeField89 = chronology84.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.clockhourOfDay();
        org.joda.time.DateTime dateTime91 = dateTime48.toDateTime(chronology84);
        org.joda.time.TimeOfDay timeOfDay92 = dateTime48.toTimeOfDay();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P-1D" + "'", str63, "P-1D");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(timeOfDay92);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        java.lang.String str23 = dateTimeZone21.getName(100L);
        org.joda.time.DateTime dateTime24 = dateTime15.withZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        java.lang.String str32 = dateTimeZone30.getName(100L);
        org.joda.time.DateTime dateTime33 = dateTime24.withZoneRetainFields(dateTimeZone30);
        boolean boolean35 = dateTime33.isBefore((long) 1970);
        org.joda.time.DateTime.Property property36 = dateTime33.monthOfYear();
        boolean boolean37 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime33.toCalendar(locale38);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+97:00" + "'", str23, "+97:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645513877439,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=11,SECOND=17,MILLISECOND=439,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = minutes3.getFieldType(0);
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.Period period32 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 1645513780018L, periodType30);
        mutablePeriod33.setSeconds((-4867796));
        mutablePeriod33.setMillis(5);
        mutablePeriod33.setHours((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod33.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant41 = new org.joda.time.Instant((java.lang.Object) mutablePeriod33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutablePeriod40);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (short) 10);
        org.joda.time.Seconds seconds4 = seconds3.negated();
        org.joda.time.Seconds seconds5 = seconds3.negated();
        org.joda.time.Seconds seconds6 = seconds0.minus(seconds3);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType9);
        mutablePeriod10.addMonths(0);
        mutablePeriod10.setSeconds((int) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean25 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean26 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval24);
        mutableInterval17.setDurationAfterStart(0L);
        boolean boolean29 = mutableInterval17.containsNow();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        mutableInterval32.setDurationAfterStart(0L);
        boolean boolean44 = mutableInterval32.containsNow();
        boolean boolean45 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj47 = mutableInterval17.clone();
        boolean boolean48 = seconds0.equals(obj47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, periodType51, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) '4', chronology56);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withFields(readablePartial59);
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime64 = dateTime60.minus((long) 5);
        int int65 = dateTime64.getDayOfMonth();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime75 = dateTime73.minus(0L);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds0, (org.joda.time.ReadableInstant) dateTime75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-05T00:59:59.999+97:00/1970-01-05T00:59:59.999+97:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTime dateTime27 = mutableInterval23.getStart();
        int int28 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.plusMinutes(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime27.withWeekOfWeekyear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3599 + "'", int28 == 3599);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        int int8 = property6.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property6.setCopy("Weeks");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Weeks\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) (byte) 0, (int) (short) 100, 29446191, (-90), 60, (int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -90 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = minutes3.getFieldType(0);
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.Period period32 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 1645513780018L, periodType30);
        int int34 = periodType30.size();
        org.joda.time.PeriodType periodType35 = periodType30.withWeeksRemoved();
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, periodType11, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) '4', chronology16);
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withFields(readablePartial19);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.withEarlierOffsetAtOverlap();
        int int23 = dateTime20.getDayOfWeek();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology30.getZone();
        org.joda.time.DateTime dateTime34 = dateTime20.withChronology(chronology30);
        org.joda.time.Interval interval35 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period38 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration8, periodType40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', chronology50);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withFields(readablePartial53);
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfDay();
        org.joda.time.DateTime dateTime56 = dateTime54.withEarlierOffsetAtOverlap();
        int int57 = dateTime54.getDayOfWeek();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, periodType59, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology64.getZone();
        org.joda.time.DateTime dateTime68 = dateTime54.withChronology(chronology64);
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType71 = null;
        int int72 = minutes70.get(durationFieldType71);
        int int74 = minutes70.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod75 = minutes70.toMutablePeriod();
        long long78 = chronology64.add((org.joda.time.ReadablePeriod) mutablePeriod75, (long) '#', (int) (short) 10);
        org.joda.time.Period period79 = duration8.toPeriod(periodType42, chronology64);
        org.joda.time.Period period81 = period79.minusMinutes((int) (byte) -1);
        int int82 = period79.getMillis();
        int int83 = period79.getDays();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 6000035L + "'", long78 == 6000035L);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.joda.time.Period period1 = org.joda.time.Period.hours(2022);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        int int5 = minutes1.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes1.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType8 = minutes1.getFieldType(0);
        org.joda.time.Duration duration9 = minutes1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        int int27 = dateTime26.getYearOfEra();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType28);
        org.joda.time.Period period30 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26, periodType28);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        int int34 = minutes32.get(durationFieldType33);
        int int36 = minutes32.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod37 = minutes32.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType39 = minutes32.getFieldType(0);
        org.joda.time.Duration duration40 = minutes32.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone42);
        int int44 = dateTime43.getMillisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMillis((int) '#');
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.DateTime dateTime57 = dateTime46.withChronology(chronology54);
        int int58 = dateTime57.getYearOfEra();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.Period period61 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57, periodType59);
        boolean boolean62 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration63 = duration40.toDuration();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3600010 + "'", int44 == 3600010);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone2);
        int int4 = dateTime3.getMillisOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.plusMillis((int) '#');
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, periodType9, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '4', chronology14);
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology14);
        java.lang.String str18 = chronology14.toString();
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 0, chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.hourOfHalfday();
        java.lang.String str22 = dateTimeField21.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3600010 + "'", int4 == 3600010);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str22, "DateTimeField[hourOfHalfday]");
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(75600010, 0, (-1106), 86399999);
        mutablePeriod4.setSeconds((-19045));
        int int7 = mutablePeriod4.getSeconds();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-19045) + "'", int7 == (-19045));
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getDurationField();
        java.lang.String str12 = dateTimeField9.getAsShortText(6048000002L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsShortText(26, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField9.getAsShortText((int) (short) 100, locale17);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12" + "'", str12, "12");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "26" + "'", str15, "26");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        mutablePeriod6.clear();
        mutablePeriod6.addWeeks((int) '4');
        mutablePeriod6.addHours(349200000);
        mutablePeriod6.setSeconds(56);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period24 = org.joda.time.Period.days((-1));
        org.joda.time.Period period26 = period24.withWeeks((int) 'a');
        java.lang.String str27 = period24.toString();
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) period24);
        int int29 = mutablePeriod22.getMillis();
        org.joda.time.DurationFieldType durationFieldType31 = mutablePeriod22.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        boolean boolean33 = mutablePeriod22.isSupported(durationFieldType32);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod6.addMillis(7200);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.Instant instant41 = instant39.minus(100L);
        org.joda.time.Chronology chronology42 = instant39.getChronology();
        mutablePeriod6.setPeriod((-35976740396880L), 422392320000000000L, chronology42);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P-1D" + "'", str27, "P-1D");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        java.lang.String str17 = dateTimeZone15.getName(100L);
        org.joda.time.DateTime dateTime18 = dateTime9.withZoneRetainFields(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        java.lang.String str26 = dateTimeZone24.getName(100L);
        org.joda.time.DateTime dateTime27 = dateTime18.withZoneRetainFields(dateTimeZone24);
        org.joda.time.Chronology chronology28 = chronology6.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.millisOfDay();
        boolean boolean32 = dateTimeField30.isLeap(56L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField30.getAsText(79, locale34);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        org.joda.time.DurationField durationField46 = dateTimeField45.getLeapDurationField();
        int int49 = dateTimeField45.getDifference(10L, (long) '4');
        org.joda.time.DurationField durationField50 = dateTimeField45.getDurationField();
        long long53 = dateTimeField45.getDifferenceAsLong(1645513811884L, 66269599200000L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone55);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean68 = mutableInterval63.isBefore((org.joda.time.ReadableInterval) mutableInterval67);
        boolean boolean69 = mutableInterval60.contains((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.Weeks weeks70 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.DateTime dateTime71 = dateTime56.plus((org.joda.time.ReadablePeriod) weeks70);
        int int72 = dateTime56.getYearOfEra();
        org.joda.time.DateTime dateTime74 = dateTime56.minusHours((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusMonths(59);
        org.joda.time.LocalTime localTime77 = dateTime74.toLocalTime();
        org.joda.time.Chronology chronology78 = localTime77.getChronology();
        int[] intArray79 = null;
        int int80 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localTime77, intArray79);
        int int81 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime77);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "79" + "'", str35, "79");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-106851L) + "'", long53 == (-106851L));
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime11.minus((long) 5);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period27 = org.joda.time.Period.days((-1));
        org.joda.time.Period period29 = period27.withWeeks((int) 'a');
        java.lang.String str30 = period27.toString();
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) period27);
        mutablePeriod25.addMonths((int) (short) -1);
        org.joda.time.Period period35 = org.joda.time.Period.days((-1));
        org.joda.time.Period period37 = period35.withWeeks((int) 'a');
        org.joda.time.Period period39 = period35.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        boolean boolean41 = period39.isSupported(durationFieldType40);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.DurationField durationField54 = chronology51.centuries();
        mutablePeriod25.add((long) (short) 10, chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField57 = durationFieldType16.getField(chronology51);
        org.joda.time.DateTime dateTime59 = dateTime15.withFieldAdded(durationFieldType16, 365);
        org.joda.time.DateTime dateTime61 = dateTime15.plusWeeks((-4));
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 1, periodType64, chronology69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) '4', chronology69);
        org.joda.time.ReadablePartial readablePartial72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.withFields(readablePartial72);
        org.joda.time.DateTime.Property property74 = dateTime73.millisOfDay();
        org.joda.time.DateTime dateTime75 = dateTime73.withEarlierOffsetAtOverlap();
        int int76 = dateTime73.getDayOfWeek();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 1, periodType78, chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology83.getZone();
        org.joda.time.DateTime dateTime87 = dateTime73.withChronology(chronology83);
        org.joda.time.Minutes minutes89 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType90 = null;
        int int91 = minutes89.get(durationFieldType90);
        int int93 = minutes89.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod94 = minutes89.toMutablePeriod();
        long long97 = chronology83.add((org.joda.time.ReadablePeriod) mutablePeriod94, (long) '#', (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField98 = chronology83.minuteOfDay();
        org.joda.time.DateTime dateTime99 = dateTime15.withChronology(chronology83);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P-1D" + "'", str30, "P-1D");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(minutes89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod94);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 6000035L + "'", long97 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(349200000);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withWeekOfWeekyear(360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType2);
        mutablePeriod3.addMonths(0);
        int int6 = mutablePeriod3.getMillis();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType7, (-1));
        mutablePeriod3.setMonths((-97));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-90) + "'", int6 == (-90));
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        java.util.Locale locale12 = null;
        int int13 = property6.getMaximumShortTextLength(locale12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property29 = dateTime25.era();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        long long34 = duration31.getStandardHours();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) '4', chronology42);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withFields(readablePartial45);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime46.era();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Instant instant52 = dateTime51.toInstant();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant55 = instant52.plus((long) '#');
        org.joda.time.Period period56 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) instant52);
        int int57 = property6.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant59 = instant52.plus(2022L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(instant59);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(60, 0, 27425230, 59, (-10), 50, 301974, 7200);
        mutablePeriod8.setMonths(10);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = dateTime29.toLocalDateTime();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMonths((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime35 = dateTime11.plusWeeks((-90));
        long long36 = dateTime35.getMillis();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-54431999948L) + "'", long36 == (-54431999948L));
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean13 = mutableInterval2.isBefore(0L);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds(3600010);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int27 = dateTime23.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = dateTime23.minusYears((-292275054));
        boolean boolean30 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean31 = mutableInterval2.containsNow();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        boolean boolean12 = minutes0.isLessThan(minutes8);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = minutes14.get(durationFieldType15);
        org.joda.time.Minutes minutes17 = minutes0.minus(minutes14);
        int int18 = minutes17.getMinutes();
        org.joda.time.Minutes minutes20 = minutes17.dividedBy((-9));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertNotNull(minutes20);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        org.joda.time.Period period3 = period0.withMonths((int) (byte) 0);
        org.joda.time.Period period4 = period0.toPeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period4);
        java.lang.String str6 = minutes5.toString();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((int) (short) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withFields(readablePartial26);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withEarlierOffsetAtOverlap();
        int int30 = dateTime27.getDayOfWeek();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime27.withChronology(chronology37);
        org.joda.time.Interval interval42 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period45 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period46 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration15, periodType47);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, periodType52, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) '4', chronology57);
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withFields(readablePartial60);
        org.joda.time.DateTime.Property property62 = dateTime61.millisOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.withEarlierOffsetAtOverlap();
        int int64 = dateTime61.getDayOfWeek();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone74 = chronology71.getZone();
        org.joda.time.DateTime dateTime75 = dateTime61.withChronology(chronology71);
        org.joda.time.Minutes minutes77 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType78 = null;
        int int79 = minutes77.get(durationFieldType78);
        int int81 = minutes77.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod82 = minutes77.toMutablePeriod();
        long long85 = chronology71.add((org.joda.time.ReadablePeriod) mutablePeriod82, (long) '#', (int) (short) 10);
        org.joda.time.Period period86 = duration15.toPeriod(periodType49, chronology71);
        org.joda.time.Period period88 = period86.minusMinutes((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType89 = org.joda.time.DurationFieldType.eras();
        java.lang.String str90 = durationFieldType89.toString();
        int int91 = period86.get(durationFieldType89);
        org.joda.time.Minutes minutes92 = period86.toStandardMinutes();
        boolean boolean93 = minutes5.isGreaterThan(minutes92);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0M" + "'", str6, "PT0M");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 6000035L + "'", long85 == 6000035L);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "eras" + "'", str90, "eras");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(minutes92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds2 = seconds0.plus((int) (short) 10);
        org.joda.time.Seconds seconds3 = seconds2.negated();
        org.joda.time.Seconds seconds4 = seconds2.negated();
        org.joda.time.Seconds seconds6 = seconds2.plus(7);
        org.joda.time.Seconds seconds8 = seconds2.dividedBy(8);
        org.joda.time.PeriodType periodType9 = seconds8.getPeriodType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        org.joda.time.DurationField durationField12 = property6.getRangeDurationField();
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withFields(readablePartial25);
        boolean boolean27 = instant14.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone30);
        int int32 = dateTime31.getDayOfMonth();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, periodType34, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology39.getZone();
        org.joda.time.DateTime dateTime43 = dateTime31.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime24.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone47);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime48.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(0);
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone56);
        int int58 = dateTime57.getSecondOfMinute();
        int int59 = dateTime57.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone61);
        int int63 = dateTime62.getMillisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime62.plusMillis((int) '#');
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 1, periodType68, chronology73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) '4', chronology73);
        org.joda.time.DateTime dateTime76 = dateTime65.withChronology(chronology73);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime57.toMutableDateTime(chronology73);
        org.joda.time.DateTime dateTime78 = dateTime53.toDateTime(chronology73);
        org.joda.time.DateTime dateTime80 = dateTime53.plusYears(21);
        int int81 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property82 = dateTime80.weekOfWeekyear();
        boolean boolean83 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime80);
        int int84 = dateTime13.getYearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3600010 + "'", int59 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3600010 + "'", int63 == 3600010);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 70 + "'", int84 == 70);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        int int8 = dateTime5.getCenturyOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        mutablePeriod1.setPeriod((int) (short) -1, 21, 10, 22, 19, (int) (byte) 0, (-1), (int) (byte) 1);
        mutablePeriod1.setPeriod(6, 0, 29454, 53, 27425230, 59, 26, 11);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.joda.time.Period period1 = org.joda.time.Period.days((-1));
        org.joda.time.Period period3 = period1.plusWeeks((int) (short) -1);
        org.joda.time.Period period5 = period1.minusSeconds(79);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod14.add((long) 3);
        mutablePeriod14.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period29 = org.joda.time.Period.days((-1));
        org.joda.time.Period period31 = period29.withWeeks((int) 'a');
        java.lang.String str32 = period29.toString();
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) period29);
        mutablePeriod27.addMonths((int) (short) -1);
        org.joda.time.Period period37 = org.joda.time.Period.days((-1));
        org.joda.time.Period period39 = period37.withWeeks((int) 'a');
        org.joda.time.Period period41 = period37.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType42 = null;
        boolean boolean43 = period41.isSupported(durationFieldType42);
        mutablePeriod27.add((org.joda.time.ReadablePeriod) period41);
        mutablePeriod27.setWeeks(4);
        mutablePeriod27.setMinutes(4);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        int int50 = mutablePeriod27.getSeconds();
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.minutes(0);
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType55 = null;
        int int56 = minutes54.get(durationFieldType55);
        int int58 = minutes54.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod59 = minutes54.toMutablePeriod();
        boolean boolean60 = minutes52.isLessThan(minutes54);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.THREE;
        boolean boolean62 = minutes52.isGreaterThan(minutes61);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.ONE;
        mutablePeriod71.setPeriod((org.joda.time.ReadablePeriod) minutes72);
        org.joda.time.Minutes minutes74 = minutes61.minus(minutes72);
        mutablePeriod27.add((org.joda.time.ReadablePeriod) minutes74);
        org.joda.time.Period period76 = period5.minus((org.joda.time.ReadablePeriod) minutes74);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = period5.getValue(50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P-1D" + "'", str32, "P-1D");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        int int15 = mutablePeriod8.getMillis();
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod8.toMutablePeriod();
        mutablePeriod8.setMillis((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Interval interval26 = interval22.withEndMillis((long) (short) 100);
        long long27 = interval22.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Period period29 = interval22.toPeriod();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval39);
        long long43 = mutableInterval39.getEndMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean54 = mutableInterval49.isBefore((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean55 = mutableInterval46.contains((org.joda.time.ReadableInterval) mutableInterval53);
        mutableInterval39.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTime dateTime57 = mutableInterval53.getStart();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone59);
        int int61 = dateTime60.getSecondOfMinute();
        int int62 = dateTime60.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone64);
        int int66 = dateTime65.getMillisOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.plusMillis((int) '#');
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 1, periodType71, chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) '4', chronology76);
        org.joda.time.DateTime dateTime79 = dateTime68.withChronology(chronology76);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime60.toMutableDateTime(chronology76);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) mutableInterval53, chronology76);
        mutablePeriod81.setPeriod((-292275054), (int) (byte) 10, (int) ' ', 0, (int) (short) -1, 3600, 21, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType91.getDurationType();
        mutablePeriod81.add(durationFieldType92, 6);
        org.joda.time.Period period95 = period29.withFields((org.joda.time.ReadablePeriod) mutablePeriod81);
        int int96 = period95.getMillis();
        org.joda.time.Period period98 = period95.plusDays(0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 53L + "'", long27 == 53L);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3600010 + "'", int62 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3600010 + "'", int66 == 3600010);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        java.lang.String str11 = dateTimeZone9.getName(100L);
        org.joda.time.DateTime dateTime12 = dateTime3.withZoneRetainFields(dateTimeZone9);
        long long14 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, 6000035L);
        long long16 = dateTimeZone9.nextTransition(0L);
        long long18 = dateTimeZone9.previousTransition((-599612399948L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 6000035L + "'", long14 == 6000035L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-599612399948L) + "'", long18 == (-599612399948L));
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone20);
        int int22 = dateTime21.getSecondOfMinute();
        int int23 = dateTime21.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone25);
        int int27 = dateTime26.getMillisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.plusMillis((int) '#');
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) '4', chronology37);
        org.joda.time.DateTime dateTime40 = dateTime29.withChronology(chronology37);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime21.toMutableDateTime(chronology37);
        int int42 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone44);
        int int46 = dateTime45.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean57 = mutableInterval52.isBefore((org.joda.time.ReadableInterval) mutableInterval56);
        boolean boolean58 = mutableInterval49.contains((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Weeks weeks59 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.DateTime dateTime60 = dateTime45.plus((org.joda.time.ReadablePeriod) weeks59);
        org.joda.time.DateTime dateTime62 = dateTime45.minusDays((int) (byte) 1);
        boolean boolean63 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime64 = dateTime21.toLocalDateTime();
        int int65 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutesBetween(readablePartial0, (org.joda.time.ReadablePartial) localDateTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3600010 + "'", int23 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3600010 + "'", int27 == 3600010);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 349200000 + "'", int42 == 349200000);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property4.addWrapFieldToCopy(60);
        java.util.Locale locale7 = null;
        int int8 = property4.getMaximumTextLength(locale7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod8.addMillis(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-1Y100M10WT1H12.021S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isPrinter();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withParseType(periodType6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter8.getPrinter();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.Days days12 = org.joda.time.Days.ONE;
        int int13 = days12.getDays();
        org.joda.time.MutablePeriod mutablePeriod14 = days12.toMutablePeriod();
        java.lang.String str15 = days12.toString();
        org.joda.time.PeriodType periodType16 = days12.getPeriodType();
        org.joda.time.Days days18 = days12.minus(4);
        org.joda.time.DurationFieldType durationFieldType19 = days12.getFieldType();
        int int20 = periodType10.indexOf(durationFieldType19);
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter8.withParseType(periodType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = org.joda.time.Period.parse("DateTimeField[hourOfHalfday]", periodFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P1D" + "'", str15, "P1D");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(periodFormatter21);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        long long8 = interval7.getStartMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        long long14 = interval12.toDurationMillis();
        org.joda.time.Interval interval16 = interval12.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 10);
        org.joda.time.Interval interval21 = interval16.withEnd((org.joda.time.ReadableInstant) instant17);
        boolean boolean23 = interval16.contains((-10L));
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period34 = org.joda.time.Period.days((-1));
        org.joda.time.Period period36 = period34.withWeeks((int) 'a');
        java.lang.String str37 = period34.toString();
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod32.addMonths((int) (short) -1);
        org.joda.time.Period period42 = org.joda.time.Period.days((-1));
        org.joda.time.Period period44 = period42.withWeeks((int) 'a');
        org.joda.time.Period period46 = period42.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        boolean boolean48 = period46.isSupported(durationFieldType47);
        mutablePeriod32.add((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, periodType53, chronology58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) '4', chronology58);
        org.joda.time.DurationField durationField61 = chronology58.centuries();
        mutablePeriod32.add((long) (short) 10, chronology58);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.clockhourOfDay();
        org.joda.time.Interval interval65 = interval16.withChronology(chronology58);
        boolean boolean66 = interval7.isBefore((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean77 = mutableInterval72.isBefore((org.joda.time.ReadableInterval) mutableInterval76);
        boolean boolean78 = mutableInterval69.contains((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.Weeks weeks79 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval76.copy();
        org.joda.time.Duration duration81 = mutableInterval80.toDuration();
        org.joda.time.Period period82 = duration81.toPeriod();
        org.joda.time.Interval interval83 = interval65.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Period period85 = org.joda.time.Period.days((-1));
        org.joda.time.Period period87 = period85.withWeeks((int) 'a');
        org.joda.time.Period period89 = period87.withDays(100);
        org.joda.time.Period period91 = period87.multipliedBy((int) (short) 1);
        boolean boolean92 = interval83.equals((java.lang.Object) (short) 1);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTime dateTime96 = dateTime94.plusYears(7);
        org.joda.time.DateTime dateTime98 = dateTime94.plusMonths(489);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval99 = interval83.withStart((org.joda.time.ReadableInstant) dateTime98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53L + "'", long14 == 53L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P-1D" + "'", str37, "P-1D");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.DateTime dateTime16 = dateTime5.withChronology(chronology13);
        org.joda.time.DateTime dateTime18 = dateTime5.plusDays(29);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.Duration duration20 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) '4', chronology29);
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withFields(readablePartial32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.withEarlierOffsetAtOverlap();
        int int36 = dateTime33.getDayOfWeek();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, periodType38, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.DateTime dateTime47 = dateTime33.withChronology(chronology43);
        org.joda.time.Interval interval48 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period51 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone54);
        int int56 = dateTime55.getDayOfMonth();
        org.joda.time.DateTime dateTime58 = dateTime55.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime60 = dateTime58.withYear(0);
        org.joda.time.DateTime.Property property61 = dateTime60.era();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone63);
        int int65 = dateTime64.getSecondOfMinute();
        int int66 = dateTime64.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone68);
        int int70 = dateTime69.getMillisOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.plusMillis((int) '#');
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.Chronology chronology80 = interval79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 1, periodType75, chronology80);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) '4', chronology80);
        org.joda.time.DateTime dateTime83 = dateTime72.withChronology(chronology80);
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime64.toMutableDateTime(chronology80);
        org.joda.time.DateTime dateTime85 = dateTime60.toDateTime(chronology80);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Instant instant87 = dateTime85.toInstant();
        org.joda.time.Instant instant89 = instant87.withMillis(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3600010 + "'", int66 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3600010 + "'", int70 == 3600010);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DateTimeField dateTimeField56 = chronology40.minuteOfHour();
        org.joda.time.Chronology chronology57 = chronology40.withUTC();
        org.joda.time.DurationField durationField58 = chronology40.years();
        long long61 = durationField58.add((-604800L), 16);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 504920995200L + "'", long61 == 504920995200L);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period30 = period27.withMonths((int) (byte) 0);
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.DateTime dateTime33 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period31, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = dateTime37.toLocalDateTime();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMonths((int) 'a');
        boolean boolean41 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime37);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime33.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime43 = dateTime33.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDateTime43.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime13.getMillisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekOfWeekyear(4);
        java.util.Date date17 = dateTime16.toDate();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3600052 + "'", int14 == 3600052);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 15 00:00:00 UTC 1970");
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = property4.addWrapFieldToCopy((-1));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        int int18 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime2.minusHours((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((int) '4');
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withFields(readablePartial33);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property41 = dateTime20.millisOfSecond();
        long long42 = property41.remainder();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days0.toMutablePeriod();
        mutablePeriod2.addWeeks((int) '4');
        mutablePeriod2.addDays((int) (byte) 0);
        mutablePeriod2.setYears(27425229);
        mutablePeriod2.addYears((int) 'a');
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = interval19.toMutableInterval();
        org.joda.time.Interval interval23 = interval19.withEndMillis(53L);
        org.joda.time.Chronology chronology24 = interval19.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime15.withMinuteOfHour(19);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, periodType30, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '4', chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withFields(readablePartial38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        org.joda.time.DateTime dateTime41 = dateTime39.withEarlierOffsetAtOverlap();
        int int42 = dateTime39.getDayOfWeek();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology49.getZone();
        org.joda.time.DateTime dateTime53 = dateTime39.withChronology(chronology49);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        int int57 = minutes55.get(durationFieldType56);
        int int59 = minutes55.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod60 = minutes55.toMutablePeriod();
        long long63 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) '#', (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField64 = chronology49.minuteOfDay();
        long long66 = dateTimeField64.roundFloor((long) 3);
        int int67 = dateTime27.get(dateTimeField64);
        int int68 = dateTime27.getDayOfMonth();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 6000035L + "'", long63 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 79 + "'", int67 == 79);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone6);
        int int8 = dateTime7.getSecondOfMinute();
        int int9 = dateTime7.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime7.toMutableDateTime(chronology23);
        int int28 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property29 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime31 = property29.addWrapFieldToCopy(429);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        long long35 = dateTimeField32.add(0L, (long) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3600010 + "'", int9 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3155760000000L + "'", long35 == 3155760000000L);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, dateTimeZone4);
        boolean boolean7 = dateTimeZone4.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long15 = dateTimeZone11.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (short) -1, periodType29);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period42 = org.joda.time.Period.days((-1));
        org.joda.time.Period period44 = period42.withWeeks((int) 'a');
        java.lang.String str45 = period42.toString();
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) period42);
        int int47 = mutablePeriod40.getMillis();
        org.joda.time.DurationFieldType durationFieldType49 = mutablePeriod40.getFieldType(0);
        int int50 = periodType29.indexOf(durationFieldType49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime20, (org.joda.time.ReadablePartial) localDateTime27, periodType29);
        boolean boolean52 = dateTimeZone11.isLocalDateTimeGap(localDateTime27);
        java.lang.String str54 = dateTimeZone11.getShortName((long) 2);
        java.lang.String str56 = dateTimeZone11.getShortName(6216719587200001L);
        long long58 = dateTimeZone4.getMillisKeepLocal(dateTimeZone11, 1672531200000L);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-62135596800000L), (-1L), dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 6000035L + "'", long15 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "YearMonthDayTime" + "'", str30, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P-1D" + "'", str45, "P-1D");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+97:00" + "'", str54, "+97:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+97:00" + "'", str56, "+97:00");
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1672531200000L + "'", long58 == 1672531200000L);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = interval5.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        boolean boolean12 = interval5.contains((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period13 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMinimumValue();
        org.joda.time.DateTime dateTime16 = property14.withMaximumValue();
        int int17 = property14.getMinimumValueOverall();
        int int18 = property14.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfHour();
        int int15 = dateTimeField13.getMaximumValue((-3166581600000L));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period14 = org.joda.time.Period.days((-1));
        org.joda.time.Period period16 = period14.withWeeks((int) 'a');
        java.lang.String str17 = period14.toString();
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) period14);
        int int19 = mutablePeriod12.getMillis();
        org.joda.time.DurationFieldType durationFieldType21 = mutablePeriod12.getFieldType(0);
        int int22 = periodType1.indexOf(durationFieldType21);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        java.lang.String str36 = period33.toString();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period33);
        mutablePeriod31.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime53.withEarlierOffsetAtOverlap();
        int int56 = dateTime53.getDayOfWeek();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, periodType58, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology63.getZone();
        org.joda.time.DateTime dateTime67 = dateTime53.withChronology(chronology63);
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType70 = null;
        int int71 = minutes69.get(durationFieldType70);
        int int73 = minutes69.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod74 = minutes69.toMutablePeriod();
        long long77 = chronology63.add((org.joda.time.ReadablePeriod) mutablePeriod74, (long) '#', (int) (short) 10);
        mutablePeriod31.setPeriod((long) (short) 100, (long) 2, chronology63);
        org.joda.time.DurationField durationField79 = chronology63.halfdays();
        org.joda.time.DurationField durationField80 = durationFieldType21.getField(chronology63);
        long long83 = durationField80.subtract(3600052L, 19);
        int int86 = durationField80.getDifference((long) (byte) -1, 113605062480001000L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YearMonthDayTime" + "'", str2, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P-1D" + "'", str17, "P-1D");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P-1D" + "'", str36, "P-1D");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 6000035L + "'", long77 == 6000035L);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-599612399948L) + "'", long83 == (-599612399948L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3600001) + "'", int86 == (-3600001));
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-05T00:00:00.000+97:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-05T00:00:00.000+97:00\" is malformed at \"+97:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = interval19.toMutableInterval();
        org.joda.time.Interval interval23 = interval19.withEndMillis(53L);
        org.joda.time.Chronology chronology24 = interval19.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime15.withMinuteOfHour(19);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period38 = org.joda.time.Period.days((-1));
        org.joda.time.Period period40 = period38.withWeeks((int) 'a');
        java.lang.String str41 = period38.toString();
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period38);
        mutablePeriod36.addMonths((int) (short) -1);
        org.joda.time.Period period46 = org.joda.time.Period.days((-1));
        org.joda.time.Period period48 = period46.withWeeks((int) 'a');
        org.joda.time.Period period50 = period46.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        boolean boolean52 = period50.isSupported(durationFieldType51);
        mutablePeriod36.add((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, periodType57, chronology62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) '4', chronology62);
        org.joda.time.DurationField durationField65 = chronology62.centuries();
        mutablePeriod36.add((long) (short) 10, chronology62);
        org.joda.time.DateTime dateTime67 = dateTime27.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTime.Property property68 = dateTime27.minuteOfHour();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P-1D" + "'", str41, "P-1D");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime48.withDate((-4867796), 349200000, 360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 349200000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        int int31 = minutes27.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod32 = minutes27.toMutablePeriod();
        long long35 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) '#', (int) (short) 10);
        int int36 = mutablePeriod32.getMinutes();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6000035L + "'", long35 == 6000035L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("Hours");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Hours\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        int int1 = days0.getDays();
        org.joda.time.PeriodType periodType2 = days0.getPeriodType();
        java.lang.String str3 = periodType2.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Days]" + "'", str3, "PeriodType[Days]");
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        org.joda.time.DurationField durationField12 = chronology10.hours();
        org.joda.time.DurationField durationField13 = chronology10.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = durationField13.getDifference((-3155695200000L), (-14400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -3155680800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(66269599200000L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Hours hours4 = hours2.plus((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod5 = hours2.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = mutablePeriod5.getFieldType(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1439");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean13 = mutableInterval2.isBefore(0L);
        mutableInterval2.setDurationBeforeEnd(6000035L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        long long21 = interval19.toDurationMillis();
        org.joda.time.Interval interval23 = interval19.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant27 = instant24.withDurationAdded(readableDuration25, 10);
        org.joda.time.Interval interval28 = interval23.withEnd((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) '4', chronology37);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withFields(readablePartial40);
        boolean boolean42 = instant29.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withFields(readablePartial54);
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime55.withEarlierOffsetAtOverlap();
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.DateTime dateTime69 = dateTime55.withChronology(chronology65);
        org.joda.time.Interval interval70 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant72 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration43, 21);
        org.joda.time.Duration duration73 = duration43.toDuration();
        org.joda.time.Instant instant74 = instant24.minus((org.joda.time.ReadableDuration) duration43);
        boolean boolean75 = mutableInterval2.contains((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Instant instant78 = instant24.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = duration77.getStandardMinutes();
        org.joda.time.Duration duration80 = duration77.toDuration();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 53L + "'", long21 == 53L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1320L + "'", long79 == 1320L);
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period60 = org.joda.time.Period.days((-1));
        org.joda.time.Period period62 = period60.withWeeks((int) 'a');
        java.lang.String str63 = period60.toString();
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) period60);
        mutablePeriod58.addMonths((int) (short) -1);
        org.joda.time.Period period68 = org.joda.time.Period.days((-1));
        org.joda.time.Period period70 = period68.withWeeks((int) 'a');
        org.joda.time.Period period72 = period68.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = period72.isSupported(durationFieldType73);
        mutablePeriod58.add((org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 1, periodType79, chronology84);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) '4', chronology84);
        org.joda.time.DurationField durationField87 = chronology84.centuries();
        mutablePeriod58.add((long) (short) 10, chronology84);
        org.joda.time.DateTimeField dateTimeField89 = chronology84.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.clockhourOfDay();
        org.joda.time.DateTime dateTime91 = dateTime48.toDateTime(chronology84);
        org.joda.time.DateTimeField dateTimeField92 = chronology84.hourOfHalfday();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P-1D" + "'", str63, "P-1D");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 100);
        org.joda.time.Period period3 = period1.minusMonths((-9));
        org.joda.time.Period period5 = period3.plusMinutes(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks6 = period3.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, periodType4, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withFields(readablePartial12);
        boolean boolean14 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withFields(readablePartial26);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withEarlierOffsetAtOverlap();
        int int30 = dateTime27.getDayOfWeek();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, periodType32, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime27.withChronology(chronology37);
        org.joda.time.Interval interval42 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant44 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration15, 21);
        org.joda.time.Duration duration45 = duration15.toDuration();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, periodType47, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology52.getZone();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.Period period57 = duration45.toPeriod(chronology52);
        boolean boolean58 = dateTimeFieldType0.isSupported(chronology52);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(4867774815L);
        long long63 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) (short) -1, 9);
        org.joda.time.DurationField durationField64 = chronology52.hours();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology52.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 43809973334L + "'", long63 == 43809973334L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean15 = mutableInterval10.isBefore((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean16 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.DateTime dateTime18 = dateTime3.plus((org.joda.time.ReadablePeriod) weeks17);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.Chronology chronology30 = chronology25.withUTC();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology25);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, chronology25);
        org.joda.time.Period period33 = period32.toPeriod();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 10);
        org.joda.time.Interval interval12 = interval7.withEnd((org.joda.time.ReadableInstant) instant8);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, periodType15, chronology20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) '4', chronology20);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withFields(readablePartial23);
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime24.era();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 0);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableDuration) duration30);
        mutablePeriod33.setSeconds(56);
        org.joda.time.Duration duration36 = org.joda.time.Duration.ZERO;
        java.lang.String str37 = duration36.toString();
        org.joda.time.Duration duration38 = org.joda.time.Duration.ZERO;
        boolean boolean39 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration40 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withFields(readablePartial51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime52.withEarlierOffsetAtOverlap();
        int int55 = dateTime52.getDayOfWeek();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, periodType57, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        org.joda.time.DateTime dateTime66 = dateTime52.withChronology(chronology62);
        org.joda.time.Interval interval67 = duration40.toIntervalTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period70 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        long long71 = duration40.getMillis();
        boolean boolean72 = duration36.isEqual((org.joda.time.ReadableDuration) duration40);
        long long73 = duration36.getStandardMinutes();
        org.joda.time.Duration duration75 = duration36.minus((long) 3600010);
        org.joda.time.Hours hours76 = duration36.toStandardHours();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 1, periodType79, chronology84);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) '4', chronology84);
        org.joda.time.ReadablePartial readablePartial87 = null;
        org.joda.time.DateTime dateTime88 = dateTime86.withFields(readablePartial87);
        org.joda.time.DateTime.Property property89 = dateTime88.millisOfDay();
        org.joda.time.DateTime dateTime91 = dateTime88.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property92 = dateTime88.era();
        org.joda.time.Duration duration94 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime96 = dateTime88.withDurationAdded((org.joda.time.ReadableDuration) duration94, 0);
        long long97 = duration94.getStandardHours();
        boolean boolean98 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration94);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(hours76);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        mutablePeriod7.addHours(100);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        mutablePeriod7.add((long) 3, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean34 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval33);
        long long37 = mutableInterval33.getEndMillis();
        org.joda.time.DateTime dateTime38 = mutableInterval33.getEnd();
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        int int40 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.Instant instant51 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1, periodType54, chronology59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) '4', chronology59);
        org.joda.time.ReadablePartial readablePartial62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.withFields(readablePartial62);
        boolean boolean64 = instant51.isAfter((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean65 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime61);
        java.lang.String str66 = dateTime50.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getRangeDurationType();
        int int69 = dateTime50.get(dateTimeFieldType67);
        org.joda.time.DateTime dateTime70 = dateTime50.toDateTime();
        org.joda.time.DateTime dateTime72 = dateTime70.withMillis((-349199948L));
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone74);
        int int76 = dateTime75.getDayOfMonth();
        boolean boolean78 = dateTime75.isEqual(164096150400000L);
        boolean boolean79 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Hours hours80 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours81 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours82 = hours80.minus(hours81);
        org.joda.time.Duration duration83 = hours81.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone85);
        int int87 = dateTime86.getMillisOfDay();
        org.joda.time.Period period88 = duration83.toPeriodFrom((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Duration duration89 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration90 = duration89.toDuration();
        org.joda.time.Duration duration91 = org.joda.time.Duration.ZERO;
        java.lang.String str92 = duration91.toString();
        boolean boolean93 = duration89.isLongerThan((org.joda.time.ReadableDuration) duration91);
        boolean boolean94 = duration83.isShorterThan((org.joda.time.ReadableDuration) duration91);
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration91);
        org.joda.time.LocalTime localTime96 = dateTime75.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes97 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localTime96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-292275054) + "'", int40 == (-292275054));
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str66, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(hours80);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertNotNull(hours82);
        org.junit.Assert.assertNotNull(duration83);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3600010 + "'", int87 == 3600010);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PT0S" + "'", str92, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localTime96);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, periodType13, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology18);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withFields(readablePartial21);
        boolean boolean23 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime9.toDateTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, periodType28, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) '4', chronology33);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withFields(readablePartial36);
        org.joda.time.DateTime.Property property38 = dateTime37.millisOfDay();
        org.joda.time.DateTime dateTime39 = dateTime37.withEarlierOffsetAtOverlap();
        int int40 = dateTime37.getDayOfWeek();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, periodType42, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology47.getZone();
        org.joda.time.DateTime dateTime51 = dateTime37.withChronology(chronology47);
        int int52 = dateTime51.getDayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime51.plusHours(3599);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMonths(1970);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime56.getDayOfMonth();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long17 = dateTimeZone13.convertLocalToUTC(355200035L, false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = dateTime28.toLocalDateTime();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str32 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period44 = org.joda.time.Period.days((-1));
        org.joda.time.Period period46 = period44.withWeeks((int) 'a');
        java.lang.String str47 = period44.toString();
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) period44);
        int int49 = mutablePeriod42.getMillis();
        org.joda.time.DurationFieldType durationFieldType51 = mutablePeriod42.getFieldType(0);
        int int52 = periodType31.indexOf(durationFieldType51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime22, (org.joda.time.ReadablePartial) localDateTime29, periodType31);
        boolean boolean54 = dateTimeZone13.isLocalDateTimeGap(localDateTime29);
        long long56 = chronology8.set((org.joda.time.ReadablePartial) localDateTime29, 53L);
        org.joda.time.DateTimeField dateTimeField57 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(352800010L, chronology8);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6000035L + "'", long17 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "YearMonthDayTime" + "'", str32, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "P-1D" + "'", str47, "P-1D");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645513882399L + "'", long56 == 1645513882399L);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-7377898L), (-349199948L), chronology8);
        int int13 = mutablePeriod12.size();
        int int14 = mutablePeriod12.getYears();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Days days17 = org.joda.time.Days.ONE;
        int int18 = days17.getDays();
        org.joda.time.MutablePeriod mutablePeriod19 = days17.toMutablePeriod();
        java.lang.String str20 = days17.toString();
        org.joda.time.PeriodType periodType21 = days17.getPeriodType();
        org.joda.time.Days days23 = days17.minus(4);
        org.joda.time.DurationFieldType durationFieldType24 = days17.getFieldType();
        int int25 = periodType15.indexOf(durationFieldType24);
        boolean boolean26 = mutablePeriod12.isSupported(durationFieldType24);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P1D" + "'", str20, "P1D");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType4);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.Period period12 = new org.joda.time.Period(10L, periodType4, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period25 = org.joda.time.Period.days((-1));
        org.joda.time.Period period27 = period25.withWeeks((int) 'a');
        java.lang.String str28 = period25.toString();
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) period25);
        mutablePeriod23.addMonths((int) (short) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        org.joda.time.Period period37 = period33.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = period37.isSupported(durationFieldType38);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.DurationField durationField52 = chronology49.centuries();
        mutablePeriod23.add((long) (short) 10, chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.clockhourOfDay();
        long long56 = dateTimeField54.roundHalfCeiling((long) 4);
        long long59 = dateTimeField54.addWrapField((long) (-1), 52);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTime();
        org.joda.time.LocalDate localDate64 = dateTime62.toLocalDate();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology70.getZone();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 1, dateTimeZone71);
        org.joda.time.DateTime dateTime73 = localDate64.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) localDate64);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDate64, locale75);
        org.joda.time.Chronology chronology77 = localDate64.getChronology();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P-1D" + "'", str28, "P-1D");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 14399999L + "'", long59 == 14399999L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970" + "'", str76, "1970");
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days2 = days0.minus((int) '4');
        org.joda.time.Days days4 = days0.multipliedBy(100);
        org.joda.time.Days days5 = org.joda.time.Days.TWO;
        org.joda.time.Days days6 = org.joda.time.Days.ONE;
        int int7 = days6.getDays();
        int int8 = days6.size();
        org.joda.time.Days days10 = days6.dividedBy((int) (short) -1);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        boolean boolean12 = days10.isLessThan(days11);
        boolean boolean13 = days5.isLessThan(days10);
        org.joda.time.Days days15 = days5.multipliedBy(2);
        int int16 = days15.size();
        boolean boolean17 = days0.isLessThan(days15);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        boolean boolean31 = instant18.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property32 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, periodType37, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) '4', chronology42);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withFields(readablePartial45);
        boolean boolean47 = instant34.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone50);
        int int52 = dateTime51.getDayOfMonth();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1, periodType54, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology59.getZone();
        org.joda.time.DateTime dateTime63 = dateTime51.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime44.withZone(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime(dateTimeZone65);
        org.joda.time.Days days67 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime66.getYearOfEra();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, dateTimeZone71);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime66.toMutableDateTime(dateTimeZone71);
        org.joda.time.Instant instant74 = org.joda.time.Instant.now();
        org.joda.time.Instant instant76 = instant74.minus(100L);
        org.joda.time.Chronology chronology77 = instant74.getChronology();
        boolean boolean78 = dateTimeZone71.equals((java.lang.Object) chronology77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) days15, dateTimeZone71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Days");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        int int13 = dateTimeField9.getDifference(10L, (long) '4');
        org.joda.time.DurationField durationField14 = dateTimeField9.getDurationField();
        java.util.Locale locale15 = null;
        int int16 = dateTimeField9.getMaximumShortTextLength(locale15);
        long long19 = dateTimeField9.set(56L, 8);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3628800056L + "'", long19 == 3628800056L);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = dateTimeField26.getRangeDurationField();
        java.lang.String str29 = dateTimeField26.getAsText((long) '#');
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField26.getAsText((-1), locale31);
        int int34 = dateTimeField26.getMinimumValue(315569520000001L);
        boolean boolean35 = dateTimeField26.isSupported();
        boolean boolean36 = dateTimeField26.isLenient();
        boolean boolean37 = dateTimeField26.isSupported();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2" + "'", str29, "2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        boolean boolean7 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType8 = periodFormatter2.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = periodFormatter2.parsePeriod("PT-164096157777.898S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(periodType8);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days2 = days0.minus((int) '4');
        org.joda.time.Days days4 = days0.multipliedBy(100);
        org.joda.time.Days days5 = null;
        boolean boolean6 = days0.isGreaterThan(days5);
        int int7 = days0.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("DayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DayTime\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours1 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours2 = hours0.minus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) hours0);
        org.joda.time.Hours hours5 = hours0.dividedBy(12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period16 = org.joda.time.Period.days((-1));
        org.joda.time.Period period18 = period16.withWeeks((int) 'a');
        java.lang.String str19 = period16.toString();
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) period16);
        mutablePeriod14.addMonths((int) (short) -1);
        org.joda.time.Period period24 = org.joda.time.Period.days((-1));
        org.joda.time.Period period26 = period24.withWeeks((int) 'a');
        org.joda.time.Period period28 = period24.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = period28.isSupported(durationFieldType29);
        mutablePeriod14.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.DurationField durationField43 = chronology40.centuries();
        mutablePeriod14.add((long) (short) 10, chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfDay();
        boolean boolean46 = dateTimeField45.isSupported();
        boolean boolean47 = hours0.equals((java.lang.Object) dateTimeField45);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P-1D" + "'", str19, "P-1D");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(86399999);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone10);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean14 = dateTime11.isEqual(164096150400000L);
        org.joda.time.DateTime dateTime16 = dateTime11.plusWeeks(10);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime11.toGregorianCalendar();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.withMinuteOfHour((int) '#');
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) (-349306851L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        java.lang.Object obj1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(obj1, periodType3);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 100, periodType3);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        int int9 = minutes7.get(durationFieldType8);
        int int11 = minutes7.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod12 = minutes7.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType14 = minutes7.getFieldType(0);
        org.joda.time.Duration duration15 = minutes7.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone17);
        int int19 = dateTime18.getMillisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMillis((int) '#');
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) '4', chronology29);
        org.joda.time.DateTime dateTime32 = dateTime21.withChronology(chronology29);
        int int33 = dateTime32.getYearOfEra();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(periodType34);
        org.joda.time.Period period36 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32, periodType34);
        org.joda.time.Period period37 = period5.normalizedStandard(periodType34);
        int int38 = period37.size();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3600010 + "'", int19 == 3600010);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        boolean boolean32 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period34 = org.joda.time.Period.days((-1));
        org.joda.time.Period period36 = period34.withWeeks((int) 'a');
        org.joda.time.Period period38 = period34.plusMonths((int) (short) -1);
        org.joda.time.Period period40 = period34.plusDays((int) ' ');
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withFields(readablePartial51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime52.withEarlierOffsetAtOverlap();
        int int55 = dateTime52.getDayOfWeek();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, periodType57, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        org.joda.time.DateTime dateTime66 = dateTime52.withChronology(chronology62);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType69 = null;
        int int70 = minutes68.get(durationFieldType69);
        int int72 = minutes68.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod73 = minutes68.toMutablePeriod();
        long long76 = chronology62.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) '#', (int) (short) 10);
        org.joda.time.Period period77 = mutablePeriod73.toPeriod();
        boolean boolean78 = period34.equals((java.lang.Object) period77);
        org.joda.time.Period period79 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType80 = period79.getPeriodType();
        org.joda.time.PeriodType periodType81 = periodType80.withHoursRemoved();
        org.joda.time.PeriodType periodType82 = periodType81.withHoursRemoved();
        org.joda.time.Period period83 = period77.withPeriodType(periodType82);
        org.joda.time.Period period84 = new org.joda.time.Period((java.lang.Object) interval3, periodType82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Interval interval86 = interval3.withPeriodAfterStart(readablePeriod85);
        long long87 = interval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6000035L + "'", long76 == 6000035L);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 53L + "'", long87 == 53L);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) instant10);
        int int13 = property8.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.MutableDateTime mutableDateTime14 = instant10.toMutableDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        boolean boolean54 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period56 = org.joda.time.Period.days((-1));
        org.joda.time.Period period58 = period56.withWeeks((int) 'a');
        org.joda.time.Period period60 = period56.plusMonths((int) (short) -1);
        org.joda.time.Period period62 = period56.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        org.joda.time.DateTime.Property property76 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks81 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType86);
        mutablePeriod87.addMonths(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray90 = mutablePeriod87.getFieldTypes();
        org.joda.time.DateTime dateTime91 = dateTime75.plus((org.joda.time.ReadablePeriod) mutablePeriod87);
        mutablePeriod87.setYears((-4867796));
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(durationFieldTypeArray90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType9);
        org.joda.time.PeriodType periodType12 = periodType9.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime7, periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "YearMonthDayTime" + "'", str10, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime10 = property6.getDateTime();
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        int int13 = property6.get();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval9.copy();
        org.joda.time.Duration duration14 = mutableInterval13.toDuration();
        org.joda.time.Period period15 = duration14.toPeriod();
        int int16 = period15.getMinutes();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period60 = org.joda.time.Period.days((-1));
        org.joda.time.Period period62 = period60.withWeeks((int) 'a');
        java.lang.String str63 = period60.toString();
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) period60);
        mutablePeriod58.addMonths((int) (short) -1);
        org.joda.time.Period period68 = org.joda.time.Period.days((-1));
        org.joda.time.Period period70 = period68.withWeeks((int) 'a');
        org.joda.time.Period period72 = period68.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = period72.isSupported(durationFieldType73);
        mutablePeriod58.add((org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 1, periodType79, chronology84);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) '4', chronology84);
        org.joda.time.DurationField durationField87 = chronology84.centuries();
        mutablePeriod58.add((long) (short) 10, chronology84);
        org.joda.time.DateTimeField dateTimeField89 = chronology84.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.clockhourOfDay();
        org.joda.time.DateTime dateTime91 = dateTime48.toDateTime(chronology84);
        org.joda.time.DateTime dateTime93 = dateTime48.withSecondOfMinute((int) '#');
        int int94 = dateTime93.getSecondOfDay();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P-1D" + "'", str63, "P-1D");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3635 + "'", int94 == 3635);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.era();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone28);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear(0);
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone37);
        int int39 = dateTime38.getSecondOfMinute();
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone42);
        int int44 = dateTime43.getMillisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMillis((int) '#');
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.DateTime dateTime57 = dateTime46.withChronology(chronology54);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime38.toMutableDateTime(chronology54);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime34.plusYears(21);
        org.joda.time.LocalDate localDate62 = dateTime61.toLocalDate();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 1, periodType65, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) '4', chronology70);
        org.joda.time.Instant instant73 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.Chronology chronology81 = interval80.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 1, periodType76, chronology81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) '4', chronology81);
        org.joda.time.ReadablePartial readablePartial84 = null;
        org.joda.time.DateTime dateTime85 = dateTime83.withFields(readablePartial84);
        boolean boolean86 = instant73.isAfter((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean87 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime83);
        java.lang.String str88 = dateTime72.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType89.getRangeDurationType();
        int int91 = dateTime72.get(dateTimeFieldType89);
        org.joda.time.DateTime dateTime92 = dateTime72.toDateTime();
        boolean boolean93 = localDate62.equals((java.lang.Object) dateTime92);
        int int94 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDate62);
        java.lang.String str96 = dateTimeField26.getAsShortText(0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3600010 + "'", int40 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3600010 + "'", int44 == 3600010);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str88, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(durationFieldType90);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "AD" + "'", str96, "AD");
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.joda.time.Days days1 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Minutes minutes2 = days1.toStandardMinutes();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        long long14 = interval12.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval12);
        org.joda.time.ReadableInterval readableInterval16 = null;
        mutablePeriod8.add(readableInterval16);
        java.lang.Object obj20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(obj20, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType22.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(3155695200000L, periodType25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.MutableInterval mutableInterval32 = interval30.toMutableInterval();
        org.joda.time.Interval interval34 = interval30.withEndMillis(53L);
        org.joda.time.Chronology chronology35 = interval30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 2, periodType25, chronology35);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) mutablePeriod8, periodType25);
        org.joda.time.Period period39 = period37.plusMonths(3600);
        org.joda.time.format.PeriodPrinter periodPrinter40 = null;
        org.joda.time.format.PeriodParser periodParser41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter(periodPrinter40, periodParser41);
        java.util.Locale locale43 = periodFormatter42.getLocale();
        boolean boolean44 = periodFormatter42.isPrinter();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter42.withParseType(periodType45);
        org.joda.time.format.PeriodPrinter periodPrinter48 = periodFormatter47.getPrinter();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.Days days51 = org.joda.time.Days.ONE;
        int int52 = days51.getDays();
        org.joda.time.MutablePeriod mutablePeriod53 = days51.toMutablePeriod();
        java.lang.String str54 = days51.toString();
        org.joda.time.PeriodType periodType55 = days51.getPeriodType();
        org.joda.time.Days days57 = days51.minus(4);
        org.joda.time.DurationFieldType durationFieldType58 = days51.getFieldType();
        int int59 = periodType49.indexOf(durationFieldType58);
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter47.withParseType(periodType49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = period39.toString(periodFormatter60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53L + "'", long14 == 53L);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNull(periodPrinter48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P1D" + "'", str54, "P1D");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(periodFormatter60);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(2022);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone3);
        int int5 = dateTime4.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTime dateTime19 = dateTime4.plus((org.joda.time.ReadablePeriod) weeks18);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean30 = mutableInterval25.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        boolean boolean31 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Weeks weeks33 = weeks32.negated();
        org.joda.time.Weeks weeks35 = weeks33.plus((int) (byte) -1);
        org.joda.time.Weeks weeks37 = weeks33.minus(22);
        org.joda.time.Weeks weeks39 = weeks37.minus((int) '#');
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, periodType43, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) '4', chronology48);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withFields(readablePartial51);
        boolean boolean53 = instant40.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period55 = org.joda.time.Period.days((-1));
        org.joda.time.Period period57 = period55.withWeeks((int) 'a');
        org.joda.time.Period period59 = period55.plusMonths((int) (short) -1);
        org.joda.time.Period period61 = period55.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime62 = dateTime50.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 1, periodType65, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) '4', chronology70);
        org.joda.time.ReadablePartial readablePartial73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.withFields(readablePartial73);
        org.joda.time.DateTime.Property property75 = dateTime74.millisOfDay();
        org.joda.time.DateTime dateTime77 = dateTime74.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime79 = dateTime74.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks80 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime74);
        boolean boolean81 = weeks39.isLessThan(weeks80);
        org.joda.time.Weeks weeks82 = weeks18.minus(weeks39);
        org.joda.time.Weeks weeks83 = weeks1.plus(weeks18);
        org.joda.time.Weeks weeks85 = weeks1.multipliedBy(16);
        java.lang.String str86 = weeks1.toString();
        org.junit.Assert.assertNotNull(weeks1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks83);
        org.junit.Assert.assertNotNull(weeks85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "P2022W" + "'", str86, "P2022W");
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.joda.time.Period period1 = org.joda.time.Period.months(879606);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.Hours hours17 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours18 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours19 = hours17.minus(hours18);
        org.joda.time.Duration duration20 = hours18.toStandardDuration();
        org.joda.time.DateTime dateTime21 = dateTime11.plus((org.joda.time.ReadableDuration) duration20);
        int int22 = dateTime21.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime21.dayOfYear();
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) '4', chronology32);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withFields(readablePartial35);
        boolean boolean37 = instant24.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutableInterval mutableInterval45 = interval43.toMutableInterval();
        org.joda.time.Interval interval47 = interval43.withEndMillis(53L);
        org.joda.time.Chronology chronology48 = interval43.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime39.withYearOfEra(26);
        boolean boolean52 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7200 + "'", int22 == 7200);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-19045), (int) (short) 100, (int) '4', 29422512, (-1965));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29422512 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(349200000);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean14 = mutableInterval9.isBefore((long) 3);
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        java.lang.String str16 = chronology15.toString();
        java.lang.String str17 = chronology15.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(950, 70, 3599, 490, 959, 24, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 490 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+97:00]" + "'", str16, "ISOChronology[+97:00]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.joda.time.Hours hours1 = org.joda.time.Hours.FIVE;
        org.joda.time.PeriodType periodType2 = hours1.getPeriodType();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 'a', periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withDaysRemoved();
        org.joda.time.Hours hours5 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours6 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours7 = hours5.minus(hours6);
        int int8 = hours6.getHours();
        org.joda.time.DurationFieldType durationFieldType9 = hours6.getFieldType();
        boolean boolean10 = periodType2.isSupported(durationFieldType9);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        int int8 = days7.getDays();
        org.joda.time.MutablePeriod mutablePeriod9 = days7.toMutablePeriod();
        org.joda.time.PeriodType periodType10 = mutablePeriod9.getPeriodType();
        mutablePeriod9.addWeeks(53);
        mutablePeriod9.setMinutes(366);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod9, "Hours", 950);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime12 = dateTime9.plusHours(349200000);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period25 = org.joda.time.Period.days((-1));
        org.joda.time.Period period27 = period25.withWeeks((int) 'a');
        java.lang.String str28 = period25.toString();
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) period25);
        mutablePeriod23.addMonths((int) (short) -1);
        org.joda.time.Period period33 = org.joda.time.Period.days((-1));
        org.joda.time.Period period35 = period33.withWeeks((int) 'a');
        org.joda.time.Period period37 = period33.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = period37.isSupported(durationFieldType38);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.DurationField durationField52 = chronology49.centuries();
        mutablePeriod23.add((long) (short) 10, chronology49);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period64 = org.joda.time.Period.days((-1));
        org.joda.time.Period period66 = period64.withWeeks((int) 'a');
        java.lang.String str67 = period64.toString();
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) period64);
        mutablePeriod62.addMonths((int) (short) -1);
        org.joda.time.Period period72 = org.joda.time.Period.days((-1));
        org.joda.time.Period period74 = period72.withWeeks((int) 'a');
        org.joda.time.Period period76 = period72.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType77 = null;
        boolean boolean78 = period76.isSupported(durationFieldType77);
        mutablePeriod62.add((org.joda.time.ReadablePeriod) period76);
        java.lang.String str80 = period76.toString();
        int[] intArray83 = chronology49.get((org.joda.time.ReadablePeriod) period76, (long) 59, 1L);
        org.joda.time.DurationField durationField84 = chronology49.minutes();
        org.joda.time.DateTime dateTime85 = dateTime12.toDateTime(chronology49);
        boolean boolean86 = interval3.contains((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone88);
        org.joda.time.DateTime dateTime90 = dateTime89.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property91 = dateTime90.minuteOfDay();
        org.joda.time.DateTime dateTime93 = dateTime90.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime95 = dateTime93.minusWeeks(429);
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime95.toMutableDateTimeISO();
        boolean boolean97 = dateTime85.isBefore((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P-1D" + "'", str28, "P-1D");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "P-1D" + "'", str67, "P-1D");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "P-1M-1D" + "'", str80, "P-1M-1D");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, -58]");
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getName(100L);
        org.joda.time.DateTime dateTime9 = dateTime0.withZoneRetainFields(dateTimeZone6);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        long long18 = interval16.toDurationMillis();
        org.joda.time.Interval interval20 = interval16.withEndMillis((long) (short) 100);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.yearOfCentury();
        org.joda.time.Interval interval32 = interval16.withChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime9, periodType12, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 491 + "'", int10 == 491);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 53L + "'", long18 == 53L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = period0.getPeriodType();
        org.joda.time.Period period3 = period0.withMonths((int) (byte) 0);
        org.joda.time.Period period4 = period0.toPeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period4);
        java.lang.String str6 = minutes5.toString();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) str6, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0M\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0M" + "'", str6, "PT0M");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.joda.time.Period period4 = new org.joda.time.Period(56, 1500, 0, 41858);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        boolean boolean13 = minutes7.isGreaterThan(minutes9);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) minutes9, (org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.Chronology chronology17 = instant14.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        org.joda.time.DurationField durationField20 = chronology17.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(1500, 0, (-2), 12, 1935, 366, (int) (short) 0, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1935 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period29 = mutableInterval9.toPeriod(periodType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(periodType34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 1, periodType39, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) '4', chronology44);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withFields(readablePartial58);
        boolean boolean60 = instant47.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = dateTime46.getChronology();
        boolean boolean63 = mutableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime64 = dateTime46.toDateTime();
        boolean boolean65 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime64);
        java.lang.Object obj66 = mutableInterval9.clone();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj66);
// flaky:         org.junit.Assert.assertEquals(obj66.toString(), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod8.add((long) 3);
        mutablePeriod8.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period23 = org.joda.time.Period.days((-1));
        org.joda.time.Period period25 = period23.withWeeks((int) 'a');
        java.lang.String str26 = period23.toString();
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) period23);
        mutablePeriod21.addMonths((int) (short) -1);
        org.joda.time.Period period31 = org.joda.time.Period.days((-1));
        org.joda.time.Period period33 = period31.withWeeks((int) 'a');
        org.joda.time.Period period35 = period31.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = period35.isSupported(durationFieldType36);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) period35);
        mutablePeriod21.setWeeks(4);
        mutablePeriod21.setMinutes(4);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        int int44 = mutablePeriod21.getSeconds();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes(0);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType49 = null;
        int int50 = minutes48.get(durationFieldType49);
        int int52 = minutes48.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod53 = minutes48.toMutablePeriod();
        boolean boolean54 = minutes46.isLessThan(minutes48);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.THREE;
        boolean boolean56 = minutes46.isGreaterThan(minutes55);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.ONE;
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) minutes66);
        org.joda.time.Minutes minutes68 = minutes55.minus(minutes66);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) minutes68);
        int int70 = mutablePeriod21.getMinutes();
        mutablePeriod21.setHours((-2147483648));
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P-1D" + "'", str26, "P-1D");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod8.add((long) 3);
        mutablePeriod8.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(4, (int) '#', 3600052, (int) (short) -1, 21, (-1), 100, 22);
        mutablePeriod21.setValue(0, 366);
        mutablePeriod21.setHours(349200000);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        int int28 = mutablePeriod21.size();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        mutablePeriod21.add(durationFieldType29, 3600010);
        mutablePeriod21.setSeconds(52);
        mutablePeriod21.setDays((-19));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        java.lang.String str16 = dateTimeZone14.getName(100L);
        org.joda.time.DateTime dateTime17 = dateTime8.withZoneRetainFields(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.DateTime dateTime19 = dateTime5.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = dateTime30.toLocalDateTime();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str34 = periodType33.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) -1, periodType33);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period46 = org.joda.time.Period.days((-1));
        org.joda.time.Period period48 = period46.withWeeks((int) 'a');
        java.lang.String str49 = period46.toString();
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) period46);
        int int51 = mutablePeriod44.getMillis();
        org.joda.time.DurationFieldType durationFieldType53 = mutablePeriod44.getFieldType(0);
        int int54 = periodType33.indexOf(durationFieldType53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime24, (org.joda.time.ReadablePartial) localDateTime31, periodType33);
        org.joda.time.Hours hours56 = org.joda.time.Hours.EIGHT;
        int int57 = hours56.size();
        org.joda.time.DurationFieldType durationFieldType58 = hours56.getFieldType();
        boolean boolean59 = localDateTime31.equals((java.lang.Object) durationFieldType58);
        org.joda.time.DateTime dateTime60 = dateTime19.withFields((org.joda.time.ReadablePartial) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime19.withDate(42, 29454, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29454 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+97:00" + "'", str16, "+97:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+97:00" + "'", str18, "+97:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "YearMonthDayTime" + "'", str34, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "P-1D" + "'", str49, "P-1D");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval2.copy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone14);
        int int16 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        java.util.Locale locale21 = null;
        int int22 = property19.getMaximumTextLength(locale21);
        java.lang.String str23 = property19.getName();
        org.joda.time.DateTime dateTime24 = property19.roundHalfCeilingCopy();
        org.joda.time.Interval interval25 = property19.toInterval();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean36 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval35);
        boolean boolean37 = mutableInterval28.contains((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Interval interval38 = mutableInterval28.toInterval();
        boolean boolean39 = interval25.isBefore((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean50 = mutableInterval45.isBefore((org.joda.time.ReadableInterval) mutableInterval49);
        boolean boolean51 = mutableInterval42.contains((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval49);
        long long53 = mutableInterval49.getEndMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean64 = mutableInterval59.isBefore((org.joda.time.ReadableInterval) mutableInterval63);
        boolean boolean65 = mutableInterval56.contains((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.Period period68 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType69 = period68.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType69);
        org.joda.time.Period period71 = mutableInterval63.toPeriod(periodType69);
        boolean boolean72 = mutableInterval49.isAfter((org.joda.time.ReadableInterval) mutableInterval63);
        boolean boolean73 = interval25.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        boolean boolean74 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Interval interval75 = interval25.toInterval();
        boolean boolean77 = interval75.isAfter(31622400000L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableInterval12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "dayOfYear" + "'", str23, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.minusHours(24);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withFields(readablePartial28);
        boolean boolean30 = instant17.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime27.minusHours(24);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, periodType46, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) '4', chronology51);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withFields(readablePartial54);
        boolean boolean56 = instant43.isAfter((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean57 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime53);
        java.lang.String str58 = dateTime42.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getRangeDurationType();
        int int61 = dateTime42.get(dateTimeFieldType59);
        boolean boolean62 = dateTime27.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime63 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int int64 = dateTime27.getCenturyOfEra();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str58, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks15.plus((int) (byte) -1);
        org.joda.time.Weeks weeks19 = weeks15.minus(22);
        org.joda.time.Weeks weeks21 = weeks19.minus((int) '#');
        org.joda.time.Weeks weeks23 = weeks21.dividedBy(349200000);
        org.joda.time.Weeks weeks25 = weeks23.plus(2);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone27);
        int int29 = dateTime28.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean40 = mutableInterval35.isBefore((org.joda.time.ReadableInterval) mutableInterval39);
        boolean boolean41 = mutableInterval32.contains((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTime dateTime43 = dateTime28.plus((org.joda.time.ReadablePeriod) weeks42);
        boolean boolean44 = weeks25.isLessThan(weeks42);
        org.joda.time.Weeks weeks45 = weeks25.negated();
        boolean boolean46 = weeks0.isLessThan(weeks25);
        org.joda.time.DurationFieldType durationFieldType47 = weeks0.getFieldType();
        org.joda.time.PeriodType periodType48 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks49 = weeks0.negated();
        java.lang.String str50 = weeks0.toString();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "P0W" + "'", str50, "P0W");
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1971);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.DurationFieldType durationFieldType8 = mutablePeriod6.getFieldType(3);
        int int9 = mutablePeriod6.getMonths();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutableInterval mutableInterval15 = interval13.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean26 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(0L);
        boolean boolean30 = mutableInterval18.containsNow();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        long long36 = interval34.toDurationMillis();
        org.joda.time.Interval interval38 = interval34.withEndMillis((long) (short) 100);
        long long39 = interval34.toDurationMillis();
        boolean boolean40 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval34);
        boolean boolean42 = interval34.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = interval46.toMutableInterval();
        boolean boolean49 = interval34.contains((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Period period50 = interval46.toPeriod();
        boolean boolean51 = interval46.isAfterNow();
        boolean boolean52 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval46);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Days days54 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval15);
        long long55 = mutableInterval15.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 53L + "'", long36 == 53L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 53L + "'", long39 == 53L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 53L + "'", long55 == 53L);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.minus(100L);
        long long3 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645513885314L + "'", long3 == 1645513885314L);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(98730826085640000L, (long) 2022);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        long long14 = interval12.toDurationMillis();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval12);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period26 = org.joda.time.Period.days((-1));
        org.joda.time.Period period28 = period26.withWeeks((int) 'a');
        java.lang.String str29 = period26.toString();
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) period26);
        mutablePeriod24.addMonths((int) (short) -1);
        org.joda.time.Period period34 = org.joda.time.Period.days((-1));
        org.joda.time.Period period36 = period34.withWeeks((int) 'a');
        org.joda.time.Period period38 = period34.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        boolean boolean40 = period38.isSupported(durationFieldType39);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', chronology50);
        org.joda.time.DurationField durationField53 = chronology50.centuries();
        mutablePeriod24.add((long) (short) 10, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        long long58 = dateTimeField55.add((long) (short) 0, (int) '4');
        boolean boolean59 = interval12.equals((java.lang.Object) dateTimeField55);
        boolean boolean60 = dateTimeField55.isSupported();
        org.joda.time.DurationField durationField61 = dateTimeField55.getLeapDurationField();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField55.getAsText((-90), locale63);
        long long66 = dateTimeField55.remainder(1645513822673L);
        int int68 = dateTimeField55.getMaximumValue(31556908800000L);
        int int70 = dateTimeField55.getMaximumValue(45L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53L + "'", long14 == 53L);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P-1D" + "'", str29, "P-1D");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 187200000L + "'", long58 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(durationField61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-90" + "'", str64, "-90");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 622673L + "'", long66 == 622673L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 24 + "'", int68 == 24);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 24 + "'", int70 == 24);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval7 = interval3.withEndMillis((long) (short) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 10);
        org.joda.time.Interval interval12 = interval7.withEnd((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withFields(readablePartial24);
        boolean boolean26 = instant13.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, periodType30, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '4', chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withFields(readablePartial38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        org.joda.time.DateTime dateTime41 = dateTime39.withEarlierOffsetAtOverlap();
        int int42 = dateTime39.getDayOfWeek();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology49.getZone();
        org.joda.time.DateTime dateTime53 = dateTime39.withChronology(chronology49);
        org.joda.time.Interval interval54 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant56 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration27, 21);
        org.joda.time.Duration duration57 = duration27.toDuration();
        org.joda.time.Instant instant58 = instant8.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant61 = instant8.withDurationAdded((long) (byte) 10, 349200000);
        org.joda.time.Period period63 = new org.joda.time.Period(1L);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadablePeriod) period63);
        org.joda.time.Instant instant66 = instant8.withMillis((long) 490);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = instant66.toString(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.490Z" + "'", str68, "1970-01-01T00:00:00.490Z");
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone6);
        int int8 = dateTime7.getSecondOfMinute();
        int int9 = dateTime7.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone11);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMillis((int) '#');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime7.toMutableDateTime(chronology23);
        int int28 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property29 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime31 = property29.addWrapFieldToCopy(429);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        java.util.Locale locale33 = null;
        int int34 = property29.getMaximumTextLength(locale33);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3600010 + "'", int9 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Interval interval12 = mutableInterval2.toInterval();
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.MIN_VALUE;
        boolean boolean16 = seconds14.isLessThan(seconds15);
        org.joda.time.Duration duration17 = seconds15.toStandardDuration();
        org.joda.time.Seconds seconds18 = seconds13.plus(seconds15);
        java.lang.String str19 = seconds15.toString();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT-2147483648S" + "'", str19, "PT-2147483648S");
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, periodType8, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) '4', chronology13);
        org.joda.time.DateTime dateTime16 = dateTime5.withChronology(chronology13);
        int int17 = dateTime16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withWeekOfWeekyear(29482654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29482654 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod8.add((long) 3);
        mutablePeriod8.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period23 = org.joda.time.Period.days((-1));
        org.joda.time.Period period25 = period23.withWeeks((int) 'a');
        java.lang.String str26 = period23.toString();
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) period23);
        mutablePeriod21.addMonths((int) (short) -1);
        org.joda.time.Period period31 = org.joda.time.Period.days((-1));
        org.joda.time.Period period33 = period31.withWeeks((int) 'a');
        org.joda.time.Period period35 = period31.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = period35.isSupported(durationFieldType36);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) period35);
        mutablePeriod21.setWeeks(4);
        mutablePeriod21.setMinutes(4);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        int int44 = mutablePeriod21.getSeconds();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes(0);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType49 = null;
        int int50 = minutes48.get(durationFieldType49);
        int int52 = minutes48.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod53 = minutes48.toMutablePeriod();
        boolean boolean54 = minutes46.isLessThan(minutes48);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.THREE;
        boolean boolean56 = minutes46.isGreaterThan(minutes55);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.ONE;
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) minutes66);
        org.joda.time.Minutes minutes68 = minutes55.minus(minutes66);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) minutes68);
        mutablePeriod21.setWeeks((int) (byte) 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P-1D" + "'", str26, "P-1D");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes68);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, periodType17, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withFields(readablePartial25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime26.withEarlierOffsetAtOverlap();
        int int29 = dateTime26.getDayOfWeek();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, periodType31, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology36.getZone();
        org.joda.time.DateTime dateTime40 = dateTime26.withChronology(chronology36);
        org.joda.time.Interval interval41 = duration14.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Instant instant43 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration14, 21);
        org.joda.time.Duration duration44 = duration14.toDuration();
        org.joda.time.Duration duration46 = duration44.withMillis((long) (-4867796));
        org.joda.time.ReadableDuration readableDuration47 = null;
        boolean boolean48 = duration46.isShorterThan(readableDuration47);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        int int6 = minutes2.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod7 = minutes2.toMutablePeriod();
        boolean boolean8 = minutes0.isLessThan(minutes2);
        org.joda.time.Minutes minutes10 = minutes0.dividedBy(7200);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutes(99);
        java.lang.String str13 = minutes12.toString();
        org.joda.time.Minutes minutes14 = minutes10.minus(minutes12);
        org.joda.time.PeriodType periodType15 = minutes10.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT99M" + "'", str13, "PT99M");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone4);
        int int6 = dateTime5.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean17 = mutableInterval12.isBefore((org.joda.time.ReadableInterval) mutableInterval16);
        boolean boolean18 = mutableInterval9.contains((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.DateTime dateTime20 = dateTime5.plus((org.joda.time.ReadablePeriod) weeks19);
        org.joda.time.DateTime dateTime22 = dateTime5.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withFields(readablePartial33);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property38 = dateTime34.era();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration40, 0);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = dateTime47.toLocalDateTime();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, periodType51, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) '4', chronology56);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withFields(readablePartial59);
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property64 = dateTime60.era();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime60.withDurationAdded((org.joda.time.ReadableDuration) duration66, 0);
        long long69 = duration66.getStandardHours();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration66, periodType70);
        org.joda.time.Period period72 = duration40.toPeriod(periodType70);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone74);
        int int76 = dateTime75.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime75.getZone();
        boolean boolean79 = dateTime75.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean90 = mutableInterval85.isBefore((org.joda.time.ReadableInterval) mutableInterval89);
        boolean boolean91 = mutableInterval82.contains((org.joda.time.ReadableInterval) mutableInterval89);
        org.joda.time.Weeks weeks92 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval89);
        long long93 = mutableInterval89.getEndMillis();
        org.joda.time.DateTime dateTime94 = mutableInterval89.getEnd();
        org.joda.time.Chronology chronology95 = mutableInterval89.getChronology();
        org.joda.time.DateTime dateTime96 = dateTime75.toDateTime(chronology95);
        org.joda.time.Period period97 = new org.joda.time.Period(349200000L, 315569520000001L, periodType70, chronology95);
        org.joda.time.Period period98 = new org.joda.time.Period(1645513780018L, periodType70);
        org.joda.time.PeriodType periodType99 = periodType70.withWeeksRemoved();
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period72);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(weeks92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 52L + "'", long93 == 52L);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(periodType99);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        java.lang.String str7 = dateTimeZone5.getName(100L);
        boolean boolean9 = dateTimeZone5.isStandardOffset((-349199999L));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:00" + "'", str7, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks13 = weeks12.negated();
        org.joda.time.Weeks weeks15 = weeks13.plus((int) (byte) -1);
        org.joda.time.PeriodType periodType16 = weeks15.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        mutablePeriod27.add((long) 3);
        mutablePeriod27.setYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(4, (int) '#', 3600052, (int) (short) -1, 21, (-1), 100, 22);
        mutablePeriod40.setValue(0, 366);
        mutablePeriod40.setHours(349200000);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int47 = mutablePeriod40.size();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        mutablePeriod40.add(durationFieldType48, 3600010);
        org.joda.time.Period period52 = period17.withFieldAdded(durationFieldType48, 0);
        boolean boolean53 = weeks15.isSupported(durationFieldType48);
        org.joda.time.Weeks weeks54 = org.joda.time.Weeks.THREE;
        boolean boolean55 = weeks15.isLessThan(weeks54);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("DayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DayTime\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2, 1976, 2022, (-4), 29422512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone5);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime6.getZone();
        org.joda.time.DateMidnight dateMidnight9 = dateTime6.toDateMidnight();
        org.joda.time.Days days10 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) '4', chronology21);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) '4', chronology32);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withFields(readablePartial35);
        boolean boolean37 = instant24.isAfter((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean38 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date39 = dateTime23.toDate();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period52 = org.joda.time.Period.days((-1));
        org.joda.time.Period period54 = period52.withWeeks((int) 'a');
        java.lang.String str55 = period52.toString();
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) period52);
        mutablePeriod50.addMonths((int) (short) -1);
        org.joda.time.Period period60 = org.joda.time.Period.days((-1));
        org.joda.time.Period period62 = period60.withWeeks((int) 'a');
        org.joda.time.Period period64 = period60.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType65 = null;
        boolean boolean66 = period64.isSupported(durationFieldType65);
        mutablePeriod50.add((org.joda.time.ReadablePeriod) period64);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 1, periodType71, chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) '4', chronology76);
        org.joda.time.DurationField durationField79 = chronology76.centuries();
        mutablePeriod50.add((long) (short) 10, chronology76);
        org.joda.time.DateTimeField dateTimeField81 = chronology76.clockhourOfDay();
        int int82 = dateTime41.get(dateTimeField81);
        boolean boolean83 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant84 = dateTime41.toInstant();
        boolean boolean85 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "P-1D" + "'", str55, "P-1D");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("3600010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"3600010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        long long15 = mutableInterval11.getEndMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean26 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        org.joda.time.Period period31 = mutableInterval11.toPeriod(periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone33);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.Instant instant49 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, periodType52, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) '4', chronology57);
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withFields(readablePartial60);
        boolean boolean62 = instant49.isAfter((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology64 = dateTime48.getChronology();
        boolean boolean65 = mutableInterval38.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime66 = dateTime48.toDateTime();
        boolean boolean67 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod1.add((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval11.setInterval((long) 2022, 3600052L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = minutes1.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod5 = minutes1.toMutablePeriod();
        java.lang.Class<?> wildcardClass6 = minutes1.getClass();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, periodType44, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) '4', chronology49);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withFields(readablePartial52);
        boolean boolean54 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period56 = org.joda.time.Period.days((-1));
        org.joda.time.Period period58 = period56.withWeeks((int) 'a');
        org.joda.time.Period period60 = period56.plusMonths((int) (short) -1);
        org.joda.time.Period period62 = period56.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, periodType66, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) '4', chronology71);
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withFields(readablePartial74);
        org.joda.time.DateTime.Property property76 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.Weeks weeks81 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        org.joda.time.Period period84 = period83.toPeriod();
        org.joda.time.Period period86 = period84.withHours(19);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((java.lang.Object) period86);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod87.addMonths((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        int int26 = dateTime25.getYearOfEra();
        org.joda.time.DateTime.Property property27 = dateTime25.era();
        org.joda.time.LocalTime localTime28 = dateTime25.toLocalTime();
        boolean boolean29 = dateTime25.isEqualNow();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        int int4 = minutes2.get(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        boolean boolean6 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        boolean boolean12 = minutes0.isLessThan(minutes8);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = minutes14.get(durationFieldType15);
        org.joda.time.Minutes minutes17 = minutes0.minus(minutes14);
        int int18 = minutes17.getMinutes();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutes(0);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        int int26 = minutes22.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod27 = minutes22.toMutablePeriod();
        boolean boolean28 = minutes20.isLessThan(minutes22);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.THREE;
        boolean boolean30 = minutes20.isGreaterThan(minutes29);
        boolean boolean31 = minutes17.isGreaterThan(minutes29);
        org.joda.time.DurationFieldType durationFieldType32 = minutes17.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(0L);
        boolean boolean14 = mutableInterval2.containsNow();
        org.joda.time.DateTime dateTime15 = mutableInterval2.getStart();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = interval19.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean32 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean33 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Weeks weeks34 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval31);
        long long35 = mutableInterval31.getEndMillis();
        org.joda.time.DateTime dateTime36 = mutableInterval31.getEnd();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        boolean boolean39 = mutableInterval31.contains((long) (short) -1);
        long long40 = mutableInterval31.getEndMillis();
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean42 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean43 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setDurationBeforeEnd((-10962908668819045L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, periodType7, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-3155695200000L), 0L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) int3, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        int int14 = dateTime11.getDayOfWeek();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime11.withChronology(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period30 = period27.withMonths((int) (byte) 0);
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.DateTime dateTime33 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period31, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = dateTime37.toLocalDateTime();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMonths((int) 'a');
        boolean boolean41 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime37);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime33.toGregorianCalendar();
        org.joda.time.DateTime.Property property43 = dateTime33.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfFloorCopy();
        int int45 = property43.get();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("12");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"12\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours(17);
        org.joda.time.Hours hours2 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours4 = hours2.minus(9);
        org.joda.time.Hours hours5 = hours1.plus(hours4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = hours4.getFieldType(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1439");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.DateTime dateTime19 = dateTime2.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime41 = dateTime2.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime41.withSecondOfMinute(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.MutableInterval mutableInterval5 = interval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean16 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        long long23 = interval21.toDurationMillis();
        org.joda.time.Interval interval25 = interval21.withEndMillis((long) (short) 100);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) interval21);
        boolean boolean27 = interval3.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        long long33 = interval31.toDurationMillis();
        boolean boolean35 = interval31.isAfter((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone37);
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Interval interval43 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.Interval interval44 = interval31.toInterval();
        org.joda.time.Duration duration45 = interval44.toDuration();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, dateTimeZone48);
        boolean boolean51 = dateTimeZone48.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = interval3.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Hours hours55 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval3);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 53L + "'", long33 == 53L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(hours55);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime11.withField(dateTimeFieldType15, 1);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withFields(readablePartial30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.withEarlierOffsetAtOverlap();
        int int34 = dateTime31.getDayOfWeek();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime31.withChronology(chronology41);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType48 = null;
        int int49 = minutes47.get(durationFieldType48);
        int int51 = minutes47.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod52 = minutes47.toMutablePeriod();
        long long55 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) '#', (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = chronology41.minuteOfDay();
        boolean boolean57 = dateTimeFieldType19.isSupported(chronology41);
        boolean boolean58 = dateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone60);
        int int62 = dateTime61.getMillisOfDay();
        org.joda.time.DateTime dateTime64 = dateTime61.plusMillis((int) '#');
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 1, periodType67, chronology72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) '4', chronology72);
        org.joda.time.DateTime dateTime75 = dateTime64.withChronology(chronology72);
        org.joda.time.DurationField durationField76 = chronology72.days();
        org.joda.time.DurationField durationField77 = chronology72.years();
        org.joda.time.DateTime dateTime78 = dateTime18.withChronology(chronology72);
        int int79 = dateTime78.getSecondOfMinute();
        java.lang.String str80 = dateTime78.toString();
        org.joda.time.DateTime dateTime82 = dateTime78.withWeekyear(60);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6000035L + "'", long55 == 6000035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3600010 + "'", int62 == 3600010);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-05T00:00:00.000+97:00" + "'", str80, "1970-01-05T00:00:00.000+97:00");
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        boolean boolean7 = periodFormatter5.isParser();
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter5.withLocale(locale8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Period period20 = duration12.toPeriod(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 52, 2765L, chronology18);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, periodType25, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '4', chronology30);
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime35 = dateTime32.minusYears((int) '#');
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears(7);
        mutablePeriod22.setPeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime41);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = periodFormatter9.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod22, "PT1M", 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period11 = org.joda.time.Period.days((-1));
        org.joda.time.Period period13 = period11.withWeeks((int) 'a');
        java.lang.String str14 = period11.toString();
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) period11);
        mutablePeriod9.addMonths((int) (short) -1);
        org.joda.time.Period period19 = org.joda.time.Period.days((-1));
        org.joda.time.Period period21 = period19.withWeeks((int) 'a');
        org.joda.time.Period period23 = period19.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        boolean boolean25 = period23.isSupported(durationFieldType24);
        mutablePeriod9.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, periodType30, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '4', chronology35);
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        mutablePeriod9.add((long) (short) 10, chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period51 = org.joda.time.Period.days((-1));
        org.joda.time.Period period53 = period51.withWeeks((int) 'a');
        java.lang.String str54 = period51.toString();
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) period51);
        mutablePeriod49.addSeconds((int) (byte) 100);
        long long60 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 2022, (int) (byte) 0);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, periodType63, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) '4', chronology68);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withFields(readablePartial71);
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        org.joda.time.DateTime dateTime75 = dateTime72.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime77 = dateTime72.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime72.getZone();
        org.joda.time.Chronology chronology79 = chronology35.withZone(dateTimeZone78);
        org.joda.time.DurationField durationField80 = chronology79.seconds();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(3155695200000L, chronology79);
        mutablePeriod81.add(4867841863L);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P-1D" + "'", str14, "P-1D");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P-1D" + "'", str54, "P-1D");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2022L + "'", long60 == 2022L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        int int7 = minutes3.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = minutes3.getFieldType(0);
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType20, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) '4', chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.Period period32 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 1645513780018L, periodType30);
        mutablePeriod33.setSeconds((-4867796));
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod33.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod36.setPeriod(26, 70, (-2147483648), 3600, (-90), 800, 29446191, 489);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3600010 + "'", int15 == 3600010);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, periodType4, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withFields(readablePartial12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.withEarlierOffsetAtOverlap();
        int int16 = dateTime13.getDayOfWeek();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, periodType18, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology23.getZone();
        org.joda.time.DateTime dateTime27 = dateTime13.withChronology(chronology23);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 23, 100L, chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.era();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean14 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadablePeriod) weeks16);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        org.joda.time.Chronology chronology29 = chronology24.withUTC();
        org.joda.time.DateTime dateTime30 = dateTime2.withChronology(chronology24);
        org.joda.time.TimeOfDay timeOfDay31 = dateTime30.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone33);
        java.util.Locale locale35 = null;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        boolean boolean38 = dateTime34.isEqual((long) 3);
        org.joda.time.LocalDate localDate39 = dateTime34.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) timeOfDay31, (org.joda.time.ReadablePartial) localDate39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period29 = mutableInterval9.toPeriod(periodType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(periodType34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 1, periodType39, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) '4', chronology44);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withFields(readablePartial58);
        boolean boolean60 = instant47.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = dateTime46.getChronology();
        boolean boolean63 = mutableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime64 = dateTime46.toDateTime();
        boolean boolean65 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.withChronology(chronology66);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        long long73 = interval71.toDurationMillis();
        boolean boolean75 = interval71.contains((long) ' ');
        org.joda.time.Duration duration76 = interval71.toDuration();
        long long77 = duration76.getStandardSeconds();
        org.joda.time.Period period78 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType79 = period78.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration76, periodType79);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 1, periodType83, chronology88);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) '4', chronology88);
        org.joda.time.DurationField durationField91 = chronology88.centuries();
        org.joda.time.DateTime dateTime92 = org.joda.time.DateTime.now(chronology88);
        org.joda.time.Interval interval93 = duration76.toIntervalTo((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean95 = dateTime92.isEqual((-1353825273600090L));
        org.joda.time.DateTime.Property property96 = dateTime92.weekOfWeekyear();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 53L + "'", long73 == 53L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.LocalDate localDate4 = dateTime2.toLocalDate();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay((-457087));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457087 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        long long5 = interval3.toDurationMillis();
        boolean boolean7 = interval3.contains((long) ' ');
        java.lang.String str8 = interval3.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53L + "'", long5 == 53L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00" + "'", str8, "1970-01-05T00:59:59.999+97:00/1970-01-05T01:00:00.052+97:00");
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.setYears(0);
        mutablePeriod8.add((long) 4);
        mutablePeriod8.setYears((int) (byte) 0);
        org.joda.time.Hours hours21 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.PeriodType periodType22 = hours21.getPeriodType();
        org.joda.time.Hours hours23 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours24 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours25 = hours23.minus(hours24);
        int int26 = hours24.getHours();
        org.joda.time.Hours hours27 = hours21.minus(hours24);
        org.joda.time.Hours hours28 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours29 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours30 = hours28.minus(hours29);
        org.joda.time.Hours hours31 = hours27.plus(hours29);
        org.joda.time.Duration duration32 = hours31.toStandardDuration();
        org.joda.time.Hours hours33 = hours31.negated();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) hours33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours36 = hours33.minus(27425229);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -27425229");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "centuryOfEra" + "'", str1, "centuryOfEra");
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513787553L, (long) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutablePeriod2.mergePeriod(readablePeriod3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue((-19), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        java.lang.String str28 = dateTimeZone26.getName(100L);
        org.joda.time.DateTime dateTime29 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        java.lang.String str37 = dateTimeZone35.getName(100L);
        org.joda.time.DateTime dateTime38 = dateTime29.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology39 = chronology17.withZone(dateTimeZone35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1353793219200090L), 187200000L, chronology39);
        boolean boolean41 = durationFieldType8.isSupported(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime7.toDateTime(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime7.withDate(52, (-3600001), 3600010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600001 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) -1);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        boolean boolean8 = minutes2.isGreaterThan(minutes4);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = minutes10.getFieldType();
        boolean boolean14 = minutes2.isLessThan(minutes10);
        org.joda.time.DurationFieldType durationFieldType15 = minutes2.getFieldType();
        org.joda.time.Period period17 = period1.withFieldAdded(durationFieldType15, 366);
        org.joda.time.Period period19 = period17.minusHours((-2147483639));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.Period period18 = org.joda.time.Period.days((-1));
        org.joda.time.Period period20 = period18.withWeeks((int) 'a');
        org.joda.time.Period period22 = period18.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = period22.isSupported(durationFieldType23);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, periodType29, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) '4', chronology34);
        org.joda.time.DurationField durationField37 = chronology34.centuries();
        mutablePeriod8.add((long) (short) 10, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        long long41 = dateTimeField39.roundHalfCeiling((long) 4);
        long long44 = dateTimeField39.addWrapField((long) (-1), 52);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutableInterval mutableInterval50 = interval48.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean61 = mutableInterval56.isBefore((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean62 = mutableInterval53.contains((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        long long68 = interval66.toDurationMillis();
        org.joda.time.Interval interval70 = interval66.withEndMillis((long) (short) 100);
        mutableInterval60.setInterval((org.joda.time.ReadableInterval) interval66);
        boolean boolean72 = interval48.isAfter((org.joda.time.ReadableInterval) interval66);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean83 = mutableInterval78.isBefore((org.joda.time.ReadableInterval) mutableInterval82);
        boolean boolean84 = mutableInterval75.contains((org.joda.time.ReadableInterval) mutableInterval82);
        org.joda.time.Weeks weeks85 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval82);
        long long86 = mutableInterval82.getEndMillis();
        org.joda.time.DateTime dateTime87 = mutableInterval82.getEnd();
        boolean boolean88 = interval66.isAfter((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = dateTime87.withDayOfYear(1);
        org.joda.time.LocalDate localDate91 = dateTime87.toLocalDate();
        java.util.Locale locale93 = null;
        java.lang.String str94 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDate91, (-416397), locale93);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = localDate91.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 14399999L + "'", long44 == 14399999L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 53L + "'", long68 == 53L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(weeks85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "-416397" + "'", str94, "-416397");
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getName(100L);
        org.joda.time.DateTime dateTime9 = dateTime0.withZoneRetainFields(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getID();
        java.lang.String str12 = dateTimeZone6.getNameKey((long) 3600010);
        long long16 = dateTimeZone6.convertLocalToUTC((-349199989L), false, (-6380815651200000L));
        java.util.TimeZone timeZone17 = dateTimeZone6.toTimeZone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+97:00" + "'", str10, "+97:00");
// flaky:         org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-698399989L) + "'", long16 == (-698399989L));
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days2 = days0.minus((int) '4');
        org.joda.time.Days days4 = days0.multipliedBy(100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str7 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean10 = periodType6.isSupported(durationFieldType9);
        org.joda.time.PeriodType periodType11 = periodType6.withSecondsRemoved();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, periodType15, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, 53L, chronology20);
        org.joda.time.Period period26 = new org.joda.time.Period((java.lang.Object) days0, periodType6, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = period26.minusWeeks(2720);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "YearMonthDayTime" + "'", str7, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime3.getZone();
        boolean boolean7 = dateTime3.isBefore((long) '#');
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean18 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean19 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval17);
        long long21 = mutableInterval17.getEndMillis();
        org.joda.time.DateTime dateTime22 = mutableInterval17.getEnd();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime3.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-90), chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.clockhourOfDay();
        org.joda.time.DurationField durationField28 = chronology23.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = durationField28.getValueAsLong(349200000L, 29844289900800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, (long) 10, periodType5);
        mutablePeriod6.addMonths(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod6.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        int int11 = mutablePeriod6.get(durationFieldType10);
        boolean boolean12 = periodType1.isSupported(durationFieldType10);
        mutablePeriod0.add(durationFieldType10, 99);
        mutablePeriod0.addHours(429);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(0);
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone10);
        int int12 = dateTime11.getSecondOfMinute();
        int int13 = dateTime11.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone15);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMillis((int) '#');
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType22, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4', chronology27);
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology27);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime32 = dateTime7.toDateTime(chronology27);
        org.joda.time.DurationField durationField33 = chronology27.days();
        long long36 = durationField33.getMillis((long) 2022, 345420022L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600010 + "'", int13 == 3600010);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3600010 + "'", int17 == 3600010);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 174700800000L + "'", long36 == 174700800000L);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMillis((int) '#');
        int int6 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withFields(readablePartial18);
        boolean boolean20 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) '4', chronology29);
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withFields(readablePartial32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.withEarlierOffsetAtOverlap();
        int int36 = dateTime33.getDayOfWeek();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, periodType38, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.DateTime dateTime47 = dateTime33.withChronology(chronology43);
        org.joda.time.Interval interval48 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant50 = instant7.withDurationAdded((org.joda.time.ReadableDuration) duration21, 21);
        org.joda.time.DateTime dateTime51 = dateTime2.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Hours hours52 = duration21.toStandardHours();
        org.joda.time.Duration duration53 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 1, periodType56, chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) '4', chronology61);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withFields(readablePartial64);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        org.joda.time.DateTime dateTime67 = dateTime65.withEarlierOffsetAtOverlap();
        int int68 = dateTime65.getDayOfWeek();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 1, periodType70, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.DateTime dateTime79 = dateTime65.withChronology(chronology75);
        org.joda.time.Interval interval80 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 0);
        org.joda.time.Period period83 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration85 = duration53.withMillis(100L);
        org.joda.time.Duration duration86 = duration21.minus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration88 = duration86.withMillis(1645513801217L);
        java.lang.String str89 = duration88.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3600010 + "'", int3 == 3600010);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "PT1645513801.217S" + "'", str89, "PT1645513801.217S");
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DurationField durationField9 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        long long12 = dateTimeField10.remainder(4518609417L);
        org.joda.time.Period period16 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType17);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.Period period25 = new org.joda.time.Period(10L, periodType17, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.minuteOfDay();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField26.getAsText(3600010, locale28);
        long long32 = dateTimeField26.add((long) 2022, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str47 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) (short) -1, periodType46);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period59 = org.joda.time.Period.days((-1));
        org.joda.time.Period period61 = period59.withWeeks((int) 'a');
        java.lang.String str62 = period59.toString();
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) period59);
        int int64 = mutablePeriod57.getMillis();
        org.joda.time.DurationFieldType durationFieldType66 = mutablePeriod57.getFieldType(0);
        int int67 = periodType46.indexOf(durationFieldType66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime37, (org.joda.time.ReadablePartial) localDateTime44, periodType46);
        org.joda.time.Hours hours69 = org.joda.time.Hours.EIGHT;
        int int70 = hours69.size();
        org.joda.time.DurationFieldType durationFieldType71 = hours69.getFieldType();
        boolean boolean72 = localDateTime44.equals((java.lang.Object) durationFieldType71);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, locale73);
        int int75 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadablePartial readablePartial76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds77 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) localDateTime44, readablePartial76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3600010" + "'", str29, "3600010");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 6002022L + "'", long32 == 6002022L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "YearMonthDayTime" + "'", str47, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "P-1D" + "'", str62, "P-1D");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "491" + "'", str74, "491");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PT0M");
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks15.plus((int) (byte) -1);
        org.joda.time.Weeks weeks19 = weeks15.minus(22);
        org.joda.time.Weeks weeks20 = weeks1.plus(weeks19);
        org.joda.time.Period period21 = weeks19.toPeriod();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean13 = mutableInterval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType18);
        org.joda.time.Period period20 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType18);
        org.joda.time.PeriodType periodType22 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        org.joda.time.Interval interval30 = interval26.withEndMillis(53L);
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 0, (long) (byte) 0, periodType22, chronology31);
        org.joda.time.Days days33 = org.joda.time.Days.ONE;
        int int34 = days33.getDays();
        org.joda.time.MutablePeriod mutablePeriod35 = days33.toMutablePeriod();
        org.joda.time.PeriodType periodType36 = mutablePeriod35.getPeriodType();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.Period period38 = period32.withPeriodType(periodType37);
        int int39 = period32.getHours();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getDurationField();
        java.lang.String str12 = dateTimeField9.getAsShortText(6048000002L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsShortText(42, locale14);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12" + "'", str12, "12");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "42" + "'", str15, "42");
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, periodType4, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, periodType15, chronology20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) '4', chronology20);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withFields(readablePartial23);
        boolean boolean25 = instant12.isAfter((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology27 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime32.withMinuteOfHour(10);
        org.joda.time.TimeOfDay timeOfDay36 = dateTime32.toTimeOfDay();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) timeOfDay36, locale37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone40);
        int int42 = dateTime41.getDayOfMonth();
        org.joda.time.DateTime dateTime44 = dateTime41.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime46 = dateTime44.withYear(0);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, periodType49, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) '4', chronology54);
        org.joda.time.Instant instant57 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, periodType60, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) '4', chronology65);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withFields(readablePartial68);
        boolean boolean70 = instant57.isAfter((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime67);
        java.lang.String str72 = dateTime56.toString();
        boolean boolean73 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = timeOfDay36.equals((java.lang.Object) dateTime46);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.halfdays();
        org.joda.time.DurationField durationField79 = chronology77.weekyears();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-05T01:00:00.052+97:00" + "'", str72, "1970-01-05T01:00:00.052+97:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) '4', chronology7);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withFields(readablePartial10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime11.withField(dateTimeFieldType15, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime11.withDate(1976, (-97), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks15.plus((int) (byte) -1);
        org.joda.time.Weeks weeks19 = weeks15.minus(22);
        org.joda.time.Weeks weeks21 = weeks19.minus((int) '#');
        org.joda.time.Weeks weeks23 = weeks21.dividedBy(349200000);
        org.joda.time.Weeks weeks25 = weeks23.plus(2);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean36 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval35);
        boolean boolean37 = mutableInterval28.contains((org.joda.time.ReadableInterval) mutableInterval35);
        mutableInterval28.setDurationAfterStart(0L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval28.copy();
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval40);
        boolean boolean42 = weeks23.isLessThan(weeks41);
        java.lang.String str43 = weeks41.toString();
        org.joda.time.Weeks weeks44 = weeks1.plus(weeks41);
        int int45 = weeks1.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0W" + "'", str43, "P0W");
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((-3166581600000L));
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period12 = org.joda.time.Period.days((-1));
        org.joda.time.Period period14 = period12.withWeeks((int) 'a');
        java.lang.String str15 = period12.toString();
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) period12);
        int int17 = mutablePeriod10.getMillis();
        org.joda.time.DurationFieldType durationFieldType19 = mutablePeriod10.getFieldType(0);
        mutablePeriod10.setMonths(10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration26 = duration23.withDurationAdded((-3600000L), 3);
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period38 = org.joda.time.Period.days((-1));
        org.joda.time.Period period40 = period38.withWeeks((int) 'a');
        java.lang.String str41 = period38.toString();
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period38);
        mutablePeriod36.addMonths((int) (short) -1);
        org.joda.time.Period period46 = org.joda.time.Period.days((-1));
        org.joda.time.Period period48 = period46.withWeeks((int) 'a');
        org.joda.time.Period period50 = period46.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        boolean boolean52 = period50.isSupported(durationFieldType51);
        mutablePeriod36.add((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, periodType57, chronology62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) '4', chronology62);
        org.joda.time.DurationField durationField65 = chronology62.centuries();
        mutablePeriod36.add((long) (short) 10, chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.clockhourOfDay();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration27, chronology62);
        boolean boolean70 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P-1D" + "'", str15, "P-1D");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P-1D" + "'", str41, "P-1D");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
        org.joda.time.Period period3 = period1.withMillis(59);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-3155673599903L));
        org.joda.time.Hours hours3 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours5 = hours3.minus(hours4);
        org.joda.time.PeriodType periodType6 = hours4.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1645513823456L, periodType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = duration1.toPeriod(periodType6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -52594559998");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = minutes1.get(durationFieldType2);
        int int5 = minutes1.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes1.toMutablePeriod();
        mutablePeriod6.setPeriod((int) (byte) 1, 366, 19, 429, (int) (short) -1, (int) (short) 1, (-292275054), 0);
        mutablePeriod6.setWeeks(2022);
        mutablePeriod6.addDays(10);
        mutablePeriod6.addHours(490);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '4', chronology8);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withFields(readablePartial11);
        boolean boolean13 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, periodType19, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4', chronology24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withFields(readablePartial27);
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone32);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, periodType36, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime26.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight51 = dateTime48.toDateMidnight();
        int int52 = dateMidnight51.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval53 = new org.joda.time.Interval((java.lang.Object) dateMidnight51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateMidnight");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval9);
        long long13 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean24 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean25 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Period period27 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Period period29 = mutableInterval9.toPeriod(periodType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(periodType34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 1, periodType39, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) '4', chronology44);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withFields(readablePartial58);
        boolean boolean60 = instant47.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = dateTime46.getChronology();
        boolean boolean63 = mutableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime64 = dateTime46.toDateTime();
        boolean boolean65 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.withChronology(chronology66);
        boolean boolean69 = dateTime67.isAfter(8640000000L);
        org.joda.time.DateTime dateTime70 = dateTime67.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(1645513768094L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        int int8 = dateTime7.getHourOfDay();
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime7.toCalendar(locale9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime12 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513889224,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=11,SECOND=29,MILLISECOND=224,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(355200035L);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.copy();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period13 = org.joda.time.Period.days((-1));
        org.joda.time.Period period15 = period13.withWeeks((int) 'a');
        java.lang.String str16 = period13.toString();
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) period13);
        mutablePeriod11.addMonths((int) (short) -1);
        org.joda.time.Period period21 = org.joda.time.Period.days((-1));
        org.joda.time.Period period23 = period21.withWeeks((int) 'a');
        org.joda.time.Period period25 = period21.plusMonths((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = period25.isSupported(durationFieldType26);
        mutablePeriod11.add((org.joda.time.ReadablePeriod) period25);
        mutablePeriod11.setWeeks(4);
        int int31 = mutablePeriod11.getWeeks();
        mutablePeriod11.addMillis(489);
        org.joda.time.Period period34 = mutablePeriod11.toPeriod();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period37 = period34.multipliedBy(29454);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P-1D" + "'", str16, "P-1D");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(0L);
        boolean boolean14 = mutableInterval2.containsNow();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        long long20 = interval18.toDurationMillis();
        org.joda.time.Interval interval22 = interval18.withEndMillis((long) (short) 100);
        long long23 = interval18.toDurationMillis();
        boolean boolean24 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, periodType27, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) '4', chronology32);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withFields(readablePartial35);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays((int) (byte) 1);
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime36);
        mutableInterval2.setInterval((-165606426000000L), (-349199948L));
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean59 = mutableInterval54.isBefore((org.joda.time.ReadableInterval) mutableInterval58);
        boolean boolean60 = mutableInterval51.contains((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Period period63 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType64 = period63.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '#', 100L, periodType64);
        org.joda.time.Period period66 = mutableInterval58.toPeriod(periodType64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType64);
        org.joda.time.PeriodType periodType68 = periodType64.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.MutableInterval mutableInterval74 = interval72.toMutableInterval();
        org.joda.time.Interval interval76 = interval72.withEndMillis(53L);
        org.joda.time.Chronology chronology77 = interval72.getChronology();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 0, (long) (byte) 0, periodType68, chronology77);
        org.joda.time.Period period79 = new org.joda.time.Period(43809973334L, (long) (byte) 0, periodType68);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 53L + "'", long20 == 53L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean10 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean11 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        long long17 = interval15.toDurationMillis();
        org.joda.time.Interval interval19 = interval15.withEndMillis((long) (short) 100);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) interval15);
        boolean boolean21 = mutableInterval9.containsNow();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone23);
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        boolean boolean28 = dateTime24.isEqual((long) 3);
        boolean boolean29 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Seconds seconds30 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTime dateTime31 = mutableInterval9.getEnd();
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) '4', chronology40);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withFields(readablePartial43);
        boolean boolean45 = instant32.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours(24);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.DateTime.Property property58 = dateTime57.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        int int60 = dateTime42.get(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        int int62 = dateTime31.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53L + "'", long17 == 53L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean22 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean23 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.DateTime dateTime25 = dateTime10.plus((org.joda.time.ReadablePeriod) weeks24);
        org.joda.time.DateTime dateTime27 = dateTime10.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, periodType30, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '4', chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withFields(readablePartial38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property43 = dateTime39.era();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration45, 0);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = dateTime52.toLocalDateTime();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 1, periodType56, chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) '4', chronology61);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withFields(readablePartial64);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property69 = dateTime65.era();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds((long) (short) 10);
        org.joda.time.DateTime dateTime73 = dateTime65.withDurationAdded((org.joda.time.ReadableDuration) duration71, 0);
        long long74 = duration71.getStandardHours();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration71, periodType75);
        org.joda.time.Period period77 = duration45.toPeriod(periodType75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(3635, 67, 0, 19, (-90), 2922789, (-19), 56, periodType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone1);
        int int3 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        boolean boolean12 = property6.isLeap();
        org.joda.time.DateTime dateTime13 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property6.setCopy("DateTimeField[minuteOfDay]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[minuteOfDay]\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfYear" + "'", str10, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean12 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        boolean boolean13 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) mutableInterval11);
        long long15 = mutableInterval11.getEndMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        boolean boolean26 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        org.joda.time.Period period31 = mutableInterval11.toPeriod(periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone33);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType41, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) '4', chronology46);
        org.joda.time.Instant instant49 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, periodType52, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) '4', chronology57);
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withFields(readablePartial60);
        boolean boolean62 = instant49.isAfter((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology64 = dateTime48.getChronology();
        boolean boolean65 = mutableInterval38.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime66 = dateTime48.toDateTime();
        boolean boolean67 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod1.add((org.joda.time.ReadableInterval) mutableInterval11);
        long long69 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration70 = mutableInterval11.toDuration();
        org.joda.time.Duration duration71 = org.joda.time.Duration.ZERO;
        java.lang.String str72 = duration71.toString();
        org.joda.time.Duration duration73 = org.joda.time.Duration.ZERO;
        boolean boolean74 = duration71.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration75 = duration71.toDuration();
        org.joda.time.Duration duration76 = duration75.toDuration();
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration76);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 53L + "'", long69 == 53L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0S" + "'", str72, "PT0S");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, dateTimeZone2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone2.getName((long) 24, locale5);
        long long8 = dateTimeZone2.convertUTCToLocal((-349199979L));
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, periodType12, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) '4', chronology17);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withFields(readablePartial20);
        boolean boolean22 = instant9.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, periodType28, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) '4', chronology33);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withFields(readablePartial36);
        boolean boolean38 = instant25.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone41);
        int int43 = dateTime42.getDayOfMonth();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.DateTime dateTime54 = dateTime42.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateTime35.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime(dateTimeZone56);
        org.joda.time.Days days58 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime57.getYearOfEra();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime57.toMutableDateTime(dateTimeZone62);
        org.joda.time.Instant instant65 = org.joda.time.Instant.now();
        org.joda.time.Instant instant67 = instant65.minus(100L);
        org.joda.time.Chronology chronology68 = instant65.getChronology();
        boolean boolean69 = dateTimeZone62.equals((java.lang.Object) chronology68);
        long long71 = dateTimeZone2.getMillisKeepLocal(dateTimeZone62, (long) (-9));
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 21L + "'", long8 == 21L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-9L) + "'", long71 == (-9L));
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period10 = org.joda.time.Period.days((-1));
        org.joda.time.Period period12 = period10.withWeeks((int) 'a');
        java.lang.String str13 = period10.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod8.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, periodType21, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '4', chronology26);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withFields(readablePartial29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getDayOfWeek();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, periodType35, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology40);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        int int50 = minutes46.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes46.toMutablePeriod();
        long long54 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) '#', (int) (short) 10);
        mutablePeriod8.setPeriod((long) (short) 100, (long) 2, chronology40);
        org.joda.time.DurationField durationField56 = chronology40.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = durationField56.getMillis(110449353600010L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 110449353600010 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-1D" + "'", str13, "P-1D");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6000035L + "'", long54 == 6000035L);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.joda.time.Period period1 = org.joda.time.Period.millis(52);
        org.joda.time.Period period3 = period1.minusSeconds(22);
        org.joda.time.Period period5 = period1.withMillis(59);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        java.lang.String str8 = periodType7.getName();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (short) -1, periodType7);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period20 = org.joda.time.Period.days((-1));
        org.joda.time.Period period22 = period20.withWeeks((int) 'a');
        java.lang.String str23 = period20.toString();
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) period20);
        int int25 = mutablePeriod18.getMillis();
        org.joda.time.DurationFieldType durationFieldType27 = mutablePeriod18.getFieldType(0);
        int int28 = periodType7.indexOf(durationFieldType27);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period39 = org.joda.time.Period.days((-1));
        org.joda.time.Period period41 = period39.withWeeks((int) 'a');
        java.lang.String str42 = period39.toString();
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) period39);
        mutablePeriod37.addMonths((int) (short) -1);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 1, periodType50, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '4', chronology55);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withFields(readablePartial58);
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime59.withEarlierOffsetAtOverlap();
        int int62 = dateTime59.getDayOfWeek();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 1, periodType64, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone72 = chronology69.getZone();
        org.joda.time.DateTime dateTime73 = dateTime59.withChronology(chronology69);
        org.joda.time.Minutes minutes75 = org.joda.time.Minutes.minutes((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        int int77 = minutes75.get(durationFieldType76);
        int int79 = minutes75.getValue(0);
        org.joda.time.MutablePeriod mutablePeriod80 = minutes75.toMutablePeriod();
        long long83 = chronology69.add((org.joda.time.ReadablePeriod) mutablePeriod80, (long) '#', (int) (short) 10);
        mutablePeriod37.setPeriod((long) (short) 100, (long) 2, chronology69);
        org.joda.time.DurationField durationField85 = chronology69.halfdays();
        org.joda.time.DurationField durationField86 = durationFieldType27.getField(chronology69);
        int int87 = period1.get(durationFieldType27);
        java.lang.String str88 = period1.toString();
        int int89 = period1.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "YearMonthDayTime" + "'", str8, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P-1D" + "'", str23, "P-1D");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "P-1D" + "'", str42, "P-1D");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 6000035L + "'", long83 == 6000035L);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT0.052S" + "'", str88, "PT0.052S");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        java.io.Writer writer8 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) -1, (int) (byte) 100, 10, 0, (int) (short) 1, 0, (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Period period19 = org.joda.time.Period.days((-1));
        org.joda.time.Period period21 = period19.withWeeks((int) 'a');
        java.lang.String str22 = period19.toString();
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) period19);
        int int24 = mutablePeriod17.getMillis();
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod17.toMutablePeriod();
        int int26 = mutablePeriod17.getMillis();
        mutablePeriod17.addDays(7);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer8, (org.joda.time.ReadablePeriod) mutablePeriod17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P-1D" + "'", str22, "P-1D");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval((long) (short) -1, (long) '4');
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.secondOfDay();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }
}

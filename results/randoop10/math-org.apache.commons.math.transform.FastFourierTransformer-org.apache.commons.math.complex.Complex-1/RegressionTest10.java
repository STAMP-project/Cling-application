import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex12.tan();
        org.apache.commons.math.complex.Complex complex18 = complex12.cos();
        org.apache.commons.math.complex.Complex complex19 = complex12.asin();
        org.apache.commons.math.complex.Complex complex20 = complex12.asin();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex34 = complex23.multiply(complex33);
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex34.pow(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex37.asin();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.atan();
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.asin();
        org.apache.commons.math.complex.Complex complex50 = complex44.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.negate();
        org.apache.commons.math.complex.Complex complex57 = complex55.asin();
        org.apache.commons.math.complex.Complex complex58 = complex55.atan();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.negate();
        org.apache.commons.math.complex.Complex complex63 = complex51.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex37.add(complex51);
        org.apache.commons.math.complex.Complex complex65 = complex12.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.acos();
        org.apache.commons.math.complex.Complex complex67 = complex64.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.570758233200585d + "'", double61 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-10.693147180349666d), 1.25328374281112d);
        org.apache.commons.math.complex.Complex complex16 = complex12.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.asin();
        org.apache.commons.math.complex.Complex complex28 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        org.apache.commons.math.complex.Complex complex36 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex36.subtract(complex40);
        boolean boolean43 = complex36.isNaN();
        org.apache.commons.math.complex.Complex complex44 = complex36.log();
        org.apache.commons.math.complex.Complex complex45 = complex29.add(complex36);
        org.apache.commons.math.complex.Complex complex46 = complex29.exp();
        org.apache.commons.math.complex.Complex complex47 = complex29.sqrt();
        double double48 = complex47.abs();
        org.apache.commons.math.complex.Complex complex49 = complex18.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex16.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer49.inversetransform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 3.0296757004818433d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer44.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform2(complexArray72);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(univariateRealFunction74, 1.306932828523934d, (-2.05309903558876d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.306932828523934, -2.05309903558876]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        java.lang.Object obj33 = null;
        boolean boolean34 = complex32.equals(obj33);
        org.apache.commons.math.complex.Complex complex35 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex39.sin();
        org.apache.commons.math.complex.Complex complex42 = complex41.acos();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex32.pow(complex44);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        double[] doubleArray50 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.transform2(doubleArray50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray51);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray51, throwable53);
        java.lang.String str55 = mathException54.getPattern();
        java.lang.Object[] objArray56 = mathException54.getArguments();
        mathException26.addSuppressed((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray59 = mathException58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = mathException58.getSuppressed();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray60);
        java.lang.String str62 = mathException61.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str62, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-2.4698520192911105E-5d), (-9.975031327880009d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-2.4698520192911105E-5, -9.975031327880009]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(18491.78033459865d, 10.693147180349666d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [18491.78033459865, 10.693147180349666]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        boolean boolean13 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex1.add(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        double double18 = complex17.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.8373830985134536d) + "'", double18 == (-0.8373830985134536d));
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        double double15 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex11.subtract(complex27);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex11.add(complex42);
        boolean boolean44 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex45.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex11.add(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        double double67 = complex66.abs();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.negate();
        org.apache.commons.math.complex.Complex complex73 = complex71.acos();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex66.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.negate();
        org.apache.commons.math.complex.Complex complex77 = complex74.cos();
        org.apache.commons.math.complex.Complex complex78 = complex74.sin();
        org.apache.commons.math.complex.Complex complex79 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex48.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex80.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.566370623987466d + "'", double15 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.035834395863998524d + "'", double67 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-2.973988443733308E-6d), 13.018489601050195d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.0077076126157685d, (double) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        double[] doubleArray40 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.transform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        double[] doubleArray80 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer59.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer42.transform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer19.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, (-2.4698520192911105E-5d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(complexArray85);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, 0.2876048451616606d, 148.4131591025766d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex31 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex24.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.acos();
        org.apache.commons.math.complex.Complex complex39 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex40 = complex33.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex39.tanh();
        double double43 = complex39.getReal();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex47.acos();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex53.asin();
        org.apache.commons.math.complex.Complex complex56 = complex53.atan();
        org.apache.commons.math.complex.Complex complex57 = complex47.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt1z();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex67.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex67.acos();
        org.apache.commons.math.complex.Complex complex70 = complex67.acos();
        org.apache.commons.math.complex.Complex complex71 = complex63.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex73 = complex72.cos();
        org.apache.commons.math.complex.Complex complex74 = complex57.add(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex72.asin();
        org.apache.commons.math.complex.Complex complex76 = complex72.sqrt1z();
        org.apache.commons.math.complex.Complex complex77 = complex76.sin();
        org.apache.commons.math.complex.Complex complex78 = complex39.add(complex77);
        double double79 = complex39.getReal();
        org.apache.commons.math.complex.Complex complex80 = complex8.divide(complex39);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0097315985088704d + "'", double43 == 1.0097315985088704d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0097315985088704d + "'", double79 == 1.0097315985088704d);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.acos();
        org.apache.commons.math.complex.Complex complex22 = complex14.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex21.asin();
        org.apache.commons.math.complex.Complex complex26 = complex9.pow(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.atan();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.negate();
        org.apache.commons.math.complex.Complex complex34 = complex33.tan();
        java.lang.Object obj35 = null;
        boolean boolean36 = complex34.equals(obj35);
        org.apache.commons.math.complex.Complex complex37 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex34.tan();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.asin();
        org.apache.commons.math.complex.Complex complex45 = complex42.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex46.atan();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex50.sin();
        org.apache.commons.math.complex.Complex complex53 = complex34.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex27.multiply(complex52);
        double double55 = complex27.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.39285467439899224d) + "'", double55 == (-0.39285467439899224d));
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        double[] doubleArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray46, (double) (byte) 10);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, 3.368901671590452d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.207225561266586, 179.1681592969552]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.207225561266586, 179.1681592969552]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.207225561266586, 179.1681592969552]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.207225561266586, 179.1681592969552]");
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex48.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        org.apache.commons.math.complex.Complex complex51 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex32.add(complex48);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex56.asin();
        org.apache.commons.math.complex.Complex complex59 = complex56.atan();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex59.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex73.subtract(complex76);
        boolean boolean79 = complex67.equals((java.lang.Object) complex78);
        double double80 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex84.negate();
        org.apache.commons.math.complex.Complex complex86 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex87 = complex67.subtract(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex67.sin();
        org.apache.commons.math.complex.Complex complex89 = complex32.divide(complex67);
        double double90 = complex32.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2.356194490192345d + "'", double90 == 2.356194490192345d);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61, throwable63);
        java.lang.String str65 = mathException64.getPattern();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        mathException36.addSuppressed((java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException64);
        mathException9.addSuppressed((java.lang.Throwable) mathException64);
        java.lang.Object[] objArray70 = mathException64.getArguments();
        java.lang.Throwable[] throwableArray71 = mathException64.getSuppressed();
        java.lang.Object[] objArray72 = mathException64.getArguments();
        java.lang.Object[] objArray73 = mathException64.getArguments();
        java.lang.String str74 = mathException64.getPattern();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer35.inversetransform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer27.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer27.inversetransform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer61.transform(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer61.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer27.inversetransform(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 10.0f);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, 22026.465794806718d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform(doubleArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform(univariateRealFunction89, 7.717623508000023E-5d, 18491.78033459865d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[220264.65794806718, 3.2690173724721108E7]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[220264.65794806718, 3.2690173724721108E7]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[220264.65794806718, 3.2690173724721108E7]");
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        boolean boolean18 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex17.sin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer41.inversetransform(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray67);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 3.0296757004818433d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.exp();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray83 = new org.apache.commons.math.complex.Complex[] { complex82 };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer77.transform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 7.123309922655306E-6d);
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, (-0.0884245248208663d));
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform(complexArray86);
        double[] doubleArray91 = new double[] {};
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, 1.0077076126157685d);
        double[] doubleArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray93, 0.029663027718219624d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform(doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[3.0296757004818433, 449.64374176482204]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[3.0296757004818433, 449.64374176482204]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", objArray49, throwable50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray47, throwable50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer7.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer54.inversetransform(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer7.inversetransform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform(univariateRealFunction77, (-2.973988443733308E-6d), (-2.05309903558876d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-2.973988443733308E-6, -2.05309903558876]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-9247.503074114662d), (double) 10);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-9.408602041294962E-10d), (-3.8093789046474835E-5d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-9.408602041294962E-10, -3.8093789046474835E-5]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.tan();
        java.lang.Object obj21 = null;
        boolean boolean22 = complex20.equals(obj21);
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex20.tan();
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cos();
        org.apache.commons.math.complex.Complex complex40 = complex37.sinh();
        double double41 = complex37.getReal();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        org.apache.commons.math.complex.Complex complex48 = complex46.acos();
        org.apache.commons.math.complex.Complex complex49 = complex42.pow(complex48);
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex48.pow(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex37.subtract(complex53);
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.acos();
        org.apache.commons.math.complex.Complex complex61 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex61.subtract(complex65);
        org.apache.commons.math.complex.Complex complex69 = complex37.add(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex69.atan();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        org.apache.commons.math.complex.Complex complex72 = complex20.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex13.pow(complex72);
        boolean boolean74 = complex73.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2.566370623987466d + "'", double41 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        double[] doubleArray55 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer34.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer34.inversetransform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer29.inversetransform2(doubleArray60);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray60, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex86 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex87 = complex86.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray89 = new org.apache.commons.math.complex.Complex[] { complex88 };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer83.transform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray89, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer75.inversetransform(complexArray92);
        org.apache.commons.math.complex.Complex[] complexArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray92, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer70.transform2(complexArray95);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray95);
        org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.transform2(complexArray95);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-0.03563670930070898, -5.288956607338394]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-0.03563670930070898, -5.288956607338394]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray98);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.transform2(univariateRealFunction34, (-3.342308207562602d), 22584.772424365518d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49, throwable51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.String str54 = mathException52.getPattern();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = mathException56.getSuppressed();
        boolean boolean59 = complex13.equals((java.lang.Object) mathException56);
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj63 = new java.lang.Object();
        boolean boolean64 = complex62.equals(obj63);
        org.apache.commons.math.complex.Complex complex65 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex13.pow(complex65);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.sinh();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex81.sinh();
        org.apache.commons.math.complex.Complex complex83 = complex81.acos();
        org.apache.commons.math.complex.Complex complex84 = complex81.acos();
        org.apache.commons.math.complex.Complex complex85 = complex77.divide(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.cos();
        org.apache.commons.math.complex.Complex complex87 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex88 = complex84.asin();
        org.apache.commons.math.complex.Complex complex89 = complex84.negate();
        double double90 = complex89.abs();
        org.apache.commons.math.complex.Complex complex91 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex92 = complex91.atan();
        double double93 = complex91.abs();
        org.apache.commons.math.complex.Complex complex94 = complex91.negate();
        org.apache.commons.math.complex.Complex complex95 = complex89.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex95.sqrt1z();
        org.apache.commons.math.complex.Complex complex97 = complex72.divide(complex96);
        org.apache.commons.math.complex.Complex complex98 = complex65.add(complex72);
        org.apache.commons.math.complex.Complex complex99 = complex72.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.324062088703297d + "'", double90 == 10.324062088703297d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex28.acos();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        double double38 = complex37.abs();
        org.apache.commons.math.complex.Complex complex39 = complex37.cos();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex39.atan();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex50.sinh();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex57 = complex55.acos();
        org.apache.commons.math.complex.Complex complex58 = complex55.acos();
        org.apache.commons.math.complex.Complex complex59 = complex51.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.cos();
        org.apache.commons.math.complex.Complex complex61 = complex45.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex39.pow(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex69 = complex67.asin();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt1z();
        boolean boolean71 = complex70.isNaN();
        org.apache.commons.math.complex.Complex complex72 = complex60.subtract(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex28.divide(complex70);
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        double double79 = complex78.abs();
        org.apache.commons.math.complex.Complex complex80 = complex78.exp();
        org.apache.commons.math.complex.Complex complex81 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex78.asin();
        org.apache.commons.math.complex.Complex complex83 = complex70.divide(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex70.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 22026.465794806718d + "'", double38 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 148.4131591025766d + "'", double79 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer2.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer36.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer36.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer2.inversetransform(doubleArray54);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException60);
        java.lang.String str62 = mathException61.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str62, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.pow(complex11);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex16 = complex12.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex23.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        double double33 = complex32.abs();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex32.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex49.subtract(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex52.negate();
        org.apache.commons.math.complex.Complex complex56 = complex45.multiply(complex55);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        boolean boolean61 = complex59.isInfinite();
        org.apache.commons.math.complex.Complex complex62 = complex56.pow(complex59);
        org.apache.commons.math.complex.Complex complex63 = complex59.atan();
        org.apache.commons.math.complex.Complex complex64 = complex32.add(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex12.pow(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.acos();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex69.log();
        org.apache.commons.math.complex.Complex complex72 = complex69.conjugate();
        org.apache.commons.math.complex.Complex complex73 = complex69.exp();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj77 = new java.lang.Object();
        boolean boolean78 = complex76.equals(obj77);
        org.apache.commons.math.complex.Complex complex79 = complex76.sinh();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.sin();
        org.apache.commons.math.complex.Complex complex85 = complex84.acos();
        org.apache.commons.math.complex.Complex complex86 = complex76.add(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex73.multiply(complex86);
        org.apache.commons.math.complex.Complex complex89 = complex86.conjugate();
        org.apache.commons.math.complex.Complex complex90 = complex63.multiply(complex86);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.035834395863998524d + "'", double33 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex23.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex42.tan();
        org.apache.commons.math.complex.Complex complex44 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex31.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex16.divide(complex31);
        org.apache.commons.math.complex.Complex complex47 = complex46.acos();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex58.acos();
        org.apache.commons.math.complex.Complex complex61 = complex54.pow(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex52.subtract(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.tanh();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex63.asin();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex63.add(complex66);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.negate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = complex70.pow(complex76);
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex81 = complex80.negate();
        org.apache.commons.math.complex.Complex complex82 = complex76.pow(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex63.pow(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex46.divide(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer57.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer71.transform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer57.transform2(doubleArray75);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(doubleArray75);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (-0.03563670930070898d));
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) '#');
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-0.0, -0.0]");
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = complex18.equals(obj19);
        org.apache.commons.math.complex.Complex complex21 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex18.add(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex33.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        org.apache.commons.math.complex.Complex complex40 = complex38.cos();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex44.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.negate();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        double double57 = complex56.abs();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.acos();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex56.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.negate();
        boolean boolean67 = complex40.equals((java.lang.Object) complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex68.sin();
        org.apache.commons.math.complex.Complex complex71 = complex28.add(complex68);
        double double72 = complex28.abs();
        org.apache.commons.math.complex.Complex complex73 = complex28.atan();
        org.apache.commons.math.complex.Complex complex74 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex75 = complex14.subtract(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.atan();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.035834395863998524d + "'", double57 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer14.inversetransform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer43.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer43.inversetransform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer14.inversetransform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform(doubleArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, (-9247.503074114662d), (-1.6822396823040624E-9d), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        boolean boolean26 = complex14.equals((java.lang.Object) complex25);
        double double27 = complex14.getImaginary();
        double double28 = complex14.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform2(doubleArray38);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray38, 0.035834395863998524d);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform2(doubleArray44);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(univariateRealFunction46, 0.7866481568871084d, 0.0d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7866481568871084, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        double double15 = complex12.abs();
        org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        org.apache.commons.math.complex.Complex complex29 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex27.exp();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex34.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.negate();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex37.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        double double47 = complex46.abs();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex51.acos();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex46.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.asin();
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex58.acos();
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex27.pow(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex12.add(complex61);
        boolean boolean63 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex64 = complex12.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.142135623730951d + "'", double15 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.035834395863998524d + "'", double47 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.acos();
        org.apache.commons.math.complex.Complex complex22 = complex14.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex21.asin();
        org.apache.commons.math.complex.Complex complex26 = complex9.pow(complex25);
        double double27 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex26.conjugate();
        double double29 = complex26.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.548306907193979d) + "'", double27 == (-0.548306907193979d));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.6091793738172092d) + "'", double29 == (-0.6091793738172092d));
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        boolean boolean25 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex26 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex35.acos();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex44.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.negate();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex38.multiply(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex26.subtract(complex54);
        boolean boolean58 = complex57.isInfinite();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer24.transform(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray89 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer86.inversetransform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer85.transform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer66.inversetransform2(complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer1.inversetransform(complexArray92);
        org.apache.commons.math.complex.Complex[] complexArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray92, 1.0d);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray95);
        java.lang.Class<?> wildcardClass97 = mathException96.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex6.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex39.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex42.negate();
        org.apache.commons.math.complex.Complex complex46 = complex42.asin();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = complex42.multiply(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex42.sqrt1z();
        org.apache.commons.math.complex.Complex complex55 = complex54.cos();
        org.apache.commons.math.complex.Complex complex56 = complex34.subtract(complex54);
        java.lang.Class<?> wildcardClass57 = complex54.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-11982.862390657456d) + "'", double52 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.sinh();
        double double19 = complex15.getReal();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        org.apache.commons.math.complex.Complex complex27 = complex20.pow(complex26);
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex26.pow(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex15.subtract(complex31);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.acos();
        org.apache.commons.math.complex.Complex complex39 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex39.subtract(complex43);
        org.apache.commons.math.complex.Complex complex47 = complex15.add(complex46);
        boolean boolean48 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex15.add(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex2.add(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex59.subtract(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex62.negate();
        org.apache.commons.math.complex.Complex complex66 = complex62.tanh();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sin();
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex72.tanh();
        org.apache.commons.math.complex.Complex complex74 = complex66.subtract(complex73);
        double double75 = complex74.getReal();
        org.apache.commons.math.complex.Complex complex76 = complex55.add(complex74);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.566370623987466d + "'", double19 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.asin();
        org.apache.commons.math.complex.Complex complex10 = complex7.asin();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex11.divide(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex23.tan();
        org.apache.commons.math.complex.Complex complex29 = complex23.cos();
        org.apache.commons.math.complex.Complex complex30 = complex23.asin();
        org.apache.commons.math.complex.Complex complex31 = complex23.asin();
        org.apache.commons.math.complex.Complex complex32 = complex10.subtract(complex23);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(doubleArray52);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, (double) 10.0f);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 22026.465794806718d);
        double[] doubleArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray60, (-0.03563670930070898d));
        double[] doubleArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 10.025031171631717d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-78691.55821672615, -1.1678862749648647E7]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-78691.55821672615, -1.1678862749648647E7]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-78691.55821672615, -1.1678862749648647E7]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-78691.55821672615, -1.1678862749648647E7]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-78691.55821672615, -1.1678862749648647E7]");
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex21.acos();
        org.apache.commons.math.complex.Complex complex24 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        boolean boolean28 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex29.pow(complex35);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.pow(complex40);
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex45 = complex41.divide(complex44);
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math.complex.Complex complex59 = complex52.pow(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex50.subtract(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.tanh();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex61.asin();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex61.add(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex45.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = complex26.pow(complex68);
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex72.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        double double76 = complex74.getImaginary();
        org.apache.commons.math.complex.Complex complex77 = complex74.acos();
        org.apache.commons.math.complex.Complex complex78 = complex26.pow(complex74);
        org.apache.commons.math.complex.Complex complex79 = complex11.subtract(complex26);
        org.apache.commons.math.complex.Complex complex80 = complex26.acos();
        boolean boolean81 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex82 = complex26.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-5991.431207677988d) + "'", double76 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer26.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer3.transform2(complexArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException68);
        java.lang.String str71 = mathException68.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str71, "org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        boolean boolean54 = complex9.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1.0f, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex26.divide(complex34);
        boolean boolean38 = complex13.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex43.atan();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex13.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex13.cos();
        org.apache.commons.math.complex.Complex complex48 = complex3.pow(complex13);
        org.apache.commons.math.complex.Complex complex49 = complex3.asin();
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex31 = complex26.divide(complex30);
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex35.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex31.subtract(complex38);
        org.apache.commons.math.complex.Complex complex44 = complex38.asin();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex20.add(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer34.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform2(doubleArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.transform2(univariateRealFunction79, (double) (byte) 100, (-2.973988443733308E-6d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex28.add(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex14.divide(complex35);
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex0.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.tan();
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer34.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, 0.035834395863998524d);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(doubleArray93);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.transform2(univariateRealFunction95, (double) 100L, (-3.1308192769708842d), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, -3.1308192769708842]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray94);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-9241.894022087909d), 0.17833323080676133d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        boolean boolean14 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.exp();
        double double22 = complex18.abs();
        org.apache.commons.math.complex.Complex complex23 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex18);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex35 = complex31.asin();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex31.multiply(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        boolean boolean45 = complex43.isNaN();
        org.apache.commons.math.complex.Complex complex46 = complex18.divide(complex43);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.142135623730951d + "'", double22 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-11982.862390657456d) + "'", double41 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        double double26 = complex24.getReal();
        org.apache.commons.math.complex.Complex complex27 = complex24.exp();
        org.apache.commons.math.complex.Complex complex28 = complex13.add(complex24);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex40.acos();
        boolean boolean44 = complex43.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex32.add(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex24.pow(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.negate();
        org.apache.commons.math.complex.Complex complex53 = complex50.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex64 = complex62.acos();
        org.apache.commons.math.complex.Complex complex65 = complex62.acos();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex69 = complex67.tanh();
        org.apache.commons.math.complex.Complex complex70 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex50.add(complex67);
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex24.divide(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex24.asin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.12194549221161d + "'", double26 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-5991.431207677988d) + "'", double42 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer23.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray66);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform(univariateRealFunction68, 0.5950815058523973d, (-1.30704906996823d), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.5950815058523973, -1.30704906996823]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray20, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer6.inversetransform(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer1.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer28.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer42.inversetransform(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer28.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer1.inversetransform2(complexArray71);
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", objArray75, throwable76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray72, (java.lang.Throwable) mathException77);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) ' ', 0.9999928750078377d);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer14.inversetransform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform(complexArray42);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform(univariateRealFunction44, 3.368901671590452d, 1.7205072694509285d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.String str30 = mathException28.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray33 = mathException32.getArguments();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray33);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        double[] doubleArray52 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.transform2(doubleArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray53);
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray53, throwable55);
        java.lang.String str57 = mathException56.getPattern();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        mathException27.addSuppressed((java.lang.Throwable) mathException56);
        java.lang.String str60 = mathException27.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.math.MathException: " + "'", str60, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.342308207562617d, 14.142135623730951d);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.2113139220927565d, 4.810294133680568d);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.divide(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex12.subtract(complex25);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex25.divide(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex3.pow(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex39.acos();
        org.apache.commons.math.complex.Complex complex44 = complex39.acos();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj48 = new java.lang.Object();
        boolean boolean49 = complex47.equals(obj48);
        org.apache.commons.math.complex.Complex complex50 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.negate();
        org.apache.commons.math.complex.Complex complex56 = complex54.asin();
        org.apache.commons.math.complex.Complex complex57 = complex54.atan();
        org.apache.commons.math.complex.Complex complex58 = complex57.negate();
        org.apache.commons.math.complex.Complex complex59 = complex58.acos();
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex50.subtract(complex60);
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex69 = complex68.asin();
        org.apache.commons.math.complex.Complex complex70 = complex68.sin();
        org.apache.commons.math.complex.Complex complex71 = complex60.pow(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        boolean boolean73 = complex39.equals((java.lang.Object) complex71);
        double double74 = complex71.getReal();
        boolean boolean75 = complex71.isNaN();
        double double76 = complex71.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.4654608065165322d + "'", double74 == 1.4654608065165322d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.17047023159252045d + "'", double76 == 0.17047023159252045d);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex24.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex30.tanh();
        double double34 = complex30.getReal();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        org.apache.commons.math.complex.Complex complex40 = complex38.acos();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.asin();
        org.apache.commons.math.complex.Complex complex47 = complex44.atan();
        org.apache.commons.math.complex.Complex complex48 = complex38.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex58.sinh();
        org.apache.commons.math.complex.Complex complex60 = complex58.acos();
        org.apache.commons.math.complex.Complex complex61 = complex58.acos();
        org.apache.commons.math.complex.Complex complex62 = complex54.divide(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex64 = complex63.cos();
        org.apache.commons.math.complex.Complex complex65 = complex48.add(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.asin();
        org.apache.commons.math.complex.Complex complex67 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = complex67.sin();
        org.apache.commons.math.complex.Complex complex69 = complex30.add(complex68);
        double double70 = complex69.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0097315985088704d + "'", double34 == 1.0097315985088704d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        double[] doubleArray40 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.transform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", objArray61, throwable62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray59, throwable62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer19.inversetransform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer19.inversetransform2(complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform(complexArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform(univariateRealFunction89, (-5991.431182979468d), (-3.8093789046474835E-5d), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        double[] doubleArray69 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.transform2(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer48.inversetransform(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.inversetransform2(doubleArray74);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(univariateRealFunction78, 1.3793217114987104d, Double.NEGATIVE_INFINITY, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.3793217114987104, -Infinity]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex8.negate();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex1.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 5.497040179645271d, (-18481.78033459865d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [5.497040179645271, -18481.78033459865]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex18.tan();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        double double22 = complex21.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-11982.862390657456d) + "'", double16 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.8564882349995434E-9d + "'", double22 == 2.8564882349995434E-9d);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", objArray43, throwable44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray41, throwable44);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer1.inversetransform(complexArray41);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer50.inversetransform2(complexArray65);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray68, throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray66, throwable69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable69);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        mathException48.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        java.lang.Throwable[] throwableArray76 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray77 = mathException72.getSuppressed();
        java.lang.String str78 = mathException72.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.apache.commons.math.MathException" + "'", str78, "org.apache.commons.math.MathException");
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(6.525012184105979d, (double) 100.0f);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex2.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        double double11 = complex10.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        org.apache.commons.math.complex.Complex complex54 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex54.tanh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.atan();
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex61.asin();
        org.apache.commons.math.complex.Complex complex64 = complex58.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex54.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex69.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt1z();
        org.apache.commons.math.complex.Complex complex72 = complex71.sinh();
        org.apache.commons.math.complex.Complex complex73 = complex71.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex71.tan();
        org.apache.commons.math.complex.Complex complex75 = complex74.negate();
        org.apache.commons.math.complex.Complex complex76 = complex54.add(complex74);
        double double77 = complex54.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-2.0333957674195224E-9d) + "'", double77 == (-2.0333957674195224E-9d));
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer11.inversetransform2(complexArray26);
        double[] doubleArray32 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer11.transform2(doubleArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray33);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray33, throwable35);
        java.lang.String str37 = mathException36.getPattern();
        java.lang.String str38 = mathException36.getPattern();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.lang.String str42 = mathException39.getPattern();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException39);
        mathException4.addSuppressed((java.lang.Throwable) mathException43);
        java.lang.String str45 = mathException43.getPattern();
        java.lang.Object[] objArray46 = mathException43.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str45, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex0.negate();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.acos();
        org.apache.commons.math.complex.Complex complex11 = complex0.multiply(complex10);
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.cos();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.negate();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        double double39 = complex38.abs();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex43.acos();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.negate();
        boolean boolean49 = complex22.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex50 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        double double67 = complex66.abs();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.negate();
        org.apache.commons.math.complex.Complex complex73 = complex71.acos();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex66.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex22.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex22.asin();
        double double79 = complex78.getReal();
        org.apache.commons.math.complex.Complex complex80 = complex0.multiply(complex78);
        org.apache.commons.math.complex.Complex complex81 = complex0.tan();
        org.apache.commons.math.complex.Complex complex82 = complex0.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-5991.431207677988d) + "'", double9 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.035834395863998524d + "'", double39 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.035834395863998524d + "'", double67 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        double double5 = complex2.getReal();
        boolean boolean6 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex2.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.apache.commons.math.complex.Complex complex14 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex7.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.tan();
        org.apache.commons.math.complex.Complex complex18 = complex7.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray26);
        double[] doubleArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, 3.0296757004818433d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        double[] doubleArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray32, (-2.679053673795176E-4d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-8.116663815783856E-4, -0.1204619718274056]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-8.116663815783856E-4, -0.1204619718274056]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-8.116663815783856E-4, -0.1204619718274056]");
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.0296757004818433d + "'", double17 == 3.0296757004818433d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex6.equals((java.lang.Object) complex17);
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex26.atan();
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        double double31 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex32.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex41.subtract(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex44.negate();
        org.apache.commons.math.complex.Complex complex48 = complex44.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex53.subtract(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex56.negate();
        org.apache.commons.math.complex.Complex complex60 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex60.sin();
        org.apache.commons.math.complex.Complex complex62 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex62.atan();
        org.apache.commons.math.complex.Complex complex64 = complex63.tan();
        org.apache.commons.math.complex.Complex complex65 = complex48.multiply(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex36.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex21.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.atan();
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex73.asin();
        org.apache.commons.math.complex.Complex complex76 = complex70.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex70.acos();
        org.apache.commons.math.complex.Complex complex78 = complex77.sinh();
        org.apache.commons.math.complex.Complex complex79 = complex67.add(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex78.cos();
        double double81 = complex78.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 14.142135623730951d + "'", double19 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-7.123309922588602E-6d) + "'", double31 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform2(doubleArray38);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray38, 0.035834395863998524d);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        double[] doubleArray67 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.transform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer46.inversetransform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.inversetransform(doubleArray72);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform(univariateRealFunction76, 42.12194549221161d, 2.763130833716387d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [42.12194549221161, 2.763130833716387]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex12.tan();
        boolean boolean18 = complex17.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex8.pow(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.negate();
        boolean boolean19 = complex14.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex20 = complex5.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex20.tan();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-10.693147180349666d) + "'", double7 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform2(complexArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex28.add(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex14.divide(complex35);
        org.apache.commons.math.complex.Complex complex41 = complex35.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        org.apache.commons.math.complex.Complex complex27 = complex24.acos();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.cos();
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex15.add(complex32);
        boolean boolean34 = complex33.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11020.828705888358d, (-1.0947552508950837E-7d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11020.828705888358, -1.0947552508950837E-7]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.5430806348152437d, 0.45407153819929014d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.5430806348152437, 0.45407153819929014]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        double[] doubleArray44 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer23.transform2(doubleArray44);
        double[] doubleArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (double) 100L);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer57.inversetransform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer49.transform2(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer49.inversetransform(doubleArray79);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 100);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 11.920364119878563d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.inversetransform(doubleArray84);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, (-9240.89018634622d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.1015477581305942E7, -1.6348418268652244E9]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.1015477581305942E7, -1.6348418268652244E9]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.1015477581305942E7, -1.6348418268652244E9]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.1015477581305942E7, -1.6348418268652244E9]");
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0.0f, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex complex3 = complex2.asin();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform2(doubleArray67);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 0.035834395863998524d);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 3.342308207562617d);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(doubleArray75);
        double[] doubleArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex20.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex20.atan();
        org.apache.commons.math.complex.Complex complex30 = complex20.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex31.pow(complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex37.pow(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex37.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.cos();
        org.apache.commons.math.complex.Complex complex46 = complex30.subtract(complex44);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.divide(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex12.subtract(complex25);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex25.divide(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex3.pow(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex39.acos();
        org.apache.commons.math.complex.Complex complex44 = complex39.acos();
        double double45 = complex39.abs();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.asin();
        org.apache.commons.math.complex.Complex complex52 = complex49.atan();
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.acos();
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt1z();
        double double56 = complex53.getReal();
        org.apache.commons.math.complex.Complex complex57 = complex53.acos();
        org.apache.commons.math.complex.Complex complex58 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex62.subtract(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex65.negate();
        org.apache.commons.math.complex.Complex complex69 = complex65.asin();
        boolean boolean70 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.negate();
        org.apache.commons.math.complex.Complex complex76 = complex74.asin();
        org.apache.commons.math.complex.Complex complex77 = complex74.atan();
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex65.add(complex77);
        org.apache.commons.math.complex.Complex complex81 = complex65.log();
        org.apache.commons.math.complex.Complex complex82 = complex53.divide(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex39.multiply(complex53);
        double double84 = complex53.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1066.7538428229336d + "'", double45 == 1066.7538428229336d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.570758233006406d + "'", double56 == 1.570758233006406d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.570758233006406d + "'", double84 == 1.570758233006406d);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex35.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex30.divide(complex38);
        boolean boolean42 = complex17.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex9.pow(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = complex49.equals(obj50);
        org.apache.commons.math.complex.Complex complex52 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex49.negate();
        org.apache.commons.math.complex.Complex complex54 = complex49.acos();
        org.apache.commons.math.complex.Complex complex55 = complex54.cos();
        org.apache.commons.math.complex.Complex complex56 = complex46.subtract(complex55);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.sinh();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex65.acos();
        org.apache.commons.math.complex.Complex complex68 = complex65.acos();
        org.apache.commons.math.complex.Complex complex69 = complex61.divide(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex61.sqrt1z();
        boolean boolean71 = complex70.isInfinite();
        org.apache.commons.math.complex.Complex complex72 = complex70.negate();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex76.subtract(complex79);
        org.apache.commons.math.complex.Complex complex82 = complex79.negate();
        org.apache.commons.math.complex.Complex complex85 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex79.divide(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        double double89 = complex88.abs();
        org.apache.commons.math.complex.Complex complex92 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex93 = complex92.exp();
        org.apache.commons.math.complex.Complex complex94 = complex93.negate();
        org.apache.commons.math.complex.Complex complex95 = complex93.acos();
        org.apache.commons.math.complex.Complex complex96 = complex95.sqrt();
        org.apache.commons.math.complex.Complex complex97 = complex88.multiply(complex96);
        org.apache.commons.math.complex.Complex complex98 = complex72.multiply(complex97);
        org.apache.commons.math.complex.Complex complex99 = complex46.pow(complex72);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.035834395863998524d + "'", double89 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.inversetransform(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer23.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray61);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray18, 0.0d);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray23, (double) 1.0f);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]");
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex14);
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        double double26 = complex24.getImaginary();
        boolean boolean27 = complex17.equals((java.lang.Object) double26);
        double double28 = complex17.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-5991.431207677988d) + "'", double16 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-2.4698520192911105E-5d) + "'", double26 == (-2.4698520192911105E-5d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 11012.24179994962d + "'", double28 == 11012.24179994962d);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer29.inversetransform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer29.transform(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform2(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 0.035834395863998524d);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform2(doubleArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer80.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer79.transform2(doubleArray83);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, 0.035834395863998524d);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, 3.342308207562617d);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, (-10.693147180349666d));
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(doubleArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.transform(univariateRealFunction93, 0.9999999995794401d, 3.368901671590452d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.2807139114424713, -190.0747975037947]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.2807139114424713, -190.0747975037947]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.2807139114424713, -190.0747975037947]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.2807139114424713, -190.0747975037947]");
        org.junit.Assert.assertNotNull(complexArray92);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray60, throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray58, throwable61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.inversetransform2(doubleArray73);
        double[] doubleArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 18491.78033459865d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 18491.783038502515d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.2253427967725959E7, 1.8185699545260744E9]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.2253427967725959E7, 1.8185699545260744E9]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.2253427967725959E7, 1.8185699545260744E9]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.2253427967725959E7, 1.8185699545260744E9]");
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex43.acos();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex48.subtract(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex43.divide(complex51);
        boolean boolean55 = complex30.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex58.sinh();
        org.apache.commons.math.complex.Complex complex61 = complex60.atan();
        org.apache.commons.math.complex.Complex complex62 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex30.pow(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex30.cos();
        org.apache.commons.math.complex.Complex complex65 = complex20.pow(complex30);
        org.apache.commons.math.complex.Complex complex66 = complex20.acos();
        org.apache.commons.math.complex.Complex complex67 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex69 = complex68.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer1.inversetransform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer30.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer49.inversetransform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer30.transform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray64);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray64);
        java.lang.Throwable[] throwableArray70 = mathException69.getSuppressed();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, (double) ' ');
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray77);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        boolean boolean11 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.asin();
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex6.add(complex18);
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        double double24 = complex23.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.9999999995794401d) + "'", double24 == (-0.9999999995794401d));
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray14 = mathException13.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException16);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer1.inversetransform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer30.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer49.inversetransform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer30.transform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray64);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray64);
        java.lang.Object[] objArray70 = mathException69.getArguments();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray70);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.MathException: " + "'", str20, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.tan();
        org.apache.commons.math.complex.Complex complex36 = complex19.pow(complex33);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex(22026.465794806718d, 0.0d);
        org.apache.commons.math.complex.Complex complex40 = complex36.divide(complex39);
        double double41 = complex36.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-11982.862390657456d) + "'", double16 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11992.862403001514d, 43.12194549221161d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11992.862403001514, 43.12194549221161]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray59, throwable60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray57, throwable60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer17.inversetransform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer64.transform(complexArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer64.transform2(doubleArray82);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, 0.0d);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer17.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.inversetransform(complexArray90);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform2(univariateRealFunction92, (-0.8696927693431208d), 1.0077076126157685d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex21.acos();
        org.apache.commons.math.complex.Complex complex24 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.cos();
        org.apache.commons.math.complex.Complex complex27 = complex24.sinh();
        double double28 = complex24.getReal();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex29.pow(complex35);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.pow(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex24.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex12.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex12.atan();
        org.apache.commons.math.complex.Complex complex47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex48 = complex12.pow(complex47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 42.12194549221161d + "'", double11 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.566370623987466d + "'", double28 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.035834395863998524d);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 0);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 9.728850659156027d);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 1.5707201399943767d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex15.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer39.transform(complexArray78);
        boolean boolean80 = complex37.equals((java.lang.Object) complexArray79);
        boolean boolean81 = complex15.equals((java.lang.Object) complexArray79);
        org.apache.commons.math.complex.Complex complex82 = complex11.pow(complex15);
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        double double84 = complex83.abs();
        org.apache.commons.math.complex.Complex complex85 = complex83.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.inversetransform(complexArray23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray23, throwable25);
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, (-990.0d));
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray28);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray28);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60, throwable62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer31.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform2(doubleArray78);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 0.035834395863998524d);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) 0);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform2(univariateRealFunction88, 6.525012184105979d, 1.1811876670244756d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        double double12 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex9.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        java.lang.Class<?> wildcardClass16 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 18491.78033459865d + "'", double12 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = complex10.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.divide(complex10);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.asin();
        org.apache.commons.math.complex.Complex complex31 = complex28.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        org.apache.commons.math.complex.Complex complex37 = complex10.add(complex36);
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex44.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.negate();
        org.apache.commons.math.complex.Complex complex51 = complex40.multiply(complex50);
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex58.negate();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        double double68 = complex67.abs();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex72.acos();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex67.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = complex75.asin();
        org.apache.commons.math.complex.Complex complex79 = complex40.add(complex75);
        org.apache.commons.math.complex.Complex complex80 = complex75.tan();
        org.apache.commons.math.complex.Complex complex81 = complex80.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex37.pow(complex81);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-7.123309922588602E-6d) + "'", double33 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.035834395863998524d + "'", double68 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.05226086543509898d, 1.0077076126157685d);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(doubleArray52);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, (double) 10.0f);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 22026.465794806718d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[220264.65794806718, 3.2690173724721108E7]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[220264.65794806718, 3.2690173724721108E7]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[220264.65794806718, 3.2690173724721108E7]");
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform(doubleArray41);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, 9240.89018634622d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[9240.89018634622, 1371469.7054756403]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[9240.89018634622, 1371469.7054756403]");
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.inversetransform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer61.transform2(complexArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform2(complexArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform2(univariateRealFunction90, 6.910110449651849E34d, (-0.8492018891820645d), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [6.910110449651849E34, -0.8492018891820645]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(3.0296757004818433d, (double) (byte) 100);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer17.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.inversetransform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer17.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform2(doubleArray59);
        double[] doubleArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer17.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, 0.035834395863998524d);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (double) 0);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer17.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.inversetransform(doubleArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.inversetransform(univariateRealFunction80, 6.092370434466807E-6d, 11013.232795482763d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform2(doubleArray67);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 0.035834395863998524d);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 3.342308207562617d);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(doubleArray75);
        double[] doubleArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex4.tan();
        org.apache.commons.math.complex.Complex complex9 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex14.sin();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        boolean boolean20 = complex10.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex21 = complex10.sin();
        org.apache.commons.math.complex.Complex complex22 = complex10.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer17.inversetransform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        double[] doubleArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray43, 10.324062088703297d);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray43, (-11982.862390657456d));
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        double[] doubleArray74 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer53.transform2(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer53.inversetransform(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform2(doubleArray79);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.inversetransform2(univariateRealFunction87, (-1.6822396823040624E-9d), 0.009048521180857947d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer23.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer23.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, (double) 10);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.inversetransform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, 42.12194549221161d);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform(complexArray68);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(univariateRealFunction73, 2.566370623987463d, 0.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        double[] doubleArray51 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.transform2(doubleArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52);
        mathException27.addSuppressed((java.lang.Throwable) mathException53);
        java.lang.Object[] objArray55 = mathException27.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.Object[] objArray57 = mathException27.getArguments();
        java.lang.String str58 = mathException27.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer0.transform(univariateRealFunction8, 22040.29691869634d, 9.999999991586744d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [22040.29691869634, 9.999999991586744]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        boolean boolean33 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex6.tan();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex43.subtract(complex46);
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        double double51 = complex48.abs();
        org.apache.commons.math.complex.Complex complex52 = complex39.multiply(complex48);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        boolean boolean56 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex57 = complex52.pow(complex55);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex62.acos();
        org.apache.commons.math.complex.Complex complex64 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex62.sqrt1z();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        org.apache.commons.math.complex.Complex complex72 = complex70.asin();
        org.apache.commons.math.complex.Complex complex73 = complex70.atan();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sin();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex73.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex65.multiply(complex81);
        org.apache.commons.math.complex.Complex complex85 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex86 = complex85.exp();
        org.apache.commons.math.complex.Complex complex87 = complex86.sin();
        org.apache.commons.math.complex.Complex complex88 = complex87.cosh();
        org.apache.commons.math.complex.Complex complex89 = complex65.divide(complex87);
        org.apache.commons.math.complex.Complex complex90 = complex87.tan();
        org.apache.commons.math.complex.Complex complex91 = complex90.sqrt1z();
        org.apache.commons.math.complex.Complex complex92 = complex52.divide(complex91);
        boolean boolean93 = complex92.isNaN();
        org.apache.commons.math.complex.Complex complex94 = complex35.pow(complex92);
        org.apache.commons.math.complex.Complex complex95 = complex94.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 22040.29691869634d + "'", double51 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 3.316142628692815d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray39);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        double double30 = complex29.abs();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex29.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.asin();
        org.apache.commons.math.complex.Complex complex41 = complex2.add(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex2.asin();
        org.apache.commons.math.complex.Complex complex43 = complex2.negate();
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.035834395863998524d + "'", double30 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.inversetransform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer24.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer38.inversetransform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer24.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer1.inversetransform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer69.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer69.transform2(doubleArray87);
        double[] doubleArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer1.inversetransform2(doubleArray87);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray93);
        java.lang.Throwable[] throwableArray95 = mathException94.getSuppressed();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex7.sqrt1z();
        double double10 = complex7.getReal();
        org.apache.commons.math.complex.Complex complex11 = complex7.acos();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.cos();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.negate();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        double double39 = complex38.abs();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex43.acos();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.negate();
        boolean boolean49 = complex22.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex50 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        double double67 = complex66.abs();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.negate();
        org.apache.commons.math.complex.Complex complex73 = complex71.acos();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex66.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex22.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex22.atan();
        boolean boolean79 = complex11.equals((java.lang.Object) complex22);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.570758233006406d + "'", double10 == 1.570758233006406d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.035834395863998524d + "'", double39 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.035834395863998524d + "'", double67 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray60, throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray58, throwable61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex78 };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer73.transform2(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer65.inversetransform2(complexArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer65.inversetransform(complexArray86);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray86);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform(complexArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(univariateRealFunction91, (double) (short) -1, (-0.9912858099911315d), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.asin();
        org.apache.commons.math.complex.Complex complex21 = complex18.atan();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex21.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex13.multiply(complex29);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex13.divide(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.log();
        org.apache.commons.math.complex.Complex complex39 = complex35.exp();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex56 = complex55.atan();
        double double57 = complex55.getReal();
        org.apache.commons.math.complex.Complex complex58 = complex50.subtract(complex55);
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.negate();
        org.apache.commons.math.complex.Complex complex64 = complex62.asin();
        org.apache.commons.math.complex.Complex complex65 = complex62.atan();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex66.acos();
        org.apache.commons.math.complex.Complex complex68 = complex66.sqrt1z();
        org.apache.commons.math.complex.Complex complex69 = complex55.pow(complex66);
        org.apache.commons.math.complex.Complex complex70 = complex66.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex66.exp();
        org.apache.commons.math.complex.Complex complex72 = complex43.subtract(complex66);
        boolean boolean73 = complex35.equals((java.lang.Object) complex66);
        org.apache.commons.math.complex.Complex complex74 = complex66.cos();
        org.apache.commons.math.complex.Complex complex75 = complex5.subtract(complex74);
        double double76 = complex74.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9240.89014825243d) + "'", double57 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4.539992974344226E-5d + "'", double76 == 4.539992974344226E-5d);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex6.divide(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex4.pow(complex11);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex25.acos();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.cos();
        org.apache.commons.math.complex.Complex complex31 = complex15.subtract(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex4.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.tan();
        boolean boolean35 = complex34.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray22, throwable23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray20, throwable23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable23);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Object[] objArray28 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException31);
        java.lang.Object[] objArray35 = mathException31.getArguments();
        java.lang.Class<?> wildcardClass36 = mathException31.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        double[] doubleArray72 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.transform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer34.transform(complexArray73);
        boolean boolean75 = complex33.equals((java.lang.Object) fastFourierTransformer34);
        boolean boolean76 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex77 = complex33.tan();
        org.apache.commons.math.complex.Complex complex78 = complex15.multiply(complex33);
        org.apache.commons.math.complex.Complex complex79 = complex7.multiply(complex78);
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex82.sinh();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        double double86 = complex84.getImaginary();
        org.apache.commons.math.complex.Complex complex87 = complex84.acos();
        boolean boolean88 = complex87.isInfinite();
        org.apache.commons.math.complex.Complex complex89 = complex87.sqrt1z();
        org.apache.commons.math.complex.Complex complex90 = complex78.add(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex90.tanh();
        org.apache.commons.math.complex.Complex complex92 = complex91.acos();
        java.lang.Class<?> wildcardClass93 = complex91.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-5991.431207677988d) + "'", double86 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        double double16 = complex14.getReal();
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = complex14.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        boolean boolean21 = complex6.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        org.apache.commons.math.complex.Complex complex23 = complex22.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9240.89014825243d) + "'", double16 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex11 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.conjugate();
        double double13 = complex12.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 14.142135623730951d + "'", double13 == 14.142135623730951d);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        double[] doubleArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, 0.035834395863998524d);
        double[] doubleArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray35, 3.342308207562617d);
        double[] doubleArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray37, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(doubleArray39);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(univariateRealFunction41, (-10.693147180349666d), 0.09404213883274794d, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray40);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer4.inversetransform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer4.transform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer4.inversetransform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer4.transform(doubleArray56);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray63, (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray1, (java.lang.Throwable) mathException71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex10 = complex5.divide(complex9);
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex21 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex10.subtract(complex17);
        java.lang.Class<?> wildcardClass23 = complex22.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex16.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex8.add(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex15.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer39.transform(complexArray78);
        boolean boolean80 = complex37.equals((java.lang.Object) complexArray79);
        boolean boolean81 = complex15.equals((java.lang.Object) complexArray79);
        org.apache.commons.math.complex.Complex complex82 = complex11.pow(complex15);
        java.lang.Class<?> wildcardClass83 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.transform(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray47, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer27.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 100L);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 11766.272084123093d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(doubleArray80);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform(univariateRealFunction83, (-0.548306907193979d), 42.12194549221161d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        double[] doubleArray29 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer8.transform2(doubleArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray30);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray30, throwable32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer35.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer35.inversetransform(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer69.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer69.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer35.inversetransform(doubleArray87);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer1.transform2(doubleArray87);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray93, 0.975488763477673d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray96);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 3.0296757004818433d, 1.2113139220927565d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.0296757004818433, 1.2113139220927565]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer25.transform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer25.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer25.transform(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.inversetransform2(doubleArray66);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.inversetransform2(univariateRealFunction70, (-7.665522686975014d), 0.8492018891998457d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.negate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex14.add(complex27);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.570758233200585d + "'", double26 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer23.transform(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) 0.0f);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 1.55704023880809882E18d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        double double15 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex16.subtract(complex21);
        boolean boolean25 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex26 = complex6.pow(complex24);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-7.123309922588602E-6d) + "'", double15 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-5991.431207677988d) + "'", double23 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        double double8 = complex5.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex5.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(univariateRealFunction14, (-0.8696927693431208d), 0.05226086543509898d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        double[] doubleArray52 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.transform2(doubleArray52);
        double[] doubleArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform2(doubleArray55);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(univariateRealFunction57, (-3.1308192769708842d), 10.739407619444723d, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-0.035834395863998524, 1.8633885849279233, -0.035834395863998524, 1.8633885849279233]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-0.035834395863998524, 1.8633885849279233, -0.035834395863998524, 1.8633885849279233]");
        org.junit.Assert.assertNotNull(complexArray56);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        double[] doubleArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, 0.035834395863998524d);
        double[] doubleArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray35, 3.342308207562617d);
        double[] doubleArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray37, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(univariateRealFunction49, 7.123309922655306E-6d, (-2.0333957674195224E-9d), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [7.123309922655306E-6, -2.0333957674195224E-9]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        double double18 = complex16.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex11.subtract(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex3.subtract(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex3.log();
        double double22 = complex3.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9240.89014825243d) + "'", double18 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11013.232906666808d + "'", double22 == 11013.232906666808d);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        org.apache.commons.math.complex.Complex complex27 = complex26.tan();
        double double28 = complex27.getImaginary();
        boolean boolean29 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = complex27.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0077076126157685d + "'", double28 == 1.0077076126157685d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer0.inversetransform(univariateRealFunction37, 11766.272084123093d, 0.0d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11766.272084123093, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 100.0d);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (-0.9999999983177603d));
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform2(univariateRealFunction77, (double) 'a', (double) 0L, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [97.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex6.cosh();
        boolean boolean10 = complex6.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.negate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex18 = complex11.asin();
        org.apache.commons.math.complex.Complex complex19 = complex11.log();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex33.cos();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex19.add(complex37);
        double double40 = complex19.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.763130833716387d + "'", double40 == 2.763130833716387d);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        double[] doubleArray40 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.transform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer2.transform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer2.inversetransform(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67, (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException79);
        java.lang.Class<?> wildcardClass81 = mathException80.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        double[] doubleArray74 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer53.transform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer36.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer13.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer5.inversetransform(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform2(complexArray76);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform(univariateRealFunction82, 7628.527121079825d, (-4183987.6085661002d), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [7628.527121079825, -4183987.6085661002]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10.0f, 10.366472469977241d);
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = complex3.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        double[] doubleArray29 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer8.transform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer32.inversetransform2(complexArray47);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", objArray50, throwable51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray48, throwable51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer8.inversetransform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer55.inversetransform(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer8.inversetransform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer1.inversetransform2(complexArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray76);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        double double12 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex9.cosh();
        double double14 = complex9.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 18491.78033459865d + "'", double12 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 22040.29691869634d + "'", double14 == 22040.29691869634d);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        double[] doubleArray55 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer34.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer34.transform(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 1.5430806348152437d);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(univariateRealFunction73, 1.3351321324395033d, (-0.8414709838989786d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.3351321324395033, -0.8414709838989786]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13);
        double double17 = complex7.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-10.923444035404563d) + "'", double17 == (-10.923444035404563d));
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = complex22.equals(obj23);
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex22.add(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex37.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex48.subtract(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.negate();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex51.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        double double61 = complex60.abs();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex65.acos();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex60.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.negate();
        boolean boolean71 = complex44.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.tanh();
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex72.sin();
        org.apache.commons.math.complex.Complex complex75 = complex32.add(complex72);
        org.apache.commons.math.complex.Complex complex76 = complex18.add(complex72);
        java.lang.Class<?> wildcardClass77 = complex18.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.035834395863998524d + "'", double61 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex3.add(complex20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        double[] doubleArray49 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer28.transform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50, throwable52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.String str55 = mathException53.getPattern();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.String str59 = mathException57.getPattern();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException57);
        boolean boolean61 = complex3.equals((java.lang.Object) mathException57);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = complex13.equals(obj14);
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex10.subtract(complex17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer21.inversetransform2(complexArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", objArray39, throwable40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray37, throwable40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException(throwable40);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Object[] objArray45 = mathException43.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException48);
        boolean boolean50 = complex17.equals((java.lang.Object) mathException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException49);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-142.35883754318695d), 14.142135623730951d);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        boolean boolean16 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform2(doubleArray22);
        double[] doubleArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray22, 0.035834395863998524d);
        double[] doubleArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (double) 0);
        double[] doubleArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer1.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer32.inversetransform(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer32.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, (double) 10);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer1.inversetransform(complexArray70);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray70);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        double double10 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-2.566370623987466d) + "'", double10 == (-2.566370623987466d));
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex6.divide(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex4.pow(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.acos();
        org.apache.commons.math.complex.Complex complex34 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.asin();
        org.apache.commons.math.complex.Complex complex43 = complex40.atan();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math.complex.Complex complex49 = complex48.acos();
        org.apache.commons.math.complex.Complex complex50 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex43.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex35.multiply(complex51);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex35.divide(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex26.add(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex17.add(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt1z();
        org.apache.commons.math.complex.Complex complex63 = complex61.log();
        org.apache.commons.math.complex.Complex complex64 = complex61.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-0.7066198167699884d), 0.035834395863998524d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = complex19.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex13.add(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex28.asin();
        org.apache.commons.math.complex.Complex complex32 = complex28.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        double[] doubleArray6 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray3, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        double[] doubleArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray6, 10.0d);
        java.lang.Class<?> wildcardClass10 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-92408.9014825243, -1.3714696998220207E7]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-92408.9014825243, -1.3714696998220207E7]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-92408.9014825243, -1.3714696998220207E7]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.2511271623901931d), (-1.0231960311378805d));
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        boolean boolean16 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex27.atan();
        double double29 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex30 = complex22.subtract(complex27);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = complex27.pow(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex13.add(complex27);
        org.apache.commons.math.complex.Complex complex43 = complex7.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        java.lang.Class<?> wildcardClass45 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9240.89014825243d) + "'", double29 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex17.divide(complex27);
        double double29 = complex27.abs();
        boolean boolean30 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = complex10.multiply(complex27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform2(doubleArray36);
        boolean boolean39 = complex27.equals((java.lang.Object) fastFourierTransformer32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer40.transform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform2(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer40.transform2(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer32.inversetransform(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray77 = new org.apache.commons.math.complex.Complex[] { complex76 };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer71.transform2(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer63.inversetransform2(complexArray78);
        double[] doubleArray84 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer63.transform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer32.inversetransform2(complexArray85);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray90 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer87.inversetransform2(doubleArray90);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray93);
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer32.transform(doubleArray93);
        org.apache.commons.math.complex.Complex[] complexArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer32.transform2(complexArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 22040.29691869634d + "'", double29 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray95);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-0.6091793738172092d), 9.728850659156027d);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer15.inversetransform2(complexArray30);
        double[] doubleArray36 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer15.transform2(doubleArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63, throwable65);
        java.lang.String str67 = mathException66.getPattern();
        java.lang.Object[] objArray68 = mathException66.getArguments();
        mathException38.addSuppressed((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException66);
        mathException11.addSuppressed((java.lang.Throwable) mathException66);
        java.lang.Object[] objArray72 = mathException11.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", objArray72);
        java.lang.Throwable[] throwableArray74 = mathException73.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException73);
        java.lang.String str76 = mathException73.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.MathException: " + "'", str76, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-18491.78033459865d), (-0.04991641756298178d));
        double double3 = complex2.abs();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 18491.780334666022d + "'", double3 == 18491.780334666022d);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer11.inversetransform2(complexArray26);
        double[] doubleArray32 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer11.transform2(doubleArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray33);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray33, throwable35);
        java.lang.String str37 = mathException36.getPattern();
        java.lang.Throwable[] throwableArray38 = mathException36.getSuppressed();
        java.lang.String str39 = mathException36.getPattern();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer50.inversetransform2(complexArray65);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray68, throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray66, throwable69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable69);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.String str74 = mathException72.getPattern();
        java.lang.Object[] objArray75 = mathException72.getArguments();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException72);
        mathException40.addSuppressed((java.lang.Throwable) mathException72);
        java.lang.Throwable[] throwableArray78 = mathException72.getSuppressed();
        java.lang.String str79 = mathException72.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.math.MathException" + "'", str79, "org.apache.commons.math.MathException");
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer35.inversetransform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer35.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer1.inversetransform2(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray85 = new org.apache.commons.math.complex.Complex[] { complex84 };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer79.transform2(complexArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray76, (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex2.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex5.atan();
        org.apache.commons.math.complex.Complex complex9 = complex5.negate();
        org.apache.commons.math.complex.Complex complex10 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.complex.Complex complex29 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = complex28.exp();
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex17.multiply(complex32);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.tan();
        org.apache.commons.math.complex.Complex complex41 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex40.cos();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex51.acos();
        org.apache.commons.math.complex.Complex complex54 = complex51.acos();
        org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex56.acos();
        org.apache.commons.math.complex.Complex complex58 = complex42.pow(complex57);
        boolean boolean59 = complex23.equals((java.lang.Object) complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.sin();
        org.apache.commons.math.complex.Complex complex61 = complex58.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer25.transform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer25.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer25.transform(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.inversetransform2(doubleArray66);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray66, 1.0038738355039385d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0038738355039385, 148.98808726755982]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0038738355039385, 148.98808726755982]");
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex30.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray26, throwable27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray24, throwable27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable27);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Object[] objArray32 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray32);
        mathException3.addSuppressed((java.lang.Throwable) mathException33);
        java.lang.Object[] objArray35 = mathException3.getArguments();
        java.lang.Throwable[] throwableArray36 = mathException3.getSuppressed();
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.negate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex18 = complex11.asin();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.cos();
        double double34 = complex31.abs();
        org.apache.commons.math.complex.Complex complex35 = complex22.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex18.add(complex31);
        org.apache.commons.math.complex.Complex complex37 = complex31.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 22040.29691869634d + "'", double34 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        boolean boolean15 = complex14.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex30.multiply(complex38);
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex14.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex51.acos();
        org.apache.commons.math.complex.Complex complex54 = complex47.pow(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex54.tanh();
        org.apache.commons.math.complex.Complex complex56 = complex54.negate();
        org.apache.commons.math.complex.Complex complex57 = complex56.atan();
        org.apache.commons.math.complex.Complex complex58 = complex57.negate();
        org.apache.commons.math.complex.Complex complex59 = complex42.add(complex58);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.035834395863998524d + "'", double31 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        double double30 = complex29.abs();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex29.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.asin();
        org.apache.commons.math.complex.Complex complex41 = complex2.add(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex37.tan();
        double double43 = complex42.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.035834395863998524d + "'", double30 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9844510384605069d + "'", double43 == 0.9844510384605069d);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer34.inversetransform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer34.transform(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer5.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.035834395863998524d);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer5.transform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.transform(doubleArray82);
        double[] doubleArray90 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, 0.0d);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, (double) '#');
        double[] doubleArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray94, 14036.654899895804d);
        double[] doubleArray98 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray94, (-142.35883754318695d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.transform2(doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[0.0, -0.0, 0.0, -0.0, 0.0]");
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        boolean boolean25 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex26 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex20.cos();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.258918033329073d, (-10.0d));
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = complex2.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex2.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        double double18 = complex16.getImaginary();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.6704649792860586d + "'", double18 == 1.6704649792860586d);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!");
        java.lang.Object[] objArray5 = mathException4.getArguments();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer8.transform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray34, throwable35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray32, throwable35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable35);
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        java.lang.String str40 = mathException38.getPattern();
        java.lang.Object[] objArray41 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray14, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray5, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException43);
        java.lang.Object[] objArray45 = mathException43.getArguments();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex13.asin();
        boolean boolean16 = complex13.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.inversetransform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49, throwable51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray24, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, (-10.693147180349666d));
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer62.inversetransform2(complexArray77);
        double[] doubleArray83 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer62.transform2(doubleArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray84);
        java.lang.Throwable throwable86 = null;
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray84, throwable86);
        java.lang.String str88 = mathException87.getPattern();
        java.lang.Object[] objArray89 = mathException87.getArguments();
        java.lang.String str90 = mathException87.getPattern();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray24, (java.lang.Throwable) mathException91);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer35.inversetransform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer27.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer27.inversetransform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer61.transform(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer61.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer27.inversetransform(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer1.inversetransform2(doubleArray79);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform(doubleArray88);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, (double) 10.0f);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray88);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray88);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[924089.014825243, 1.3714696998220208E8]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[924089.014825243, 1.3714696998220208E8]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[924089.014825243, 1.3714696998220208E8]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[924089.014825243, 1.3714696998220208E8]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[924089.014825243, 1.3714696998220208E8]");
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(complexArray44);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.inversetransform2(univariateRealFunction50, 0.05000000000000001d, (double) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1.0f), (-13.268071397712466d));
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        double double12 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex1.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 18491.78033459865d + "'", double12 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer25.transform(complexArray64);
        boolean boolean66 = complex24.equals((java.lang.Object) fastFourierTransformer25);
        boolean boolean67 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex68 = complex24.tan();
        org.apache.commons.math.complex.Complex complex69 = complex6.multiply(complex24);
        org.apache.commons.math.complex.Complex complex70 = complex24.atan();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex73.log();
        org.apache.commons.math.complex.Complex complex76 = complex73.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex73.acos();
        org.apache.commons.math.complex.Complex complex78 = complex24.divide(complex73);
        org.apache.commons.math.complex.Complex complex79 = complex73.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer14.inversetransform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer43.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer43.inversetransform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer14.inversetransform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform(doubleArray73);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 2.4698520192911105E-5d);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[7.903526461731554E-4, 0.11729873302363894]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[7.903526461731554E-4, 0.11729873302363894]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[7.903526461731554E-4, 0.11729873302363894]");
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.557407724654902d, 0.11519441079303887d);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj22 = new java.lang.Object();
        boolean boolean23 = complex21.equals(obj22);
        org.apache.commons.math.complex.Complex complex24 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex31 = complex21.add(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj37 = new java.lang.Object();
        boolean boolean38 = complex36.equals(obj37);
        org.apache.commons.math.complex.Complex complex39 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex40 = complex36.negate();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex40.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex32.pow(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex46.asin();
        org.apache.commons.math.complex.Complex complex48 = complex47.tan();
        org.apache.commons.math.complex.Complex complex49 = complex6.multiply(complex47);
        double double50 = complex47.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-11982.862390657456d) + "'", double16 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(complexArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, 0.7841481699077715d, 1.2825558729201296d, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer26.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer3.transform2(complexArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException69.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) throwableArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.Object[] objArray29 = mathException27.getArguments();
        java.lang.String str30 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.String str33 = mathException31.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-1.2113139258561973d), 0.7632162736499556d);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        boolean boolean4 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex5 = complex2.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex17.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex31.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex31.atan();
        org.apache.commons.math.complex.Complex complex35 = complex31.cos();
        org.apache.commons.math.complex.Complex complex36 = complex31.negate();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex40.subtract(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        boolean boolean48 = complex46.isNaN();
        org.apache.commons.math.complex.Complex complex49 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex31.add(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex52 = complex26.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex6.add(complex52);
        boolean boolean54 = complex53.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9240.89014825243d) + "'", double33 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        org.apache.commons.math.complex.Complex complex27 = complex26.tan();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        boolean boolean29 = complex28.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", objArray55, throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray53, throwable56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer13.inversetransform(complexArray53);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException60);
        mathException10.addSuppressed((java.lang.Throwable) mathException60);
        java.lang.Object[] objArray63 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.lang.String str67 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException68);
        mathException10.addSuppressed((java.lang.Throwable) mathException68);
        java.lang.Object[] objArray71 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException10);
        java.lang.String str74 = mathException73.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str74, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex25 };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer20.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer20.inversetransform2(complexArray35);
        double[] doubleArray41 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer20.transform2(doubleArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer2.inversetransform(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, 3.9231794343056575E-6d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer2.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray78);
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray78, throwable80);
        java.lang.String str82 = mathException81.getPattern();
        java.lang.String str83 = mathException81.getPattern();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        java.lang.Throwable[] throwableArray86 = mathException85.getSuppressed();
        java.lang.Throwable[] throwableArray87 = mathException85.getSuppressed();
        java.lang.Object[] objArray88 = mathException85.getArguments();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray53, (java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException91);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[3.9231794343056575E-6, 5.82251453571562E-4]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[3.9231794343056575E-6, 5.82251453571562E-4]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        double[] doubleArray65 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer44.transform2(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer67.inversetransform2(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer44.inversetransform(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform(doubleArray70);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, 3.1715243988715174d);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, 3.342308207562617d);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, 0.9951960409932249d);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (-5990.4312076796705d));
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, 0.08295426844511536d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-5242.277599932964, -778022.9794987245]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-5242.277599932964, -778022.9794987245]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-5242.277599932964, -778022.9794987245]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-5242.277599932964, -778022.9794987245]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-5242.277599932964, -778022.9794987245]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-5242.277599932964, -778022.9794987245]");
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform(complexArray43);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray46, 18491.78033459865d);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, (double) '4');
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray50, Double.NEGATIVE_INFINITY);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform(doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.Object[] objArray67 = mathException65.getArguments();
        mathException37.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException65);
        mathException10.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray71 = mathException65.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        java.lang.String str73 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException65);
        java.lang.String str76 = mathException65.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.MathException: " + "'", str76, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9963191767703051d, (-0.04991641756298178d), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.9963191767703051, -0.04991641756298178]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.035834395863998524d);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 0);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer62.transform(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer76.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer62.transform2(doubleArray80);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform(doubleArray80);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.inversetransform2(univariateRealFunction87, 6.525012184105979d, 0.16240285067076932d, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = complex9.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.cos();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex27.negate();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex33.acos();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex43.acos();
        org.apache.commons.math.complex.Complex complex45 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex45.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex49);
        org.apache.commons.math.complex.Complex complex53 = complex49.tanh();
        org.apache.commons.math.complex.Complex complex54 = complex36.subtract(complex49);
        org.apache.commons.math.complex.Complex complex55 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex28.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.cos();
        org.apache.commons.math.complex.Complex complex58 = complex20.pow(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex55.tanh();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex62.log();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex68.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex70.atan();
        org.apache.commons.math.complex.Complex complex72 = complex65.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex59.divide(complex72);
        boolean boolean74 = complex72.isNaN();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer21.inversetransform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer13.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer39.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer13.inversetransform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer47.inversetransform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer47.transform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer13.inversetransform2(complexArray85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException89);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray9, (java.lang.Throwable) mathException89);
        java.lang.String str92 = mathException91.getPattern();
        java.lang.Object[] objArray93 = mathException91.getArguments();
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray93);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.apache.commons.math.MathException" + "'", str92, "org.apache.commons.math.MathException");
        org.junit.Assert.assertNotNull(objArray93);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer25.transform(complexArray64);
        boolean boolean66 = complex24.equals((java.lang.Object) fastFourierTransformer25);
        boolean boolean67 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex68 = complex24.tan();
        org.apache.commons.math.complex.Complex complex69 = complex6.multiply(complex24);
        org.apache.commons.math.complex.Complex complex70 = complex6.tan();
        boolean boolean71 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex72 = complex6.tan();
        org.apache.commons.math.complex.Complex complex73 = complex6.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer1.transform(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex25 };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer20.transform2(complexArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer15.transform(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.inversetransform(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer15.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer1.inversetransform2(complexArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray53);
        java.lang.String str55 = mathException54.getPattern();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        boolean boolean8 = complex6.isNaN();
        boolean boolean9 = complex6.isInfinite();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex13 = complex10.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        boolean boolean28 = complex21.isNaN();
        org.apache.commons.math.complex.Complex complex29 = complex21.log();
        org.apache.commons.math.complex.Complex complex30 = complex14.add(complex21);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex39.acos();
        org.apache.commons.math.complex.Complex complex42 = complex39.acos();
        org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex45 = complex42.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = complex45.log();
        double double48 = complex47.abs();
        org.apache.commons.math.complex.Complex complex49 = complex14.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex5.divide(complex50);
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        double double63 = complex61.getReal();
        double double64 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex66 = complex51.subtract(complex61);
        org.apache.commons.math.complex.Complex complex67 = complex51.sin();
        boolean boolean68 = complex67.isNaN();
        org.apache.commons.math.complex.Complex complex69 = complex67.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.1715243988715174d + "'", double48 == 3.1715243988715174d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 42.12194549221161d + "'", double63 == 42.12194549221161d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-142.35883754318695d) + "'", double64 == (-142.35883754318695d));
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex8.pow(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.negate();
        boolean boolean19 = complex14.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex20 = complex5.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-10.693147180349666d) + "'", double7 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(10.00001102435328d, 0.0d);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer35.inversetransform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer27.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer27.inversetransform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer61.transform(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer61.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer27.inversetransform(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer1.inversetransform2(doubleArray79);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform(doubleArray88);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, (double) 10.0f);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, (-10.0d));
        double[] doubleArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, 1.0097315985088704d);
        double[] doubleArray97 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray95, 1.0038738355039385d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray95);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1013.6431326246227, 150437.97951545226]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1013.6431326246227, 150437.97951545226]");
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        double[] doubleArray43 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer22.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer17.inversetransform2(doubleArray48);
        double[] doubleArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, (double) 'a');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[97.0, 14396.07643294993]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[97.0, 14396.07643294993]");
        org.junit.Assert.assertNotNull(complexArray58);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = complex2.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        java.lang.Class<?> wildcardClass16 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", objArray62, throwable63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray60, throwable63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable63);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.String str68 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(complexArray41);
        double[] doubleArray77 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 0.0d);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) '#');
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (-142.35883754318695d));
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (double) (-1L));
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray85, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform(doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-1.7387935193125343d), 1.0077076126157685d);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        boolean boolean14 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        org.apache.commons.math.complex.Complex complex27 = complex24.acos();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.cos();
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex15.multiply(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj37 = new java.lang.Object();
        boolean boolean38 = complex36.equals(obj37);
        org.apache.commons.math.complex.Complex complex39 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex36.add(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex32.subtract(complex46);
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj52 = new java.lang.Object();
        boolean boolean53 = complex51.equals(obj52);
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex64 = complex62.acos();
        org.apache.commons.math.complex.Complex complex65 = complex62.acos();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.cos();
        org.apache.commons.math.complex.Complex complex68 = complex51.pow(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex67.asin();
        double double70 = complex69.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = complex69.cosh();
        double double72 = complex69.getImaginary();
        boolean boolean73 = complex46.equals((java.lang.Object) complex69);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-9.999999991586744d) + "'", double70 == (-9.999999991586744d));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-9.999999991586744d) + "'", double72 == (-9.999999991586744d));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        double[] doubleArray30 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer9.transform2(doubleArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray31);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray31, throwable33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer36.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer62.transform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer36.inversetransform(doubleArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer70.transform(complexArray82);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer84.transform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer70.transform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer36.inversetransform(doubleArray88);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer2.transform2(doubleArray88);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray94);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray94);
        org.apache.commons.math.complex.Complex[] complexArray98 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, (-0.009331872921774826d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray98);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.String str29 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Object[] objArray33 = mathException31.getArguments();
        java.lang.Throwable[] throwableArray34 = mathException31.getSuppressed();
        java.lang.String str35 = mathException31.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.9955742870938463d, 22026.46581750668d);
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform2(doubleArray21);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray21, 0.035834395863998524d);
        double[] doubleArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 0);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer31.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer45.inversetransform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 10.693147083113669d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 3.9231794343056575E-6d);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 18491.78033459865d);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform2(doubleArray79);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform(univariateRealFunction81, 5.497040179645271d, 1.8308678712142121d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [5.497040179645271, 1.8308678712142121]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex16.add(complex30);
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.570758233200585d + "'", double40 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex10.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        boolean boolean20 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex17.log();
        org.apache.commons.math.complex.Complex complex22 = complex17.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException25);
        java.lang.Object[] objArray28 = mathException27.getArguments();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        boolean boolean9 = complex3.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex13.subtract(complex18);
        boolean boolean22 = complex8.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = complex20.equals(obj21);
        org.apache.commons.math.complex.Complex complex23 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex20.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex16.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex7.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray26, throwable27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray24, throwable27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable27);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Object[] objArray32 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray32);
        mathException3.addSuppressed((java.lang.Throwable) mathException33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer37.inversetransform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer37.transform(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, (double) (byte) 0);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray73);
        mathException33.addSuppressed((java.lang.Throwable) mathException77);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer2.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        double[] doubleArray51 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.transform2(doubleArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52, throwable54);
        java.lang.String str56 = mathException55.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer58.inversetransform2(complexArray73);
        double[] doubleArray79 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer58.transform2(doubleArray79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray80);
        mathException55.addSuppressed((java.lang.Throwable) mathException81);
        java.lang.Object[] objArray83 = mathException81.getArguments();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException81);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray26);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 3.2027538945916267E-5d);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray26);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(28046.050736663732d, 3.070581306251327d);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex4.cos();
        org.apache.commons.math.complex.Complex complex9 = complex4.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        boolean boolean21 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex4.add(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.complex.Complex complex29 = complex18.multiply(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        boolean boolean34 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex35 = complex29.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = complex32.asin();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex42.asin();
        org.apache.commons.math.complex.Complex complex45 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.asin();
        org.apache.commons.math.complex.Complex complex53 = complex50.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex54.conjugate();
        double double56 = complex54.abs();
        org.apache.commons.math.complex.Complex complex57 = complex54.negate();
        org.apache.commons.math.complex.Complex complex58 = complex46.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex32.add(complex46);
        org.apache.commons.math.complex.Complex complex60 = complex32.sin();
        org.apache.commons.math.complex.Complex complex61 = complex60.asin();
        org.apache.commons.math.complex.Complex complex62 = complex12.divide(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex63.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.570758233200585d + "'", double56 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex2.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.asin();
        org.apache.commons.math.complex.Complex complex34 = complex31.atan();
        org.apache.commons.math.complex.Complex complex35 = complex25.divide(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex45.acos();
        org.apache.commons.math.complex.Complex complex49 = complex41.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex51 = complex50.cos();
        org.apache.commons.math.complex.Complex complex52 = complex35.add(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex50.cos();
        org.apache.commons.math.complex.Complex complex54 = complex20.multiply(complex50);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray14);
        java.lang.Object[] objArray16 = mathException15.getArguments();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer33.inversetransform2(complexArray48);
        double[] doubleArray54 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer33.transform2(doubleArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        double[] doubleArray80 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer59.transform2(doubleArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray81);
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray81, throwable83);
        java.lang.String str85 = mathException84.getPattern();
        java.lang.Object[] objArray86 = mathException84.getArguments();
        mathException56.addSuppressed((java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException84);
        mathException29.addSuppressed((java.lang.Throwable) mathException84);
        java.lang.Throwable[] throwableArray90 = mathException84.getSuppressed();
        java.lang.Object[] objArray91 = mathException84.getArguments();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException92);
        java.lang.Throwable[] throwableArray94 = mathException92.getSuppressed();
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("", objArray16, (java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException92);
        java.lang.String str97 = mathException92.toString();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str97, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        double double36 = complex35.abs();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        boolean boolean46 = complex19.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex7.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex7.multiply(complex48);
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex67.sinh();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex73.sinh();
        org.apache.commons.math.complex.Complex complex76 = complex75.atan();
        double double77 = complex75.getReal();
        org.apache.commons.math.complex.Complex complex78 = complex70.subtract(complex75);
        org.apache.commons.math.complex.Complex complex81 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex82 = complex81.exp();
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        double double84 = complex83.abs();
        org.apache.commons.math.complex.Complex complex85 = complex70.multiply(complex83);
        boolean boolean86 = complex7.equals((java.lang.Object) complex85);
        org.apache.commons.math.complex.Complex complex87 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex88 = complex87.negate();
        org.apache.commons.math.complex.Complex complex91 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex92 = complex91.exp();
        org.apache.commons.math.complex.Complex complex93 = complex91.sinh();
        org.apache.commons.math.complex.Complex complex94 = complex93.atan();
        org.apache.commons.math.complex.Complex complex95 = complex93.sqrt();
        org.apache.commons.math.complex.Complex complex96 = complex93.tanh();
        org.apache.commons.math.complex.Complex complex97 = complex93.conjugate();
        org.apache.commons.math.complex.Complex complex98 = complex88.subtract(complex97);
        org.apache.commons.math.complex.Complex complex99 = complex97.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.035834395863998524d + "'", double36 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-9240.89014825243d) + "'", double77 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 148.4131591025766d + "'", double84 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex6.equals((java.lang.Object) complex17);
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex26.atan();
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        double double31 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex32.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex41.subtract(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex44.negate();
        org.apache.commons.math.complex.Complex complex48 = complex44.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex53.subtract(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex56.negate();
        org.apache.commons.math.complex.Complex complex60 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex60.sin();
        org.apache.commons.math.complex.Complex complex62 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex62.atan();
        org.apache.commons.math.complex.Complex complex64 = complex63.tan();
        org.apache.commons.math.complex.Complex complex65 = complex48.multiply(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex36.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex21.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex69 = complex21.divide(complex68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 14.142135623730951d + "'", double19 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-7.123309922588602E-6d) + "'", double31 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60, throwable62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer31.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 15560.29660900602d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        double double27 = complex26.abs();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        boolean boolean37 = complex10.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex38 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        double double55 = complex54.abs();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex59.acos();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex54.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex10.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex10.asin();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException68);
        java.lang.String str70 = mathException69.getPattern();
        boolean boolean71 = complex10.equals((java.lang.Object) str70);
        org.apache.commons.math.complex.Complex complex72 = complex10.log();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.negate();
        org.apache.commons.math.complex.Complex complex78 = complex76.negate();
        org.apache.commons.math.complex.Complex complex79 = complex78.tan();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex10.pow(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex81.cos();
        org.apache.commons.math.complex.Complex complex83 = complex81.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.035834395863998524d + "'", double27 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.035834395863998524d + "'", double55 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.MathException" + "'", str70, "org.apache.commons.math.MathException");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        double[] doubleArray65 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer44.transform2(doubleArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray66);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray66, throwable68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer37.inversetransform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(complexArray66);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(univariateRealFunction72, 1.3234581215893517d, 0.0d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.3234581215893517, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.inversetransform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException38.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str39, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer52.inversetransform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer44.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer44.inversetransform(doubleArray74);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray74, (-6001.431182971055d));
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform2(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-6001.431182971055, -890691.3610014477]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-6001.431182971055, -890691.3610014477]");
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex17.divide(complex27);
        double double29 = complex27.abs();
        boolean boolean30 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = complex10.multiply(complex27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform2(doubleArray36);
        boolean boolean39 = complex27.equals((java.lang.Object) fastFourierTransformer32);
        org.apache.commons.math.complex.Complex complex40 = complex27.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = complex27.cos();
        org.apache.commons.math.complex.Complex complex42 = complex41.cos();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj46 = new java.lang.Object();
        boolean boolean47 = complex45.equals(obj46);
        org.apache.commons.math.complex.Complex complex48 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex45.negate();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex49.subtract(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex49.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        boolean boolean58 = complex55.equals((java.lang.Object) complex57);
        org.apache.commons.math.complex.Complex complex59 = complex41.add(complex57);
        boolean boolean60 = complex41.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 22040.29691869634d + "'", double29 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex(0.0d, 0.18118766697302902d);
        org.apache.commons.math.complex.Complex complex12 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer27.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer41.inversetransform(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer27.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform2(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform(univariateRealFunction72, 148.4131591025766d, 3.760603093086394d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj18 = new java.lang.Object();
        boolean boolean19 = complex17.equals(obj18);
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex17.negate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex13.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.log();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex37.acos();
        org.apache.commons.math.complex.Complex complex41 = complex33.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.cos();
        org.apache.commons.math.complex.Complex complex43 = complex40.tan();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex54.atan();
        double double56 = complex54.getReal();
        org.apache.commons.math.complex.Complex complex57 = complex49.subtract(complex54);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.asin();
        org.apache.commons.math.complex.Complex complex64 = complex61.atan();
        org.apache.commons.math.complex.Complex complex65 = complex64.negate();
        org.apache.commons.math.complex.Complex complex66 = complex65.acos();
        org.apache.commons.math.complex.Complex complex67 = complex65.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = complex54.pow(complex65);
        double double69 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = complex43.divide(complex65);
        org.apache.commons.math.complex.Complex complex71 = complex43.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex71.exp();
        org.apache.commons.math.complex.Complex complex74 = complex28.subtract(complex71);
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex78.acos();
        org.apache.commons.math.complex.Complex complex81 = complex80.exp();
        org.apache.commons.math.complex.Complex complex82 = complex81.cos();
        org.apache.commons.math.complex.Complex complex83 = complex81.tanh();
        org.apache.commons.math.complex.Complex complex84 = complex74.subtract(complex83);
        boolean boolean85 = complex74.isNaN();
        org.apache.commons.math.complex.Complex complex86 = complex74.sqrt1z();
        org.apache.commons.math.complex.Complex complex87 = complex74.tan();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-9240.89014825243d) + "'", double56 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2.4698520192911105E-5d + "'", double69 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex3);
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        double double22 = complex21.abs();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex5.pow(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex5.exp();
        org.apache.commons.math.complex.Complex complex36 = complex5.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.035834395863998524d + "'", double22 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        double[] doubleArray45 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer24.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer7.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer49.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer49.transform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.08295426844511536d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform(complexArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform(univariateRealFunction89, 14.142224011249972d, 15560.29660900602d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.String str29 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        java.lang.String str32 = mathException31.getPattern();
        java.lang.String str33 = mathException31.getPattern();
        java.lang.Object[] objArray34 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray38 = mathException37.getArguments();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        mathException31.addSuppressed((java.lang.Throwable) mathException39);
        java.lang.String str42 = mathException39.getPattern();
        java.lang.Throwable[] throwableArray43 = mathException39.getSuppressed();
        java.lang.String str44 = mathException39.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str42, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str44, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex4.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.sin();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex22.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer26.transform(complexArray65);
        boolean boolean67 = complex25.equals((java.lang.Object) fastFourierTransformer26);
        double double68 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = complex25.cos();
        org.apache.commons.math.complex.Complex complex70 = complex15.pow(complex69);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-10.0d) + "'", double68 == (-10.0d));
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        double[] doubleArray65 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer44.transform2(doubleArray65);
        double[] doubleArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (double) 100L);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.inversetransform2(doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer71.transform(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray89 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer86.inversetransform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer85.transform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer71.transform2(doubleArray89);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray89, 2.566370623987466d);
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(doubleArray89);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.inversetransform2(doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray95);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex4.conjugate();
        boolean boolean9 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex20.tan();
        org.apache.commons.math.complex.Complex complex24 = complex12.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex8.divide(complex12);
        org.apache.commons.math.complex.Complex complex26 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 148.4131591025766d + "'", double5 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-2.4698520192911105E-5d), 0.05226086543509898d);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        double[] doubleArray25 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer4.transform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", objArray46, throwable47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray44, throwable47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer4.inversetransform(complexArray44);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException51);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        java.lang.String str55 = mathException53.getPattern();
        java.lang.Throwable[] throwableArray56 = mathException53.getSuppressed();
        java.lang.Object[] objArray57 = mathException53.getArguments();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException53);
        java.lang.String str59 = mathException58.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.math.MathException: " + "'", str55, "org.apache.commons.math.MathException: ");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str59, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex5.pow(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex5.exp();
        org.apache.commons.math.complex.Complex complex20 = complex5.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-5991.431207677988d) + "'", double14 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        double double41 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.sin();
        org.apache.commons.math.complex.Complex complex60 = complex40.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex31.subtract(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-7.123309922588602E-6d) + "'", double41 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException3);
        java.lang.Object[] objArray5 = mathException4.getArguments();
        java.lang.String str6 = mathException4.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.Object[] objArray8 = mathException4.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str6, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 42.12194549221161d, Double.POSITIVE_INFINITY, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex14);
        double double16 = complex14.abs();
        boolean boolean17 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.multiply(complex30);
        boolean boolean32 = complex14.equals((java.lang.Object) complex30);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex43 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        org.apache.commons.math.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex50.divide(complex60);
        double double62 = complex60.abs();
        boolean boolean63 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex43.multiply(complex60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        boolean boolean72 = complex60.equals((java.lang.Object) fastFourierTransformer65);
        org.apache.commons.math.complex.Complex complex73 = complex60.sqrt1z();
        org.apache.commons.math.complex.Complex complex74 = complex30.add(complex60);
        org.apache.commons.math.complex.Complex complex75 = complex30.asin();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt1z();
        org.apache.commons.math.complex.Complex complex77 = complex75.sin();
        org.apache.commons.math.complex.Complex complex78 = complex75.tan();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 22040.29691869634d + "'", double16 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 22040.29691869634d + "'", double62 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer2.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer36.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer55.inversetransform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer36.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer2.inversetransform2(complexArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray74);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex22 = complex15.pow(complex21);
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.pow(complex26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer45.inversetransform2(complexArray60);
        double[] doubleArray66 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer45.transform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer28.transform(complexArray67);
        boolean boolean69 = complex26.equals((java.lang.Object) complexArray68);
        boolean boolean70 = complex4.equals((java.lang.Object) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) (short) 0);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray68);
        java.lang.String str74 = mathException73.getPattern();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str74, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer0.transform(univariateRealFunction8, (-11982.862390657456d), 1.1608602090379334d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform2(doubleArray67);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 0.035834395863998524d);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 3.342308207562617d);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform2(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform(univariateRealFunction86, 1.5707201399946504d, 3.4330616811688754d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex10.pow(complex21);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex33.acos();
        org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex10.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex44.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.cos();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex58.negate();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        double double68 = complex67.abs();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex72.acos();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex67.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.negate();
        boolean boolean78 = complex51.equals((java.lang.Object) complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex79.sin();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt1z();
        org.apache.commons.math.complex.Complex complex83 = complex40.add(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex40.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.035834395863998524d + "'", double68 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-1.570758233006406d), 0.4430227241169225d);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray45, throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43, throwable46);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer3.inversetransform(complexArray43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex11.cos();
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer26.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer3.transform2(complexArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67);
        java.lang.Object[] objArray69 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform2(doubleArray41);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.inversetransform(univariateRealFunction47, (-0.8414709838989786d), 1.55704023880809882E18d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray46);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        boolean boolean8 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.negate();
        org.apache.commons.math.complex.Complex complex22 = complex11.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        double double37 = complex36.getReal();
        org.apache.commons.math.complex.Complex complex38 = complex25.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = complex5.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex5.exp();
        org.apache.commons.math.complex.Complex complex42 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex62.acos();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex67.subtract(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex62.divide(complex70);
        boolean boolean74 = complex49.equals((java.lang.Object) complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.asin();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt1z();
        org.apache.commons.math.complex.Complex complex77 = complex76.sin();
        org.apache.commons.math.complex.Complex complex78 = complex42.multiply(complex76);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        double double19 = complex18.getReal();
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-3.763440814919645E-9d), 1.1811876670244756d);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt1z();
        double double15 = complex14.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.366472469977241d + "'", double15 == 10.366472469977241d);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-0.03563670930070898d), (-0.7066198167699884d), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer16.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, (double) 10);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray37, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException46);
        java.lang.Object[] objArray49 = mathException46.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        java.lang.Throwable[] throwableArray51 = mathException46.getSuppressed();
        boolean boolean52 = complex9.equals((java.lang.Object) mathException46);
        java.lang.Object[] objArray53 = mathException46.getArguments();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.transform2(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11020.828705888358d, 0.7632162736499556d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11020.828705888358, 0.7632162736499556]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0d), (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-18491.78033459865d), (-0.04991641756298178d));
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray27, throwable29);
        java.lang.String str31 = mathException30.getPattern();
        java.lang.String str32 = mathException30.getPattern();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.lang.String str36 = mathException33.getPattern();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63, throwable65);
        java.lang.String str67 = mathException66.getPattern();
        java.lang.String str68 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.lang.Object[] objArray73 = mathException70.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) mathException76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray78);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        org.apache.commons.math.complex.Complex complex54 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex59.subtract(complex62);
        double double65 = complex64.getReal();
        org.apache.commons.math.complex.Complex complex66 = complex9.add(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex64.tan();
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex67.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-18491.78033459865d) + "'", double65 == (-18491.78033459865d));
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer46.transform2(complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer46.inversetransform(doubleArray76);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.inversetransform(doubleArray76);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(univariateRealFunction83, 3.4330616811688865d, 0.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 14841.31591025766]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 14841.31591025766]");
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-9.999999991586744d), 0.45407153819929014d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.tanh();
        boolean boolean14 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.asin();
        org.apache.commons.math.complex.Complex complex21 = complex18.atan();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex25 = complex13.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        double double27 = complex25.getImaginary();
        double double28 = complex25.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.2113139220927565d + "'", double27 == 1.2113139220927565d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.570737839500671d + "'", double28 == 1.570737839500671d);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        double double20 = complex19.abs();
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = complex22.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex24.add(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.asin();
        org.apache.commons.math.complex.Complex complex38 = complex13.multiply(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = complex36.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.cos();
        org.apache.commons.math.complex.Complex complex42 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 22026.465794806718d + "'", double20 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = complex2.divide(complex11);
        java.lang.Class<?> wildcardClass15 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.inversetransform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        double[] doubleArray47 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer26.transform2(doubleArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray48);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray48, throwable50);
        java.lang.String str52 = mathException51.getPattern();
        java.lang.Object[] objArray53 = mathException51.getArguments();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray23, (java.lang.Throwable) mathException51);
        java.lang.String str55 = mathException51.getPattern();
        java.lang.String str56 = mathException51.getPattern();
        java.lang.Object[] objArray57 = mathException51.getArguments();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray57);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        boolean boolean26 = complex14.equals((java.lang.Object) complex25);
        double double27 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex14.subtract(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex14.sin();
        org.apache.commons.math.complex.Complex complex36 = complex14.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0L, (double) 100L);
        double double3 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex2.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = complex12.equals(obj13);
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex9.acos();
        double double19 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex28.acos();
        org.apache.commons.math.complex.Complex complex32 = complex24.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.cos();
        org.apache.commons.math.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt1z();
        double double44 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex43.sin();
        double double46 = complex43.getReal();
        boolean boolean47 = complex43.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex9.pow(complex48);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-11982.862390657456d) + "'", double40 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0947552508950837E-7d) + "'", double44 == (-1.0947552508950837E-7d));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9999999909941609d + "'", double46 == 0.9999999909941609d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex17.divide(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex33.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex25.pow(complex33);
        org.apache.commons.math.complex.Complex complex40 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex46.acos();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex51.subtract(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex46.divide(complex54);
        org.apache.commons.math.complex.Complex complex58 = complex54.log();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex62.subtract(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex54.pow(complex62);
        boolean boolean69 = complex68.isNaN();
        org.apache.commons.math.complex.Complex complex70 = complex68.tanh();
        org.apache.commons.math.complex.Complex complex71 = complex70.asin();
        org.apache.commons.math.complex.Complex complex72 = complex41.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex41.cos();
        org.apache.commons.math.complex.Complex complex74 = complex11.multiply(complex73);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        double[] doubleArray65 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer44.transform2(doubleArray65);
        double[] doubleArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (double) 100L);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.inversetransform2(doubleArray68);
        double[] doubleArray76 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.0d);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, (double) '#');
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 14036.654899895804d);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, (-142.35883754318695d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform2(doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, -0.0, 0.0, -0.0, 0.0]");
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = complex2.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        double double16 = complex15.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        double double17 = complex15.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9171462850560219d + "'", double17 == 0.9171462850560219d);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.368901671590452d, 18491.780334666022d);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex28.multiply(complex38);
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        boolean boolean44 = complex42.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex39.pow(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex42.atan();
        org.apache.commons.math.complex.Complex complex47 = complex15.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.sin();
        double double49 = complex46.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0499164175629817d + "'", double49 == 0.0499164175629817d);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex9.multiply(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex20.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex6.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex6.multiply(complex29);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 0L, (double) 100L);
        double double34 = complex33.getReal();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex30.divide(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex33.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer29.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer29.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(doubleArray59);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform(univariateRealFunction64, 0.17047023159252045d, 14.142224011249972d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex22.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer26.transform(complexArray65);
        boolean boolean67 = complex25.equals((java.lang.Object) fastFourierTransformer26);
        boolean boolean68 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex69 = complex25.tan();
        org.apache.commons.math.complex.Complex complex70 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex75.subtract(complex78);
        double double81 = complex80.getReal();
        org.apache.commons.math.complex.Complex complex82 = complex25.add(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex25.sin();
        org.apache.commons.math.complex.Complex complex84 = complex13.subtract(complex25);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-18491.78033459865d) + "'", double81 == (-18491.78033459865d));
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 1.0038738355039385d);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray34);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        double double28 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex29 = complex16.subtract(complex27);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex37 = complex36.asin();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.tan();
        org.apache.commons.math.complex.Complex complex40 = complex16.subtract(complex39);
        double double41 = complex40.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-11982.862390657456d) + "'", double35 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        boolean boolean15 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex32 = complex28.divide(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sin();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex43.acos();
        org.apache.commons.math.complex.Complex complex46 = complex39.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex37.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.sin();
        org.apache.commons.math.complex.Complex complex50 = complex48.asin();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex48.add(complex51);
        org.apache.commons.math.complex.Complex complex55 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex13.pow(complex55);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex59.sinh();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = complex61.acos();
        org.apache.commons.math.complex.Complex complex65 = complex13.pow(complex61);
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj69 = new java.lang.Object();
        boolean boolean70 = complex68.equals(obj69);
        org.apache.commons.math.complex.Complex complex71 = complex68.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex68.negate();
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex72.cos();
        org.apache.commons.math.complex.Complex complex76 = complex13.add(complex72);
        double double77 = complex72.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-5991.431207677988d) + "'", double63 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-10.0d) + "'", double77 == (-10.0d));
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61, throwable63);
        java.lang.String str65 = mathException64.getPattern();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        mathException36.addSuppressed((java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException64);
        mathException9.addSuppressed((java.lang.Throwable) mathException64);
        java.lang.Object[] objArray70 = mathException64.getArguments();
        java.lang.String str71 = mathException64.getPattern();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        double double8 = complex5.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray32, throwable33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray30, throwable33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable33);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        java.lang.String str38 = mathException36.getPattern();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray11, (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65, throwable67);
        java.lang.String str69 = mathException68.getPattern();
        java.lang.String str70 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray72 = mathException68.getSuppressed();
        java.lang.Object[] objArray73 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray11, (java.lang.Throwable) mathException68);
        java.lang.String str75 = mathException68.getPattern();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.asin();
        org.apache.commons.math.complex.Complex complex33 = complex30.atan();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex33.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.atan();
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        boolean boolean44 = complex24.equals((java.lang.Object) complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex45.atan();
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex15.multiply(complex47);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.inversetransform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer46.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(complexArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform2(doubleArray82);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform(doubleArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, 1.1886324632858283E-88d, 3.4330616811688865d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray32, throwable33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray30, throwable33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable33);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        java.lang.String str38 = mathException36.getPattern();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray11, (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65, throwable67);
        java.lang.String str69 = mathException68.getPattern();
        java.lang.String str70 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray72 = mathException68.getSuppressed();
        java.lang.Object[] objArray73 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray11, (java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray75 = mathException68.getSuppressed();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.inversetransform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer61.transform2(complexArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform2(complexArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform(univariateRealFunction90, 2.763130833716387d, (-1.0d), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.763130833716387, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        double double36 = complex35.abs();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        boolean boolean46 = complex19.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex7.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex7.multiply(complex48);
        org.apache.commons.math.complex.Complex complex65 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex48.atan();
        org.apache.commons.math.complex.Complex complex67 = complex48.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.035834395863998524d + "'", double36 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        double[] doubleArray45 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer24.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer7.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.inversetransform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer49.transform(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer49.transform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray77 = new org.apache.commons.math.complex.Complex[] { complex76 };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer71.transform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray85 = new org.apache.commons.math.complex.Complex[] { complex84 };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer79.transform2(complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer71.inversetransform2(complexArray86);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer88 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray91 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer88.inversetransform2(doubleArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer71.inversetransform(complexArray92);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer49.transform2(complexArray93);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.transform2(complexArray94);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray94);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer34.transform2(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer34.inversetransform(doubleArray64);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, (double) 100);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform(doubleArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform(univariateRealFunction73, (double) 0L, (-0.2511271623901931d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1301.8489601050196, 193211.51684359016]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1301.8489601050196, 193211.51684359016]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1301.8489601050196, 193211.51684359016]");
        org.junit.Assert.assertNotNull(complexArray72);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        double[] doubleArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray46, (double) (byte) 10);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, 9.65420983603942d);
        double[] doubleArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray51, (-0.9912858099911315d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-3.4293807878570783, -508.9652364915521]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-3.4293807878570783, -508.9652364915521]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-3.4293807878570783, -508.9652364915521]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-3.4293807878570783, -508.9652364915521]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-3.4293807878570783, -508.9652364915521]");
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer2.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer36.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer55.inversetransform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer36.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer2.inversetransform2(complexArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex84 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex85 = complex84.exp();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray87 = new org.apache.commons.math.complex.Complex[] { complex86 };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer81.transform2(complexArray87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray88);
        java.lang.Throwable[] throwableArray90 = mathException89.getSuppressed();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray90);
        java.lang.Object[] objArray92 = mathException91.getArguments();
        mathException78.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray94 = mathException78.getArguments();
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", objArray94);
        java.lang.String str96 = mathException95.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str96, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.557407724654902d, (-1.1752011936438014d));
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.1118510940850437d, (-5991.431182979468d), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.1118510940850437, -5991.431182979468]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex11 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex13.pow(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex19.pow(complex24);
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex29 = complex25.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.tan();
        org.apache.commons.math.complex.Complex complex36 = complex12.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex38 = complex35.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.String str6 = mathException3.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException3);
        java.lang.String str8 = mathException7.getPattern();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex16.add(complex30);
        org.apache.commons.math.complex.Complex complex44 = complex16.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex50.divide(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex58.log();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex66.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex58.pow(complex66);
        org.apache.commons.math.complex.Complex complex73 = complex66.tan();
        org.apache.commons.math.complex.Complex complex74 = complex44.pow(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.conjugate();
        java.lang.Class<?> wildcardClass77 = complex76.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.570758233200585d + "'", double40 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray60, throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray58, throwable61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.inversetransform2(doubleArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.transform2(univariateRealFunction75, 3.2027538945916267E-5d, (-0.9955742971925697d), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.2027538945916267E-5, -0.9955742971925697]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray74);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        double[] doubleArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, (double) 'a');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, 14.142135623730951d);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 11972.862390657456d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.6424218842095697E7, 2.4375702041474853E9]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.6424218842095697E7, 2.4375702041474853E9]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.6424218842095697E7, 2.4375702041474853E9]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.6424218842095697E7, 2.4375702041474853E9]");
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 2.5663706339627015d, 1.1608602090379334d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.5663706339627015, 1.1608602090379334]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex29.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        double double36 = complex34.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.NEGATIVE_INFINITY + "'", double36 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform(complexArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray84);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49, throwable51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.String str54 = mathException52.getPattern();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = mathException56.getSuppressed();
        boolean boolean59 = complex13.equals((java.lang.Object) mathException56);
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj63 = new java.lang.Object();
        boolean boolean64 = complex62.equals(obj63);
        org.apache.commons.math.complex.Complex complex65 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex13.pow(complex65);
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex65.asin();
        org.apache.commons.math.complex.Complex complex70 = complex69.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-5991.431207677988d) + "'", double67 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray63, 3.0296757004818433d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform(doubleArray69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(univariateRealFunction74, 3.039980479210091d, (-11982.862390657456d), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.039980479210091, -11982.862390657456]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[3.0296757004818433, 449.64374176482204]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[3.0296757004818433, 449.64374176482204]");
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        java.lang.Object obj18 = null;
        boolean boolean19 = complex17.equals(obj18);
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.acos();
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex23.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex20.multiply(complex39);
        boolean boolean44 = complex20.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex16.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex9.subtract(complex16);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        boolean boolean27 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex25.atan();
        org.apache.commons.math.complex.Complex complex29 = complex25.negate();
        org.apache.commons.math.complex.Complex complex30 = complex19.subtract(complex25);
        org.apache.commons.math.complex.Complex complex31 = complex19.negate();
        org.apache.commons.math.complex.Complex complex32 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex19.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 42.12194549221161d + "'", double11 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform2(univariateRealFunction63, 0.029663027718219624d, 0.0d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.029663027718219624, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = complex2.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        boolean boolean16 = complex11.isNaN();
        boolean boolean17 = complex11.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        double double36 = complex35.abs();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        boolean boolean46 = complex19.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex7.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex7.multiply(complex48);
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.negate();
        org.apache.commons.math.complex.Complex complex70 = complex68.asin();
        org.apache.commons.math.complex.Complex complex71 = complex68.atan();
        org.apache.commons.math.complex.Complex complex72 = complex71.atan();
        double double73 = complex72.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = complex72.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.tanh();
        org.apache.commons.math.complex.Complex complex76 = complex74.negate();
        org.apache.commons.math.complex.Complex complex77 = complex7.pow(complex74);
        org.apache.commons.math.complex.Complex complex78 = complex77.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.035834395863998524d + "'", double36 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-7.123309922588602E-6d) + "'", double73 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex7.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        double double15 = complex12.abs();
        org.apache.commons.math.complex.Complex complex16 = complex3.multiply(complex12);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex16.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex26.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex37.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex29.multiply(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex29.divide(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tan();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex16.divide(complex55);
        boolean boolean57 = complex56.isNaN();
        org.apache.commons.math.complex.Complex complex58 = complex56.cosh();
        java.lang.Class<?> wildcardClass59 = complex58.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 22040.29691869634d + "'", double15 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex26.divide(complex34);
        boolean boolean38 = complex13.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex43.atan();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex13.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex13.cos();
        org.apache.commons.math.complex.Complex complex48 = complex3.pow(complex13);
        org.apache.commons.math.complex.Complex complex49 = complex48.acos();
        org.apache.commons.math.complex.Complex complex50 = complex49.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-7.291700864257425d), (-7.7852011940404941E17d), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-7.291700864257425, -7.7852011940404941E17]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.9999999983177603d, (-2.679053673795176E-4d));
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex7.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex2.divide(complex14);
        boolean boolean18 = complex17.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        double double9 = complex5.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex13.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex22.acos();
        org.apache.commons.math.complex.Complex complex25 = complex22.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        boolean boolean29 = complex18.equals((java.lang.Object) complex28);
        org.apache.commons.math.complex.Complex complex30 = complex18.cosh();
        double double31 = complex30.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex30.sin();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex41.acos();
        org.apache.commons.math.complex.Complex complex45 = complex37.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.cos();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        double double48 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex53.acos();
        org.apache.commons.math.complex.Complex complex56 = complex49.pow(complex55);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex55.pow(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex44.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex60.sqrt1z();
        org.apache.commons.math.complex.Complex complex64 = complex32.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex64.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2.566370623987466d + "'", double48 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1.0f, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-0.8414709848292453d) + "'", double5 == (-0.8414709848292453d));
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.0d, (-990.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, -990.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform2(doubleArray38);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray38, 0.035834395863998524d);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform2(doubleArray44);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform2(univariateRealFunction46, 0.9171462850560219d, (-0.99999999957944d), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.9171462850560219, -0.99999999957944]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61, throwable63);
        java.lang.String str65 = mathException64.getPattern();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        mathException36.addSuppressed((java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException64);
        mathException9.addSuppressed((java.lang.Throwable) mathException64);
        java.lang.Object[] objArray70 = mathException64.getArguments();
        java.lang.Throwable[] throwableArray71 = mathException64.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(6.52501217630137d, 7.123309922655306E-6d);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        double[] doubleArray47 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer26.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer26.transform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer60.transform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer60.transform2(doubleArray78);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer26.inversetransform2(doubleArray83);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, (-1.0231960311378805d));
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform2(univariateRealFunction88, (-1.296286469206261E-5d), 0.0499164175629817d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer3.inversetransform2(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray28, throwable29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray26, throwable29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable29);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.String str34 = mathException32.getPattern();
        java.lang.Object[] objArray35 = mathException32.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException43);
        java.lang.Object[] objArray45 = mathException44.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException44);
        mathException40.addSuppressed((java.lang.Throwable) mathException44);
        java.lang.String str49 = mathException44.getPattern();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException44);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str49, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-1.5024074532019105d), (double) (byte) 0);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex18);
        boolean boolean21 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex14.log();
        org.apache.commons.math.complex.Complex complex23 = complex7.add(complex14);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex42 = complex7.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        double double50 = complex49.abs();
        org.apache.commons.math.complex.Complex complex51 = complex49.exp();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex49.asin();
        double double54 = complex53.getReal();
        org.apache.commons.math.complex.Complex complex55 = complex42.add(complex53);
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex59.tanh();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex69.subtract(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex72.negate();
        org.apache.commons.math.complex.Complex complex76 = complex65.multiply(complex75);
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        boolean boolean81 = complex79.isInfinite();
        org.apache.commons.math.complex.Complex complex82 = complex76.pow(complex79);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex complex85 = complex62.divide(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex87 = complex42.divide(complex85);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.1715243988715174d + "'", double41 == 3.1715243988715174d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 148.4131591025766d + "'", double50 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.2876048451616606d + "'", double54 == 0.2876048451616606d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        double double22 = complex20.getReal();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex20.tan();
        org.apache.commons.math.complex.Complex complex25 = complex12.pow(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9240.89014825243d) + "'", double22 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer3.inversetransform2(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        double[] doubleArray47 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer26.transform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer9.transform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer2.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", objArray71, throwable72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray69, throwable72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException(throwable72);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.lang.Object[] objArray77 = mathException75.getArguments();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException82);
        java.lang.String str84 = mathException82.getPattern();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str84, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.1752011936438014d, 3.5202723815553454d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 100.0d);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (-0.9999999983177603d));
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform(univariateRealFunction77, (-1.7387935193125343d), 0.0d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex26.divide(complex34);
        boolean boolean38 = complex13.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex43.atan();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex13.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex13.cos();
        org.apache.commons.math.complex.Complex complex48 = complex3.pow(complex13);
        org.apache.commons.math.complex.Complex complex49 = complex3.acos();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math.complex.Complex complex57 = complex56.acos();
        org.apache.commons.math.complex.Complex complex58 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex62.negate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex50.divide(complex62);
        org.apache.commons.math.complex.Complex complex66 = complex50.atan();
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex66.tan();
        org.apache.commons.math.complex.Complex complex69 = complex49.multiply(complex66);
        org.apache.commons.math.complex.Complex complex70 = complex49.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        double double26 = complex24.getReal();
        org.apache.commons.math.complex.Complex complex27 = complex24.exp();
        org.apache.commons.math.complex.Complex complex28 = complex13.add(complex24);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt1z();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex46.acos();
        org.apache.commons.math.complex.Complex complex49 = complex46.acos();
        org.apache.commons.math.complex.Complex complex50 = complex42.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex42.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex36.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex34.multiply(complex36);
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj57 = new java.lang.Object();
        boolean boolean58 = complex56.equals(obj57);
        org.apache.commons.math.complex.Complex complex59 = complex56.sinh();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex56.add(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex36.add(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex24.subtract(complex68);
        java.lang.Class<?> wildcardClass71 = complex70.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.12194549221161d + "'", double26 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex2.negate();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex6.log();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        double double21 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex25.subtract(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.cos();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        double double49 = complex48.abs();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex53.acos();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.negate();
        boolean boolean59 = complex32.equals((java.lang.Object) complex58);
        org.apache.commons.math.complex.Complex complex60 = complex20.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex62 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sin();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex69 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex73.negate();
        org.apache.commons.math.complex.Complex complex75 = complex69.subtract(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex61.divide(complex73);
        org.apache.commons.math.complex.Complex complex77 = complex20.multiply(complex61);
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.exp();
        org.apache.commons.math.complex.Complex complex82 = complex81.negate();
        org.apache.commons.math.complex.Complex complex83 = complex81.asin();
        org.apache.commons.math.complex.Complex complex84 = complex81.atan();
        org.apache.commons.math.complex.Complex complex85 = complex84.atan();
        double double86 = complex85.getImaginary();
        org.apache.commons.math.complex.Complex complex87 = complex85.sinh();
        org.apache.commons.math.complex.Complex complex88 = complex87.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex87.negate();
        org.apache.commons.math.complex.Complex complex90 = complex20.pow(complex87);
        org.apache.commons.math.complex.Complex complex91 = complex90.tanh();
        org.apache.commons.math.complex.Complex complex92 = complex91.sqrt1z();
        org.apache.commons.math.complex.Complex complex93 = complex12.subtract(complex92);
        org.apache.commons.math.complex.Complex complex94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex95 = complex12.multiply(complex94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.4698520192911105E-5d + "'", double21 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.035834395863998524d + "'", double49 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-7.123309922588602E-6d) + "'", double86 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        boolean boolean25 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex26 = complex20.cosh();
        double double27 = complex20.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer35.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer35.transform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer1.inversetransform(doubleArray53);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray57);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray18, 0.0d);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray23, (-0.9999999995794401d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-0.0, -0.0]");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        org.apache.commons.math.complex.Complex complex14 = complex11.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 1.8210279044245354d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex14.subtract(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = complex34.equals(obj35);
        org.apache.commons.math.complex.Complex complex37 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex34.add(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = complex49.equals(obj50);
        org.apache.commons.math.complex.Complex complex52 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex49.negate();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex53.subtract(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex45.pow(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex31.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex14.divide(complex59);
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        double double67 = complex66.abs();
        org.apache.commons.math.complex.Complex complex68 = complex66.cos();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt1z();
        org.apache.commons.math.complex.Complex complex70 = complex68.tanh();
        org.apache.commons.math.complex.Complex complex71 = complex68.atan();
        org.apache.commons.math.complex.Complex complex72 = complex68.cos();
        org.apache.commons.math.complex.Complex complex73 = complex59.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex76.log();
        org.apache.commons.math.complex.Complex complex79 = complex59.pow(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex59.negate();
        org.apache.commons.math.complex.Complex complex81 = complex59.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 22026.465794806718d + "'", double67 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex4.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.0037588398681663313d, 22026.46579480672d);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex2.acos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex15.divide(complex25);
        boolean boolean27 = complex15.isInfinite();
        double double28 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex15.acos();
        org.apache.commons.math.complex.Complex complex30 = complex2.multiply(complex15);
        org.apache.commons.math.complex.Complex complex31 = complex15.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.693147083113669d + "'", double28 == 10.693147083113669d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer47.inversetransform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.inversetransform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform2(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 0.035834395863998524d);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 0);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-0.0, -0.0]");
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = complex22.equals(obj23);
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex22.add(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex37.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex48.subtract(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.negate();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex51.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        double double61 = complex60.abs();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex65.acos();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex60.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.negate();
        boolean boolean71 = complex44.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.tanh();
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex72.sin();
        org.apache.commons.math.complex.Complex complex75 = complex32.add(complex72);
        org.apache.commons.math.complex.Complex complex76 = complex18.add(complex72);
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.negate();
        double double82 = complex81.abs();
        org.apache.commons.math.complex.Complex complex83 = complex81.atan();
        org.apache.commons.math.complex.Complex complex84 = complex81.cos();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex72.multiply(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex86.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.035834395863998524d + "'", double61 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 22026.465794806718d + "'", double82 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex6.equals((java.lang.Object) complex17);
        boolean boolean19 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex20 = complex6.log();
        org.apache.commons.math.complex.Complex complex21 = complex6.exp();
        org.apache.commons.math.complex.Complex complex22 = complex6.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex28.add(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex14.divide(complex35);
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.log();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        double double14 = complex13.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0856405405871754d + "'", double14 == 1.0856405405871754d);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        boolean boolean51 = complex24.equals((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sin();
        org.apache.commons.math.complex.Complex complex55 = complex12.add(complex52);
        double double56 = complex55.abs();
        org.apache.commons.math.complex.Complex complex57 = complex55.tan();
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.035834395863998524d + "'", double41 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9752357642135653d, 0.9999999909941609d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.inversetransform(univariateRealFunction23, (-0.39285467439899224d), (-1.0231960311378805d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-0.39285467439899224, -1.0231960311378805]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex6.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex13.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex1.divide(complex13);
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.570758233200585d + "'", double23 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(Double.POSITIVE_INFINITY, 1.570737839500671d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [Infinity, 1.570737839500671]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray27, throwable29);
        java.lang.String str31 = mathException30.getPattern();
        java.lang.String str32 = mathException30.getPattern();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.lang.String str36 = mathException33.getPattern();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray63, throwable65);
        java.lang.String str67 = mathException66.getPattern();
        java.lang.String str68 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.lang.Object[] objArray73 = mathException70.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException77);
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sin();
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        double[] doubleArray39 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer18.transform2(doubleArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer43.transform(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.inversetransform(complexArray72);
        double[] doubleArray83 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, 0.0d);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, (double) '#');
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, 1.0d);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray83, (-7.123309922588602E-6d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform(doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, -0.0, 0.0, -0.0, 0.0]");
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex9.pow(complex18);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex27.divide(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex26.subtract(complex39);
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.asin();
        org.apache.commons.math.complex.Complex complex52 = complex49.atan();
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.acos();
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        boolean boolean56 = complex45.equals((java.lang.Object) complex53);
        org.apache.commons.math.complex.Complex complex57 = complex19.multiply(complex45);
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex57.sin();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.negate();
        org.apache.commons.math.complex.Complex complex65 = complex63.asin();
        org.apache.commons.math.complex.Complex complex66 = complex63.atan();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sin();
        org.apache.commons.math.complex.Complex complex72 = complex71.acos();
        org.apache.commons.math.complex.Complex complex73 = complex71.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex66.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex77.sin();
        org.apache.commons.math.complex.Complex complex80 = complex57.divide(complex79);
        boolean boolean81 = complex79.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(2.763130833716387d, 0.9752357642135653d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.763130833716387, 0.9752357642135653]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer15.inversetransform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer7.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer7.inversetransform(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer0.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer42.inversetransform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(complexArray63);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.inversetransform2(univariateRealFunction65, (-0.8414709838989786d), 104.94794887516122d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer50.inversetransform2(complexArray65);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray68, throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray66, throwable69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable69);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.String str74 = mathException72.getPattern();
        java.lang.Object[] objArray75 = mathException72.getArguments();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException72);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(complexArray48);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(univariateRealFunction78, 11992.862403001514d, 18481.78033459865d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer19.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(complexArray54);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.transform(univariateRealFunction56, (-9240.89018634622d), (double) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        java.lang.Class<?> wildcardClass34 = complex32.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer37.transform(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.inversetransform2(complexArray49);
        double[] doubleArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 6.092370434466807E-6d, 1.1752011936438014d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        double double29 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex13.add(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex28.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex39.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex42.negate();
        org.apache.commons.math.complex.Complex complex46 = complex35.multiply(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        boolean boolean51 = complex49.isInfinite();
        org.apache.commons.math.complex.Complex complex52 = complex46.pow(complex49);
        org.apache.commons.math.complex.Complex complex53 = complex49.tanh();
        org.apache.commons.math.complex.Complex complex54 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex55 = complex49.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex62.subtract(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex65.negate();
        org.apache.commons.math.complex.Complex complex69 = complex58.multiply(complex68);
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        boolean boolean74 = complex72.isInfinite();
        org.apache.commons.math.complex.Complex complex75 = complex69.pow(complex72);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = complex49.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt1z();
        org.apache.commons.math.complex.Complex complex80 = complex32.multiply(complex78);
        org.apache.commons.math.complex.Complex complex81 = complex78.sqrt1z();
        double double82 = complex81.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-2.679053673795176E-4d) + "'", double29 == (-2.679053673795176E-4d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex26);
        double double28 = complex26.abs();
        boolean boolean29 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex43 = complex32.multiply(complex42);
        boolean boolean44 = complex26.equals((java.lang.Object) complex42);
        org.apache.commons.math.complex.Complex complex45 = complex26.asin();
        org.apache.commons.math.complex.Complex complex46 = complex45.atan();
        org.apache.commons.math.complex.Complex complex47 = complex9.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex47.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 22040.29691869634d + "'", double28 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.inversetransform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer31.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform2(doubleArray57);
        double[] doubleArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, 0.08295426844511536d);
        double[] doubleArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, 10.324062088703297d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-7914.129511094131, -1174560.9622884102]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-7914.129511094131, -1174560.9622884102]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-7914.129511094131, -1174560.9622884102]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-7914.129511094131, -1174560.9622884102]");
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        double double27 = complex26.abs();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        boolean boolean37 = complex10.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.exp();
        org.apache.commons.math.complex.Complex complex39 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = complex46.tanh();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex51 = complex46.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex(104.94395117461468d, (double) '#');
        org.apache.commons.math.complex.Complex complex57 = complex52.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex52.sin();
        org.apache.commons.math.complex.Complex complex59 = complex36.pow(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex36.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.035834395863998524d + "'", double27 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.atan();
        double double21 = complex16.abs();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        double[] doubleArray46 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.transform2(doubleArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray47);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray47, throwable49);
        java.lang.String str51 = mathException50.getPattern();
        java.lang.String str52 = mathException50.getPattern();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        java.lang.String str55 = mathException54.getPattern();
        java.lang.String str56 = mathException54.getPattern();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException57);
        boolean boolean59 = complex16.equals((java.lang.Object) mathException58);
        double double60 = complex16.getReal();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.142135623730951d + "'", double21 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.log();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex12.pow(complex20);
        org.apache.commons.math.complex.Complex complex27 = complex12.tanh();
        double double28 = complex12.abs();
        double double29 = complex12.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 14.142135623730951d + "'", double28 == 14.142135623730951d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.String str30 = mathException28.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray59);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray59, throwable61);
        java.lang.String str63 = mathException62.getPattern();
        java.lang.String str64 = mathException62.getPattern();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray67 = mathException65.getSuppressed();
        java.lang.String str68 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) mathException69);
        java.lang.String str72 = mathException69.getPattern();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str72, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        double double31 = complex29.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex24.subtract(complex29);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex29.pow(complex40);
        double double44 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex18.divide(complex40);
        org.apache.commons.math.complex.Complex complex46 = complex18.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sin();
        org.apache.commons.math.complex.Complex complex48 = complex46.exp();
        org.apache.commons.math.complex.Complex complex49 = complex0.subtract(complex48);
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = complex52.equals(obj53);
        org.apache.commons.math.complex.Complex complex55 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sin();
        org.apache.commons.math.complex.Complex complex61 = complex60.acos();
        org.apache.commons.math.complex.Complex complex62 = complex52.add(complex60);
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex60.subtract(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex67.sin();
        org.apache.commons.math.complex.Complex complex69 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex0.add(complex68);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9240.89014825243d) + "'", double31 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.4698520192911105E-5d + "'", double44 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex18.divide(complex21);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex47.asin();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex23.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex17.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.tanh();
        org.apache.commons.math.complex.Complex complex56 = complex55.acos();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.035834395863998524d + "'", double40 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        boolean boolean51 = complex24.equals((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sin();
        org.apache.commons.math.complex.Complex complex55 = complex12.add(complex52);
        org.apache.commons.math.complex.Complex complex56 = complex52.cos();
        org.apache.commons.math.complex.Complex complex57 = complex52.log();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.acos();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.negate();
        org.apache.commons.math.complex.Complex complex70 = complex68.asin();
        org.apache.commons.math.complex.Complex complex71 = complex68.atan();
        org.apache.commons.math.complex.Complex complex72 = complex64.divide(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex52.add(complex64);
        java.lang.Class<?> wildcardClass74 = complex52.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.035834395863998524d + "'", double41 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex6.equals((java.lang.Object) complex17);
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        double double27 = complex26.abs();
        org.apache.commons.math.complex.Complex complex28 = complex17.multiply(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex17.cos();
        org.apache.commons.math.complex.Complex complex30 = complex17.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 14.142135623730951d + "'", double19 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 104.94395117461468d + "'", double27 == 104.94395117461468d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex3 = complex2.sinh();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        double double12 = complex11.abs();
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex4.pow(complex17);
        org.apache.commons.math.complex.Complex complex21 = complex20.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 22026.465794806718d + "'", double12 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex14.acos();
        org.apache.commons.math.complex.Complex complex17 = complex14.acos();
        org.apache.commons.math.complex.Complex complex18 = complex10.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex5.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex39.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex31.multiply(complex47);
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex31.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex31.acos();
        org.apache.commons.math.complex.Complex complex55 = complex23.pow(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9855462951086804d, 1.511812924233695d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException16);
        java.lang.Object[] objArray18 = mathException16.getArguments();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(objArray18);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex14.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex25.asin();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex38.atan();
        double double40 = complex38.getReal();
        org.apache.commons.math.complex.Complex complex41 = complex33.subtract(complex38);
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.asin();
        org.apache.commons.math.complex.Complex complex48 = complex45.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex38.pow(complex49);
        org.apache.commons.math.complex.Complex complex53 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex49.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex58.subtract(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex61.negate();
        org.apache.commons.math.complex.Complex complex65 = complex64.tanh();
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.negate();
        org.apache.commons.math.complex.Complex complex80 = complex78.acos();
        org.apache.commons.math.complex.Complex complex81 = complex74.pow(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex72.subtract(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.tanh();
        org.apache.commons.math.complex.Complex complex84 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex81.cos();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt1z();
        org.apache.commons.math.complex.Complex complex87 = complex67.divide(complex86);
        double double88 = complex86.getImaginary();
        org.apache.commons.math.complex.Complex complex89 = complex54.pow(complex86);
        org.apache.commons.math.complex.Complex complex90 = complex27.subtract(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex89.acos();
        org.apache.commons.math.complex.Complex complex92 = complex9.add(complex89);
        java.lang.Class<?> wildcardClass93 = complex92.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9240.89014825243d) + "'", double40 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex10.pow(complex21);
        double double25 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex21.exp();
        boolean boolean28 = complex27.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.4698520192911105E-5d + "'", double25 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(9.728850659156027d, (double) 100.0f);
        org.apache.commons.math.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer17.inversetransform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        double[] doubleArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray43, 10.324062088703297d);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray43, (-11982.862390657456d));
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(doubleArray43);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(univariateRealFunction53, (-5.693156703928211d), (double) 10L, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-123711.81532153519, -1.8360461330183577E7]");
        org.junit.Assert.assertNotNull(complexArray52);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex48.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        org.apache.commons.math.complex.Complex complex51 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex32.add(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex32.negate();
        double double54 = complex53.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform2(doubleArray31);
        double[] doubleArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, 0.035834395863998524d);
        double[] doubleArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray35, 3.342308207562617d);
        double[] doubleArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray37, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(univariateRealFunction49, 0.0d, 1.136679119559051E-4d, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        double[] doubleArray57 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer36.transform2(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer36.inversetransform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer31.inversetransform2(doubleArray62);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, (double) 'a');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 14.142135623730951d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray74);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(complexArray74);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, (double) ' ');
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, 5991.431182979468d);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform2(complexArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray80);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.log();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex12.pow(complex20);
        boolean boolean27 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex37.subtract(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex29.divide(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex41.tan();
        double double47 = complex41.abs();
        org.apache.commons.math.complex.Complex complex48 = complex41.cos();
        org.apache.commons.math.complex.Complex complex49 = complex28.pow(complex41);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 11013.232906666808d + "'", double47 == 11013.232906666808d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer8.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer8.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer8.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer42.transform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.inversetransform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer42.transform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform2(doubleArray84);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer42.transform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer8.transform2(doubleArray88);
        double[] doubleArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, 6.525012184105979d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform2(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, 14.142224011249972d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.23381986962266726, 34.70194551165263]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.23381986962266726, 34.70194551165263]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.23381986962266726, 34.70194551165263]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex10.subtract(complex17);
        double double19 = complex10.abs();
        org.apache.commons.math.complex.Complex complex20 = complex10.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.negate();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex37.acos();
        org.apache.commons.math.complex.Complex complex41 = complex33.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.cos();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex40.asin();
        org.apache.commons.math.complex.Complex complex45 = complex40.negate();
        org.apache.commons.math.complex.Complex complex46 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.asin();
        org.apache.commons.math.complex.Complex complex53 = complex50.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sin();
        org.apache.commons.math.complex.Complex complex62 = complex61.acos();
        org.apache.commons.math.complex.Complex complex63 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex61.sqrt1z();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.negate();
        org.apache.commons.math.complex.Complex complex71 = complex69.asin();
        org.apache.commons.math.complex.Complex complex72 = complex69.atan();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.sin();
        org.apache.commons.math.complex.Complex complex78 = complex77.acos();
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex72.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex64.multiply(complex80);
        org.apache.commons.math.complex.Complex complex84 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex85 = complex84.exp();
        org.apache.commons.math.complex.Complex complex86 = complex85.sin();
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex88 = complex64.divide(complex86);
        org.apache.commons.math.complex.Complex complex89 = complex55.add(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex46.add(complex88);
        org.apache.commons.math.complex.Complex complex91 = complex90.asin();
        org.apache.commons.math.complex.Complex complex92 = complex90.atan();
        double double93 = complex90.getReal();
        org.apache.commons.math.complex.Complex complex94 = complex27.add(complex90);
        org.apache.commons.math.complex.Complex complex95 = complex27.atan();
        org.apache.commons.math.complex.Complex complex96 = complex20.divide(complex95);
        org.apache.commons.math.complex.Complex complex97 = complex95.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9999999983177603d + "'", double19 == 0.9999999983177603d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(9247.50312818331d, (-1.7387935193125343d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [9247.50312818331, -1.7387935193125343]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex6.acos();
        org.apache.commons.math.complex.Complex complex9 = complex6.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.log();
        org.apache.commons.math.complex.Complex complex12 = complex9.tan();
        org.apache.commons.math.complex.Complex complex13 = complex1.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex1.cosh();
        java.lang.Class<?> wildcardClass15 = complex1.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex13.cosh();
        boolean boolean17 = complex16.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex17 = complex15.asin();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.negate();
        org.apache.commons.math.complex.Complex complex33 = complex29.asin();
        org.apache.commons.math.complex.Complex complex34 = complex29.negate();
        org.apache.commons.math.complex.Complex complex35 = complex22.multiply(complex29);
        org.apache.commons.math.complex.Complex complex36 = complex29.asin();
        org.apache.commons.math.complex.Complex complex37 = complex29.log();
        org.apache.commons.math.complex.Complex complex38 = complex15.pow(complex29);
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 2.566370623987466d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform2(complexArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray58);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 3.342308207562617d, 3.141592653589793d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.342308207562617, 3.141592653589793]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex18);
        boolean boolean21 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex14.log();
        org.apache.commons.math.complex.Complex complex23 = complex7.add(complex14);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex42 = complex7.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex42.multiply(complex45);
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex56.sinh();
        org.apache.commons.math.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math.complex.Complex complex59 = complex56.acos();
        org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex61.acos();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex66.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex69.negate();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex69.divide(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        double double79 = complex78.abs();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.negate();
        org.apache.commons.math.complex.Complex complex85 = complex83.acos();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt();
        org.apache.commons.math.complex.Complex complex87 = complex78.multiply(complex86);
        org.apache.commons.math.complex.Complex complex90 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex91 = complex90.negate();
        org.apache.commons.math.complex.Complex complex92 = complex90.exp();
        org.apache.commons.math.complex.Complex complex93 = complex86.divide(complex90);
        org.apache.commons.math.complex.Complex complex94 = complex62.multiply(complex90);
        boolean boolean95 = complex47.equals((java.lang.Object) complex90);
        org.apache.commons.math.complex.Complex complex96 = complex90.tan();
        org.apache.commons.math.complex.Complex complex97 = complex96.cosh();
        double double98 = complex96.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.1715243988715174d + "'", double41 == 3.1715243988715174d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.035834395863998524d + "'", double79 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.557407724654902d + "'", double98 == 1.557407724654902d);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException4);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.divide(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex12.subtract(complex25);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex25.divide(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex3.pow(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex40.asin();
        org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer6.inversetransform2(complexArray21);
        double[] doubleArray27 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer6.transform2(doubleArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray28);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray28, throwable30);
        java.lang.String str32 = mathException31.getPattern();
        java.lang.String str33 = mathException31.getPattern();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        java.lang.String str37 = mathException34.getPattern();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.inversetransform(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex78 };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer73.transform2(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer65.inversetransform2(complexArray80);
        double[] doubleArray86 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer65.transform2(doubleArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray87);
        java.lang.Throwable throwable89 = null;
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray87, throwable89);
        java.lang.String str91 = mathException90.getPattern();
        java.lang.Object[] objArray92 = mathException90.getArguments();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) mathException90);
        java.lang.String str94 = mathException90.getPattern();
        java.lang.String str95 = mathException90.getPattern();
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        mathException38.addSuppressed((java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", objArray1, (java.lang.Throwable) mathException90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.exp();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        double double36 = complex32.abs();
        boolean boolean37 = complex32.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.570758233200585d + "'", double36 == 1.570758233200585d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        double[] doubleArray45 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer24.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer7.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer49.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer49.transform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.08295426844511536d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray88, 10.366472469977241d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 5991.431043598024d, (-0.9912858099911315d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        double[] doubleArray72 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.transform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer34.transform(complexArray73);
        boolean boolean75 = complex33.equals((java.lang.Object) fastFourierTransformer34);
        boolean boolean76 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex77 = complex33.tan();
        org.apache.commons.math.complex.Complex complex78 = complex15.multiply(complex33);
        org.apache.commons.math.complex.Complex complex79 = complex7.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        java.lang.Class<?> wildcardClass82 = complex81.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex21.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex31.asin();
        org.apache.commons.math.complex.Complex complex33 = complex13.divide(complex32);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(10.996801933833694d, 1.4650976035356547d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.996801933833694, 1.4650976035356547]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex6.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex39.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex42.negate();
        org.apache.commons.math.complex.Complex complex46 = complex42.asin();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = complex42.multiply(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex42.sqrt1z();
        org.apache.commons.math.complex.Complex complex55 = complex54.cos();
        org.apache.commons.math.complex.Complex complex56 = complex34.subtract(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex54.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-11982.862390657456d) + "'", double52 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.inversetransform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        double[] doubleArray72 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.transform2(doubleArray72);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray72, (double) 100L);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 11766.272084123093d);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 0.8414709848078965d);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 2.4698520192911105E-5d);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (-3.763440814919645E-9d));
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.inversetransform(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform(univariateRealFunction85, 3.9231794343056575E-6d, 0.27400506503548183d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[9.203098201902259E-8, -4.785611064989173E-6, 9.203098201902259E-8, -4.785611064989173E-6]");
        org.junit.Assert.assertNotNull(complexArray84);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-19251.080757928077d), 1.969478543259082d);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex18 = complex11.pow(complex17);
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer24.transform(complexArray63);
        boolean boolean65 = complex22.equals((java.lang.Object) complexArray64);
        org.apache.commons.math.complex.Complex complex66 = complex22.log();
        org.apache.commons.math.complex.Complex complex67 = complex22.atan();
        boolean boolean68 = complex7.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex69 = complex22.tan();
        org.apache.commons.math.complex.Complex complex70 = complex69.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.tan();
        org.apache.commons.math.complex.Complex complex36 = complex19.pow(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex37.asin();
        org.apache.commons.math.complex.Complex complex39 = complex37.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-11982.862390657456d) + "'", double16 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.Object[] objArray67 = mathException65.getArguments();
        mathException37.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException65);
        mathException10.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray71 = mathException65.getArguments();
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        java.lang.Object[] objArray73 = mathException65.getArguments();
        java.lang.Throwable[] throwableArray74 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray74);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer29.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer29.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(doubleArray59);
        double[] doubleArray69 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, 0.0d);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, (double) '#');
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 14036.654899895804d);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (-142.35883754318695d));
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (-10.693147180349666d));
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 104.94395117461468d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(doubleArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex6.multiply(complex15);
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj22 = new java.lang.Object();
        boolean boolean23 = complex21.equals(obj22);
        org.apache.commons.math.complex.Complex complex24 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex31 = complex21.add(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex6.divide(complex35);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex22.negate();
        org.apache.commons.math.complex.Complex complex25 = complex22.sin();
        org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex25);
        java.lang.Class<?> wildcardClass27 = complex25.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex16.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex20);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex4.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        double[] doubleArray37 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer16.transform2(doubleArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray64);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray64, throwable66);
        java.lang.String str68 = mathException67.getPattern();
        java.lang.Object[] objArray69 = mathException67.getArguments();
        mathException39.addSuppressed((java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException67);
        mathException12.addSuppressed((java.lang.Throwable) mathException67);
        java.lang.Object[] objArray73 = mathException12.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray73);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException76);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer33.inversetransform2(complexArray48);
        double[] doubleArray54 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer33.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer16.transform(complexArray55);
        boolean boolean57 = complex15.equals((java.lang.Object) fastFourierTransformer16);
        boolean boolean58 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex59 = complex15.tan();
        double double60 = complex15.abs();
        org.apache.commons.math.complex.Complex complex61 = complex15.acos();
        org.apache.commons.math.complex.Complex complex62 = complex15.exp();
        org.apache.commons.math.complex.Complex complex63 = complex5.pow(complex15);
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex71.sinh();
        org.apache.commons.math.complex.Complex complex74 = complex73.atan();
        org.apache.commons.math.complex.Complex complex75 = complex67.add(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex15.multiply(complex74);
        org.apache.commons.math.complex.Complex complex77 = complex15.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 14.142135623730951d + "'", double60 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) '#', (double) (-1L));
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex18);
        boolean boolean21 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex14.log();
        org.apache.commons.math.complex.Complex complex23 = complex7.add(complex14);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex42 = complex7.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex40.negate();
        org.apache.commons.math.complex.Complex complex44 = complex40.log();
        boolean boolean45 = complex44.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.1715243988715174d + "'", double41 == 3.1715243988715174d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        double[] doubleArray69 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.transform2(doubleArray69);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray72, 11766.272084123093d);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.exp();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray83 = new org.apache.commons.math.complex.Complex[] { complex82 };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer77.transform2(complexArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform(complexArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray0, (-2.4698520192911105E-5d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer23.transform(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer65.transform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.inversetransform(complexArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.inversetransform(univariateRealFunction80, 4.810294133680568d, 10.739407619444723d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        boolean boolean4 = complex1.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        java.lang.Object obj17 = null;
        boolean boolean18 = complex16.equals(obj17);
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex25.subtract(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        boolean boolean33 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex39.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.cos();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex50.subtract(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex53.negate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex53.divide(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        double double63 = complex62.abs();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex69 = complex67.acos();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex62.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.negate();
        boolean boolean73 = complex46.equals((java.lang.Object) complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.tanh();
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex74.sin();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex80.sinh();
        org.apache.commons.math.complex.Complex complex84 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex85.sinh();
        org.apache.commons.math.complex.Complex complex87 = complex85.acos();
        org.apache.commons.math.complex.Complex complex88 = complex85.acos();
        org.apache.commons.math.complex.Complex complex89 = complex81.divide(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex74.subtract(complex81);
        org.apache.commons.math.complex.Complex complex91 = complex35.add(complex74);
        org.apache.commons.math.complex.Complex complex92 = complex91.sin();
        org.apache.commons.math.complex.Complex complex93 = complex91.acos();
        org.apache.commons.math.complex.Complex complex94 = complex93.log();
        org.apache.commons.math.complex.Complex complex95 = complex16.multiply(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex7.add(complex16);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.035834395863998524d + "'", double63 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer0.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform2(doubleArray46);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray46, 0.035834395863998524d);
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray50, (double) 0);
        double[] doubleArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 100.0d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform2(doubleArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform(univariateRealFunction82, 14.614048750383335d, (-2.3012033191608836d), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [14.614048750383335, -2.3012033191608836]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray81);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex32.negate();
        org.apache.commons.math.complex.Complex complex36 = complex25.multiply(complex35);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex36.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex16.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex16.tan();
        double double48 = complex47.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9999999983177603d + "'", double48 == 0.9999999983177603d);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex49.sinh();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer51.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer51.transform2(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, 2.566370623987466d);
        boolean boolean75 = complex50.equals((java.lang.Object) doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(doubleArray74);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform2(univariateRealFunction77, 7.717623508000023E-5d, (-0.7066198167699884d), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [7.717623508000023E-5, -0.7066198167699884]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.complex.Complex complex29 = complex18.multiply(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        boolean boolean34 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex35 = complex29.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = complex32.asin();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex42.asin();
        org.apache.commons.math.complex.Complex complex45 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.asin();
        org.apache.commons.math.complex.Complex complex53 = complex50.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex54.conjugate();
        double double56 = complex54.abs();
        org.apache.commons.math.complex.Complex complex57 = complex54.negate();
        org.apache.commons.math.complex.Complex complex58 = complex46.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex32.add(complex46);
        org.apache.commons.math.complex.Complex complex60 = complex32.sin();
        org.apache.commons.math.complex.Complex complex61 = complex60.asin();
        org.apache.commons.math.complex.Complex complex62 = complex12.divide(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex60.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.570758233200585d + "'", double56 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(148.4131591025766d, 4.402371196203514d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [148.4131591025766, 4.402371196203514]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex23 = complex7.pow(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex5.multiply(complex7);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        boolean boolean29 = complex27.equals(obj28);
        org.apache.commons.math.complex.Complex complex30 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex27.add(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex7.add(complex39);
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.acos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex65 = complex47.subtract(complex60);
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex69.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex69.acos();
        org.apache.commons.math.complex.Complex complex72 = complex69.acos();
        org.apache.commons.math.complex.Complex complex73 = complex72.tanh();
        org.apache.commons.math.complex.Complex complex74 = complex60.divide(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex7.pow(complex72);
        org.apache.commons.math.complex.Complex complex76 = null;
        org.apache.commons.math.complex.Complex complex77 = complex75.subtract(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex77.sinh();
        org.apache.commons.math.complex.Complex complex79 = complex77.sqrt();
        java.lang.Class<?> wildcardClass80 = complex77.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-10.693147180349666d), 1.136679119559051E-4d);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.4654608065165322d, 4.690420938743911d);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        double[] doubleArray39 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer18.transform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer1.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer42.inversetransform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer61.inversetransform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer42.transform(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer1.inversetransform2(complexArray76);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!");
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray76, (java.lang.Throwable) mathException81);
        java.lang.Throwable[] throwableArray83 = mathException82.getSuppressed();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.035834395863998524d);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 0);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer62.inversetransform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer62.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray84, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform(complexArray84);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform2(univariateRealFunction88, 0.0d, (-5991.431207677988d), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, -5991.431207677988]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.2882551587809412d, (-5991.431207677988d));
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) '4', (double) 1.0f);
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex5.sin();
        org.apache.commons.math.complex.Complex complex8 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex2.divide(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex2.acos();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        boolean boolean11 = complex10.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.5430806348152437d, (-2.4698520192911105E-5d));
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer1.inversetransform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer30.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer49.inversetransform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer30.transform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.transform2(doubleArray72);
        double[] doubleArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray72, 0.035834395863998524d);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer1.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, (-9.975031327880009d));
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray79, throwable82);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray81);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.transform(complexArray49);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(univariateRealFunction51, 11013.232795482763d, 0.009048521180857947d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11013.232795482763, 0.009048521180857947]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        double[] doubleArray39 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer18.transform2(doubleArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, (-3.763440814919645E-9d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer14.transform(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer28.inversetransform(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer14.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 42.12194549221161d);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(complexArray58);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform2(univariateRealFunction63, (-0.7071067819223633d), 9.728850659156027d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-7.665522686975014d), 3.4330616811688754d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex37.subtract(complex40);
        boolean boolean43 = complex31.equals((java.lang.Object) complex42);
        org.apache.commons.math.complex.Complex complex44 = complex15.subtract(complex42);
        boolean boolean45 = complex9.equals((java.lang.Object) complex42);
        org.apache.commons.math.complex.Complex complex46 = complex42.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        double[] doubleArray5 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray7 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray5, 0.0d);
        double[] doubleArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray5, (double) '#');
        double[] doubleArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray5, (-0.9912858099911316d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -0.0, 0.0, -0.0, 0.0]");
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer68.inversetransform(complexArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(complexArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-19251.080757928077d), (double) (-1L));
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        boolean boolean16 = complex15.isInfinite();
        double double17 = complex15.abs();
        double double18 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex23.asin();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        double double28 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex40 = complex38.acos();
        org.apache.commons.math.complex.Complex complex41 = complex38.acos();
        org.apache.commons.math.complex.Complex complex42 = complex34.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.cos();
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex41.asin();
        org.apache.commons.math.complex.Complex complex46 = complex29.pow(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex52 = complex46.multiply(complex49);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.negate();
        org.apache.commons.math.complex.Complex complex65 = complex63.acos();
        org.apache.commons.math.complex.Complex complex66 = complex59.pow(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex57.subtract(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex68.sin();
        org.apache.commons.math.complex.Complex complex70 = complex68.asin();
        org.apache.commons.math.complex.Complex complex71 = complex52.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex15.add(complex52);
        org.apache.commons.math.complex.Complex complex73 = complex2.add(complex72);
        double double74 = complex73.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9999999983177603d + "'", double17 == 0.9999999983177603d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-3.763440814919645E-9d) + "'", double18 == (-3.763440814919645E-9d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.4698520192911105E-5d + "'", double28 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 19250.68999956769d + "'", double74 == 19250.68999956769d);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer16.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.inversetransform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer16.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer2.inversetransform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 18491.78033459865d);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, 0.0d);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray59);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.negate();
        org.apache.commons.math.complex.Complex complex23 = complex22.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.acos();
        org.apache.commons.math.complex.Complex complex39 = complex32.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex30.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex39.cos();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex25.divide(complex44);
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex44.pow(complex48);
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex54.negate();
        org.apache.commons.math.complex.Complex complex56 = complex54.negate();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.tan();
        double double59 = complex58.abs();
        org.apache.commons.math.complex.Complex complex60 = complex50.add(complex58);
        boolean boolean61 = complex12.equals((java.lang.Object) complex60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer36.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer36.transform2(doubleArray54);
        double[] doubleArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer2.transform(doubleArray54);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray61, (java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.String str70 = mathException67.toString();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str70, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform(complexArray43);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.transform(univariateRealFunction46, 11020.828705888358d, 1066.7538428229336d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11020.828705888358, 1066.7538428229336]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer23.transform(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (-0.03563670930070898d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray66);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex25 };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer20.transform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer20.inversetransform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer20.transform(complexArray59);
        boolean boolean61 = complex19.equals((java.lang.Object) fastFourierTransformer20);
        boolean boolean62 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex63 = complex19.tan();
        double double64 = complex63.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        boolean boolean67 = complex63.isNaN();
        double double68 = complex63.abs();
        org.apache.commons.math.complex.Complex complex69 = complex7.subtract(complex63);
        double double70 = complex69.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = complex69.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-0.9999999983177603d) + "'", double64 == (-0.9999999983177603d));
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.9999999983177603d + "'", double68 == 0.9999999983177603d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.9999928750078377d + "'", double70 == 0.9999928750078377d);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex8.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        boolean boolean18 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        boolean boolean21 = complex19.isNaN();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.Object[] objArray21 = mathException19.getArguments();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex13.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer34.transform2(doubleArray80);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.transform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform2(complexArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray84);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = complex13.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer8.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(complexArray33);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer0.transform(univariateRealFunction35, 0.0d, (-1.1752011936438014d), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, -1.1752011936438014]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 11766.272084123093d, 1.0d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        org.apache.commons.math.complex.Complex complex54 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt();
        boolean boolean56 = complex53.isInfinite();
        boolean boolean57 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex66.sinh();
        org.apache.commons.math.complex.Complex complex68 = complex66.acos();
        org.apache.commons.math.complex.Complex complex69 = complex66.acos();
        org.apache.commons.math.complex.Complex complex70 = complex62.divide(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.cos();
        org.apache.commons.math.complex.Complex complex72 = complex69.tan();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        double double78 = complex76.getImaginary();
        org.apache.commons.math.complex.Complex complex79 = complex76.tanh();
        org.apache.commons.math.complex.Complex complex80 = complex69.divide(complex76);
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt1z();
        boolean boolean82 = complex81.isInfinite();
        org.apache.commons.math.complex.Complex complex83 = complex53.subtract(complex81);
        org.apache.commons.math.complex.Complex complex84 = complex83.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-11982.862390657456d) + "'", double78 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.inversetransform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform2(doubleArray64);
        double[] doubleArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, 0.035834395863998524d);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray68, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.transform(doubleArray70);
        double[] doubleArray77 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 0.0d);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) '#');
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 14.142135623730951d);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform2(doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer48.transform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer62.inversetransform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer62.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer48.transform2(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray90 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer87.inversetransform2(doubleArray90);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer86.transform2(doubleArray90);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer48.transform2(doubleArray94);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray95);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.inversetransform(complexArray95);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.transform2(doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        double[] doubleArray32 = new double[] { (short) -1, 10.0d, (byte) -1, ' ', (-1.0d) };
        double[] doubleArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray32, 0.0d);
        double[] doubleArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray32, (double) '#');
        double[] doubleArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, 14036.654899895804d);
        double[] doubleArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, (-142.35883754318695d));
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, (-10.693147180349666d));
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, 104.94395117461468d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform2(doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-0.0, 0.0, -0.0, 0.0, -0.0]");
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(10.049436203736276d, 0.8492018891998457d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.049436203736276, 0.8492018891998457]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        double double19 = complex18.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.7066198167699884d) + "'", double19 == (-0.7066198167699884d));
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer1.inversetransform(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer1.inversetransform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.inversetransform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76, throwable78);
        java.lang.String str80 = mathException79.getPattern();
        java.lang.Object[] objArray81 = mathException79.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51, (java.lang.Throwable) mathException79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer1.transform2(complexArray51);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray83, throwable84);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, (-1.0947552508950837E-7d));
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, 0.006775931892946596d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        double double29 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex13.add(complex28);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex39.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex35.divide(complex45);
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex13.pow(complex45);
        boolean boolean49 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex50 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-2.679053673795176E-4d) + "'", double29 == (-2.679053673795176E-4d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 22040.29691869634d + "'", double47 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex6.acos();
        org.apache.commons.math.complex.Complex complex9 = complex6.acos();
        org.apache.commons.math.complex.Complex complex10 = complex2.pow(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        boolean boolean12 = complex11.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray49, throwable51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.String str54 = mathException52.getPattern();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = mathException56.getSuppressed();
        boolean boolean59 = complex13.equals((java.lang.Object) mathException56);
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj63 = new java.lang.Object();
        boolean boolean64 = complex62.equals(obj63);
        org.apache.commons.math.complex.Complex complex65 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex13.pow(complex65);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.sinh();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex81.sinh();
        org.apache.commons.math.complex.Complex complex83 = complex81.acos();
        org.apache.commons.math.complex.Complex complex84 = complex81.acos();
        org.apache.commons.math.complex.Complex complex85 = complex77.divide(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.cos();
        org.apache.commons.math.complex.Complex complex87 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex88 = complex84.asin();
        org.apache.commons.math.complex.Complex complex89 = complex84.negate();
        double double90 = complex89.abs();
        org.apache.commons.math.complex.Complex complex91 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex92 = complex91.atan();
        double double93 = complex91.abs();
        org.apache.commons.math.complex.Complex complex94 = complex91.negate();
        org.apache.commons.math.complex.Complex complex95 = complex89.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex95.sqrt1z();
        org.apache.commons.math.complex.Complex complex97 = complex72.divide(complex96);
        org.apache.commons.math.complex.Complex complex98 = complex65.add(complex72);
        org.apache.commons.math.complex.Complex complex99 = complex65.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.324062088703297d + "'", double90 == 10.324062088703297d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform2(doubleArray21);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray21, 0.035834395863998524d);
        double[] doubleArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 0);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer31.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer45.inversetransform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 10.693147083113669d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 3.9231794343056575E-6d);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 18491.78033459865d);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform2(doubleArray79);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform2(univariateRealFunction81, 7628.527121079825d, 10.996801933833694d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math.complex.Complex complex13 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        double double21 = complex19.getReal();
        org.apache.commons.math.complex.Complex complex22 = complex19.atan();
        double double23 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex14.add(complex24);
        boolean boolean26 = complex24.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9240.89014825243d) + "'", double21 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-4.93970403857352E-5d) + "'", double23 == (-4.93970403857352E-5d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer60.inversetransform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer60.inversetransform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer38.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform(complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 1.136679119559051E-4d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        double[] doubleArray40 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.transform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer2.transform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer2.inversetransform(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67, (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray67);
        java.lang.Object[] objArray81 = mathException80.getArguments();
        java.lang.Throwable[] throwableArray82 = mathException80.getSuppressed();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex9.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex9.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.negate();
        org.apache.commons.math.complex.Complex complex29 = complex27.asin();
        org.apache.commons.math.complex.Complex complex30 = complex27.atan();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex30.multiply(complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer49.inversetransform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        double[] doubleArray87 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer66.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer49.transform(complexArray88);
        boolean boolean90 = complex48.equals((java.lang.Object) fastFourierTransformer49);
        boolean boolean91 = complex48.isNaN();
        org.apache.commons.math.complex.Complex complex92 = complex48.tan();
        org.apache.commons.math.complex.Complex complex93 = complex30.multiply(complex48);
        org.apache.commons.math.complex.Complex complex94 = complex23.divide(complex93);
        org.apache.commons.math.complex.Complex complex95 = complex94.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer5.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer5.inversetransform(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer39.transform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer39.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer62.transform(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer76.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer62.transform2(doubleArray80);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer5.transform(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform(doubleArray80);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(univariateRealFunction89, 28046.050736663732d, (-7.291700864257425d), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [28046.050736663732, -7.291700864257425]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer28.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer28.inversetransform2(complexArray57);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(complexArray61);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform2(univariateRealFunction64, 2.2564175149287826d, 0.035834395863998524d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex6.equals((java.lang.Object) complex17);
        boolean boolean19 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex20 = complex6.log();
        org.apache.commons.math.complex.Complex complex21 = complex6.exp();
        org.apache.commons.math.complex.Complex complex22 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        boolean boolean36 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex37 = complex24.add(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex6.multiply(complex38);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        double double15 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex11.subtract(complex27);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex11.add(complex42);
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex47.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        boolean boolean55 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex56 = complex11.add(complex53);
        double double57 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex58 = complex11.asin();
        java.lang.Class<?> wildcardClass59 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.566370623987466d + "'", double15 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.566370623987466d + "'", double57 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex16.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex9.subtract(complex16);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        boolean boolean27 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex25.atan();
        org.apache.commons.math.complex.Complex complex29 = complex25.negate();
        org.apache.commons.math.complex.Complex complex30 = complex19.subtract(complex25);
        org.apache.commons.math.complex.Complex complex31 = complex19.negate();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex40.acos();
        org.apache.commons.math.complex.Complex complex44 = complex36.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = complex45.atan();
        double double47 = complex46.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex19.divide(complex48);
        double double50 = complex19.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 42.12194549221161d + "'", double11 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 43.12194549221161d + "'", double50 == 43.12194549221161d);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        double[] doubleArray25 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer4.transform2(doubleArray25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray26);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray26, throwable28);
        java.lang.String str30 = mathException29.getPattern();
        java.lang.String str31 = mathException29.getPattern();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.lang.String str35 = mathException32.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.String str67 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray70 = mathException69.getSuppressed();
        java.lang.Throwable[] throwableArray71 = mathException69.getSuppressed();
        java.lang.Object[] objArray72 = mathException69.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray74 = mathException73.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) mathException75);
        java.lang.String str77 = mathException75.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.math.MathException: " + "'", str77, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        double[] doubleArray34 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer13.transform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        double[] doubleArray74 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer53.transform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer36.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer13.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer5.inversetransform(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform2(complexArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray85, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform(doubleArray88);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform(univariateRealFunction90, 2.4698520192911105E-5d, (-1.570758233006406d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.4698520192911105E-5, -1.570758233006406]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        double double29 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex13.add(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex28.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex32.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-2.679053673795176E-4d) + "'", double29 == (-2.679053673795176E-4d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 7.717623508000023E-5d + "'", double33 == 7.717623508000023E-5d);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex15.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer39.transform(complexArray78);
        boolean boolean80 = complex37.equals((java.lang.Object) complexArray79);
        boolean boolean81 = complex15.equals((java.lang.Object) complexArray79);
        org.apache.commons.math.complex.Complex complex82 = complex11.pow(complex15);
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = complex83.cos();
        org.apache.commons.math.complex.Complex complex85 = complex84.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer24.transform(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray89 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer86.inversetransform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer85.transform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer66.inversetransform2(complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer1.inversetransform(complexArray92);
        org.apache.commons.math.complex.Complex[] complexArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray92, 1.0d);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray92);
        java.lang.String str97 = mathException96.getPattern();
        java.lang.Object[] objArray98 = mathException96.getArguments();
        java.lang.Object[] objArray99 = mathException96.getArguments();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str97, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertNotNull(objArray99);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray27, throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray25, throwable28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable28);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.String str33 = mathException31.getPattern();
        java.lang.Object[] objArray34 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray7, (java.lang.Throwable) mathException31);
        java.lang.String str36 = mathException31.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray78 = new org.apache.commons.math.complex.Complex[] { complex77 };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer72.transform2(complexArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer64.inversetransform2(complexArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", objArray82, throwable83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray80, throwable83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer40.inversetransform(complexArray80);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException89);
        mathException31.addSuppressed((java.lang.Throwable) mathException89);
        java.lang.Throwable[] throwableArray92 = mathException31.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-0.9955742870938463d), 5991.431043598024d);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, throwable21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable21);
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        java.lang.String str26 = mathException24.getPattern();
        java.lang.Object[] objArray27 = mathException24.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        java.lang.String str30 = mathException29.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str30, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.negate();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex23.sin();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex38 = complex33.divide(complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex49 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex38.subtract(complex45);
        org.apache.commons.math.complex.Complex complex51 = complex45.asin();
        org.apache.commons.math.complex.Complex complex52 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex45.log();
        org.apache.commons.math.complex.Complex complex54 = complex23.subtract(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex23.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.acos();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex32.negate();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex32.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        double double42 = complex41.abs();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        org.apache.commons.math.complex.Complex complex48 = complex46.acos();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.negate();
        org.apache.commons.math.complex.Complex complex52 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex22.multiply(complex49);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-11982.862390657456d) + "'", double24 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.035834395863998524d + "'", double42 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex15.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        double[] doubleArray77 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.transform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer39.transform(complexArray78);
        boolean boolean80 = complex37.equals((java.lang.Object) complexArray79);
        boolean boolean81 = complex15.equals((java.lang.Object) complexArray79);
        org.apache.commons.math.complex.Complex complex82 = complex11.pow(complex15);
        org.apache.commons.math.complex.Complex complex85 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex86 = complex85.negate();
        org.apache.commons.math.complex.Complex complex89 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex90 = complex89.exp();
        org.apache.commons.math.complex.Complex complex91 = complex86.subtract(complex89);
        org.apache.commons.math.complex.Complex complex92 = complex89.tanh();
        org.apache.commons.math.complex.Complex complex93 = complex11.multiply(complex89);
        double double94 = complex89.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 14.142135623730951d + "'", double94 == 14.142135623730951d);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex9.multiply(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex20.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex6.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer5.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer19.inversetransform(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer5.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform2(doubleArray47);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray47, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer5.transform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        double[] doubleArray74 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer53.transform2(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer53.inversetransform(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer5.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.transform(complexArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform2(univariateRealFunction84, (-142.35883754318695d), 0.6393342588846141d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(3.1715243989676885d, 43.12194549221161d);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        double[] doubleArray29 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer8.transform2(doubleArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray30);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray30, throwable32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer35.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer35.inversetransform(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer69.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer69.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer35.inversetransform(doubleArray87);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer1.transform2(doubleArray87);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray93);
        org.apache.commons.math.complex.Complex[] complexArray97 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray93, (-2.973988443733308E-6d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray93);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer1.transform(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer15.inversetransform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer15.inversetransform(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer1.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer39.transform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer39.transform2(doubleArray57);
        double[] doubleArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer1.transform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform2(doubleArray68);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray68, 0.035834395863998524d);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray72, 3.342308207562617d);
        double[] doubleArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray74, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer1.inversetransform2(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer78.inversetransform2(doubleArray81);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer1.inversetransform2(doubleArray84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray86);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex14);
        double double16 = complex14.abs();
        boolean boolean17 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.multiply(complex30);
        boolean boolean32 = complex14.equals((java.lang.Object) complex30);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex43 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        org.apache.commons.math.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex50.divide(complex60);
        double double62 = complex60.abs();
        boolean boolean63 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex43.multiply(complex60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform2(doubleArray69);
        boolean boolean72 = complex60.equals((java.lang.Object) fastFourierTransformer65);
        org.apache.commons.math.complex.Complex complex73 = complex60.sqrt1z();
        org.apache.commons.math.complex.Complex complex74 = complex30.add(complex60);
        org.apache.commons.math.complex.Complex complex75 = complex30.asin();
        org.apache.commons.math.complex.Complex complex76 = complex75.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 22040.29691869634d + "'", double16 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 22040.29691869634d + "'", double62 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.8414709848078965d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex14.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex25.asin();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex25.add(complex28);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.acos();
        org.apache.commons.math.complex.Complex complex39 = complex32.pow(complex38);
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex38.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex25.pow(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex7.divide(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex46.asin();
        org.apache.commons.math.complex.Complex complex50 = complex46.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        double double15 = complex11.getReal();
        double double16 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex17 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.566370623987466d + "'", double15 == 2.566370623987466d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.566370623987466d + "'", double16 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        double double17 = complex16.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform2(doubleArray21);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray21, 0.035834395863998524d);
        double[] doubleArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 0);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        double[] doubleArray57 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer36.transform2(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer36.inversetransform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer31.inversetransform2(doubleArray62);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform2(doubleArray69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform(univariateRealFunction71, (-0.04991641756298178d), 0.0d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-0.03563670930070898, -5.288956607338394]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-0.03563670930070898, -5.288956607338394]");
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform2(doubleArray41);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer48.inversetransform(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer67.inversetransform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer48.transform(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray84, (double) (byte) 0);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform(complexArray84);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer89 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray92 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer89.inversetransform2(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(complexArray93);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform2(univariateRealFunction95, 1.2933105120246067d, 1.2933105120246067d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform2(doubleArray61);
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray61, 0.035834395863998524d);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform2(doubleArray67);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform2(univariateRealFunction69, 10.046827686460665d, (-5.693156703928211d), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.046827686460665, -5.693156703928211]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray68);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        boolean boolean31 = complex29.isNaN();
        org.apache.commons.math.complex.Complex complex32 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer8.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer8.transform(complexArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.transform(univariateRealFunction24, 15560.29660900602d, 7.717623508000023E-5d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer5.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer33.inversetransform2(complexArray48);
        double[] doubleArray54 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer33.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer57.inversetransform2(complexArray72);
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", objArray75, throwable76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray73, throwable76);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer33.inversetransform(complexArray73);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray29, (java.lang.Throwable) mathException80);
        mathException2.addSuppressed((java.lang.Throwable) mathException82);
        java.lang.String str84 = mathException2.getPattern();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Object[] objArray86 = mathException85.getArguments();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException85);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9247.503074114662d), (double) (byte) 1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        double double4 = complex2.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9247.50312818331d + "'", double4 == 9247.50312818331d);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray44, throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42, throwable45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer2.inversetransform(complexArray42);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray67, throwable70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable70);
        java.lang.Throwable[] throwableArray74 = mathException73.getSuppressed();
        mathException49.addSuppressed((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException73);
        java.lang.String str78 = mathException77.getPattern();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        double[] doubleArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, (double) 'a');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray31, 14.142135623730951d);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1371.7871555019024, 203591.26536437482]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer1.inversetransform(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer1.inversetransform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.inversetransform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76, throwable78);
        java.lang.String str80 = mathException79.getPattern();
        java.lang.Object[] objArray81 = mathException79.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray27, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        java.lang.String str85 = mathException84.getPattern();
        java.lang.String str86 = mathException84.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str85, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str86, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex5.pow(complex17);
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex22.asin();
        org.apache.commons.math.complex.Complex complex25 = complex22.atan();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = complex5.multiply(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex33.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.negate();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex36.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        double double46 = complex45.abs();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.acos();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex45.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex60.subtract(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.negate();
        org.apache.commons.math.complex.Complex complex67 = complex63.asin();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        double double73 = complex71.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = complex63.multiply(complex71);
        org.apache.commons.math.complex.Complex complex75 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex76 = complex75.cos();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex84 = complex83.exp();
        org.apache.commons.math.complex.Complex complex85 = complex80.subtract(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex83.negate();
        org.apache.commons.math.complex.Complex complex89 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex90 = complex89.cosh();
        org.apache.commons.math.complex.Complex complex91 = complex83.divide(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex90.tan();
        org.apache.commons.math.complex.Complex complex93 = complex76.pow(complex90);
        org.apache.commons.math.complex.Complex complex94 = complex56.divide(complex93);
        org.apache.commons.math.complex.Complex complex95 = complex28.subtract(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex94.log();
        boolean boolean97 = complex96.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-5991.431207677988d) + "'", double14 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.035834395863998524d + "'", double46 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-11982.862390657456d) + "'", double73 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-1.5024074532019105d), 10.025031171631717d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        double double54 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex57.asin();
        org.apache.commons.math.complex.Complex complex59 = complex57.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-0.9999999983177603d) + "'", double54 == (-0.9999999983177603d));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer11.inversetransform2(complexArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer3.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer3.inversetransform(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer37.transform(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer37.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer3.inversetransform(doubleArray55);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.String str64 = mathException62.getPattern();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str64, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-2.2540966835959823E-4d), 4.03968440586304E-9d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        double[] doubleArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray4, 0.035834395863998524d);
        double[] doubleArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray8, (double) 0);
        double[] doubleArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray10, 0.0d);
        double[] doubleArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray12, (-0.9955742971925697d));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-0.0, -0.0]");
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex9.multiply(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex20.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex6.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex6.cos();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex34.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.negate();
        org.apache.commons.math.complex.Complex complex41 = complex37.asin();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = complex37.multiply(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex50 = complex49.cos();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.tan();
        org.apache.commons.math.complex.Complex complex67 = complex50.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex67.asin();
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex6.subtract(complex68);
        org.apache.commons.math.complex.Complex complex71 = complex68.conjugate();
        double double72 = complex68.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-11982.862390657456d) + "'", double47 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        double double2 = complex0.getImaginary();
        boolean boolean3 = complex0.isInfinite();
        boolean boolean4 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex5 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((-11982.862390657456d), 100.0d);
        org.apache.commons.math.complex.Complex complex9 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((-990.0d), (double) 1L);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.negate();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex19.divide(complex26);
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex37.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex32.divide(complex40);
        boolean boolean44 = complex19.equals((java.lang.Object) complex43);
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex49.atan();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex19.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex12.pow(complex19);
        org.apache.commons.math.complex.Complex complex54 = complex9.subtract(complex19);
        org.apache.commons.math.complex.Complex complex55 = complex9.atan();
        org.apache.commons.math.complex.Complex complex56 = complex5.multiply(complex9);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, throwable21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable21);
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        java.lang.Object[] objArray26 = mathException24.getArguments();
        java.lang.String str27 = mathException24.getPattern();
        java.lang.String str28 = mathException24.getPattern();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
        mathException24.addSuppressed((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException36);
        java.lang.Object[] objArray38 = mathException37.getArguments();
        java.lang.String str39 = mathException37.getPattern();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException37);
        java.lang.String str42 = mathException41.getPattern();
        java.lang.String str43 = mathException41.getPattern();
        java.lang.String str44 = mathException41.getPattern();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
        java.lang.String str47 = mathException46.getPattern();
        mathException41.addSuppressed((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        mathException32.addSuppressed((java.lang.Throwable) mathException49);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str39, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org.apache.commons.math.MathException" + "'", str47, "org.apache.commons.math.MathException");
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex14.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex14.cosh();
        double double27 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex11.multiply(complex26);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex36 = complex26.pow(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex26.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5950815058523973d + "'", double27 == 0.5950815058523973d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.inversetransform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer46.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(complexArray76);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.inversetransform(univariateRealFunction78, 3.039980479210091d, 0.2876048451616606d, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.039980479210091, 0.2876048451616606]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        java.lang.Object obj9 = null;
        boolean boolean10 = complex7.equals(obj9);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex11.asin();
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        double double16 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.cos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex34.negate();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex34.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex48.acos();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.negate();
        boolean boolean54 = complex27.equals((java.lang.Object) complex53);
        org.apache.commons.math.complex.Complex complex55 = complex15.subtract(complex53);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex62.acos();
        org.apache.commons.math.complex.Complex complex64 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex68.negate();
        org.apache.commons.math.complex.Complex complex70 = complex64.subtract(complex68);
        org.apache.commons.math.complex.Complex complex71 = complex56.divide(complex68);
        org.apache.commons.math.complex.Complex complex72 = complex15.multiply(complex56);
        org.apache.commons.math.complex.Complex complex73 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex7.subtract(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.4698520192911105E-5d + "'", double16 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.035834395863998524d + "'", double44 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        boolean boolean8 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.acos();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex19.asin();
        org.apache.commons.math.complex.Complex complex24 = complex19.negate();
        org.apache.commons.math.complex.Complex complex25 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sin();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex40.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex48.asin();
        org.apache.commons.math.complex.Complex complex51 = complex48.atan();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math.complex.Complex complex57 = complex56.acos();
        org.apache.commons.math.complex.Complex complex58 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex51.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex43.multiply(complex59);
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sin();
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex43.divide(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex34.add(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex25.add(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex69.asin();
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        double double72 = complex69.getReal();
        org.apache.commons.math.complex.Complex complex73 = complex6.add(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex6.atan();
        org.apache.commons.math.complex.Complex complex75 = complex6.sqrt();
        java.lang.Class<?> wildcardClass76 = complex75.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray21, throwable22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray19, throwable22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable22);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException31);
        java.lang.String str33 = mathException32.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str33, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex5.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.tan();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex49.atan();
        double double51 = complex49.getReal();
        org.apache.commons.math.complex.Complex complex52 = complex44.subtract(complex49);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex56.asin();
        org.apache.commons.math.complex.Complex complex59 = complex56.atan();
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex60.acos();
        org.apache.commons.math.complex.Complex complex62 = complex60.sqrt1z();
        org.apache.commons.math.complex.Complex complex63 = complex49.pow(complex60);
        double double64 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = complex38.divide(complex60);
        org.apache.commons.math.complex.Complex complex66 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex23.add(complex38);
        java.lang.Class<?> wildcardClass68 = complex38.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-9240.89014825243d) + "'", double51 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2.4698520192911105E-5d + "'", double64 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.inversetransform(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, (double) 10);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray24);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray24);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        java.lang.Object[] objArray36 = mathException34.getArguments();
        java.lang.String str37 = mathException34.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.MathException: " + "'", str37, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray22, throwable23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray20, throwable23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable23);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Object[] objArray28 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65, throwable67);
        java.lang.String str69 = mathException68.getPattern();
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        java.lang.String str71 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray40, (java.lang.Throwable) mathException68);
        mathException29.addSuppressed((java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException74);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex10 = complex7.exp();
        double double11 = complex10.abs();
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.negate();
        org.apache.commons.math.complex.Complex complex23 = complex19.asin();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex19.multiply(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex32.pow(complex46);
        org.apache.commons.math.complex.Complex complex50 = complex49.asin();
        org.apache.commons.math.complex.Complex complex51 = complex12.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex57 = complex55.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math.complex.Complex complex59 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex60 = complex59.cos();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex64.subtract(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        double double72 = complex70.getReal();
        org.apache.commons.math.complex.Complex complex73 = complex70.cos();
        org.apache.commons.math.complex.Complex complex74 = complex59.divide(complex70);
        org.apache.commons.math.complex.Complex complex75 = complex51.add(complex70);
        org.apache.commons.math.complex.Complex complex76 = complex70.sqrt1z();
        org.apache.commons.math.complex.Complex complex77 = complex76.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.190540177722022d + "'", double11 == 2.190540177722022d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-11982.862390657456d) + "'", double29 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 42.12194549221161d + "'", double72 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer60.inversetransform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer60.inversetransform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer38.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform(complexArray85);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform(univariateRealFunction87, 0.09404213883274794d, 7638.527121079825d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.transform(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(complexArray42);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform(univariateRealFunction44, 1.2126011918086352d, (-0.99999999957944d), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.2126011918086352, -0.99999999957944]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = complex11.equals(obj12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex22.acos();
        org.apache.commons.math.complex.Complex complex25 = complex22.acos();
        org.apache.commons.math.complex.Complex complex26 = complex18.divide(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.cos();
        org.apache.commons.math.complex.Complex complex28 = complex11.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex11.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex11.cos();
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex34.log();
        org.apache.commons.math.complex.Complex complex37 = complex8.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.asin();
        org.apache.commons.math.complex.Complex complex46 = complex40.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex51.acos();
        boolean boolean54 = complex51.isInfinite();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex65.atan();
        double double67 = complex65.getReal();
        org.apache.commons.math.complex.Complex complex68 = complex60.subtract(complex65);
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex72.asin();
        org.apache.commons.math.complex.Complex complex75 = complex72.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.negate();
        org.apache.commons.math.complex.Complex complex77 = complex76.acos();
        org.apache.commons.math.complex.Complex complex78 = complex76.sqrt1z();
        org.apache.commons.math.complex.Complex complex79 = complex65.pow(complex76);
        org.apache.commons.math.complex.Complex complex80 = complex51.add(complex65);
        org.apache.commons.math.complex.Complex complex81 = complex45.divide(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex37.divide(complex81);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-9240.89014825243d) + "'", double67 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform2(doubleArray21);
        double[] doubleArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray21, 0.035834395863998524d);
        double[] doubleArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 0);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray25, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer31.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer31.transform2(doubleArray49);
        double[] doubleArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, 0.0d);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(doubleArray54);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(univariateRealFunction58, 22.213875966014683d, (-2.973988443733308E-6d), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [22.213875966014683, -2.973988443733308E-6]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.inversetransform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray53, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer27.transform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.inversetransform(complexArray57);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(univariateRealFunction59, 10.04987562112089d, (-9.975031327880009d), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.String str29 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        java.lang.Object[] objArray34 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray37 = mathException31.getArguments();
        java.lang.String str38 = mathException31.getPattern();
        java.lang.String str39 = mathException31.getPattern();
        java.lang.String str40 = mathException31.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.MathException: " + "'", str40, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.exp();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex53 = complex49.conjugate();
        boolean boolean54 = complex42.equals((java.lang.Object) complex53);
        double double55 = complex53.abs();
        org.apache.commons.math.complex.Complex complex56 = complex32.add(complex53);
        org.apache.commons.math.complex.Complex complex57 = complex53.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-11982.862390657456d) + "'", double41 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 14.142135623730951d + "'", double55 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer8.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer8.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer8.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer42.transform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer56.inversetransform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer56.inversetransform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer42.transform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform2(doubleArray84);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer42.transform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer8.transform2(doubleArray88);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray88);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, (-11982.862390657456d));
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform2(doubleArray88);
        double[] doubleArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray88, 5237.931580239156d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-2249160.6681100884, -3.3380504008348006E8]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-2249160.6681100884, -3.3380504008348006E8]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-2249160.6681100884, -3.3380504008348006E8]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-2249160.6681100884, -3.3380504008348006E8]");
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        double[] doubleArray43 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer22.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer51.transform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer78.inversetransform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer77.transform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer51.inversetransform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer22.inversetransform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 2.4698520192911105E-5d);
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, (double) (short) 100);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform2(complexArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(univariateRealFunction91, (double) 1L, 5.497040179645271d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) '#', 0.0d);
        double double3 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = complex2.negate();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        double[] doubleArray52 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.transform2(doubleArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray53);
        mathException28.addSuppressed((java.lang.Throwable) mathException54);
        java.lang.Object[] objArray56 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.Class<?> wildcardClass59 = mathException57.getClass();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.4430227241169225d);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 3.4556448847299044d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex48.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        org.apache.commons.math.complex.Complex complex51 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex32.add(complex48);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex56.asin();
        org.apache.commons.math.complex.Complex complex59 = complex56.atan();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex59.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex73.subtract(complex76);
        boolean boolean79 = complex67.equals((java.lang.Object) complex78);
        double double80 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex84.negate();
        org.apache.commons.math.complex.Complex complex86 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex87 = complex67.subtract(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex67.sin();
        org.apache.commons.math.complex.Complex complex89 = complex32.divide(complex67);
        org.apache.commons.math.complex.Complex complex90 = complex89.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer10.transform2(univariateRealFunction52, 35.014282800023196d, (-7.665522686975014d), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [35.014282800023196, -7.665522686975014]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        double double30 = complex29.abs();
        org.apache.commons.math.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math.complex.Complex complex32 = complex15.add(complex29);
        org.apache.commons.math.complex.Complex complex33 = complex29.conjugate();
        double double34 = complex29.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 148.4131591025766d + "'", double30 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 148.4131591025766d + "'", double34 == 148.4131591025766d);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer37.transform(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer37.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform(doubleArray55);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(univariateRealFunction60, (-11982.862390657456d), 0.0d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(11992.862403001514d, (-7.291700864257425d));
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0L, (double) 100L);
        double double3 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex2.acos();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.negate();
        org.apache.commons.math.complex.Complex complex15 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex15.subtract(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        double double36 = complex34.getReal();
        org.apache.commons.math.complex.Complex complex37 = complex29.subtract(complex34);
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex41.asin();
        org.apache.commons.math.complex.Complex complex44 = complex41.atan();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = complex45.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex34.pow(complex45);
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex59 = complex57.acos();
        org.apache.commons.math.complex.Complex complex60 = complex57.acos();
        org.apache.commons.math.complex.Complex complex61 = complex53.divide(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt1z();
        org.apache.commons.math.complex.Complex complex63 = complex34.divide(complex62);
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex69 = complex67.asin();
        org.apache.commons.math.complex.Complex complex70 = complex67.atan();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        org.apache.commons.math.complex.Complex complex72 = complex71.acos();
        org.apache.commons.math.complex.Complex complex73 = complex71.sqrt1z();
        org.apache.commons.math.complex.Complex complex74 = complex63.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex22.multiply(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex4.divide(complex22);
        org.apache.commons.math.complex.Complex complex77 = complex22.tan();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9240.89014825243d) + "'", double36 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer32.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer32.inversetransform(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer25.inversetransform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 11766.272084123093d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer44.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer44.transform2(doubleArray62);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 0.0d);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(doubleArray67);
        double[] doubleArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.inversetransform2(doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer52.transform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer83.inversetransform2(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer66.inversetransform(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer52.transform2(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray89, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer10.inversetransform(complexArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer10.inversetransform2(univariateRealFunction93, (-1.1752011936438014d), (-481.2657147495762d), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.String str30 = mathException28.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.String str33 = mathException32.getPattern();
        java.lang.String str34 = mathException32.getPattern();
        java.lang.Object[] objArray35 = mathException32.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61, throwable63);
        java.lang.String str65 = mathException64.getPattern();
        java.lang.String str66 = mathException64.getPattern();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        java.lang.Object[] objArray71 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        mathException32.addSuppressed((java.lang.Throwable) mathException68);
        java.lang.String str74 = mathException68.getPattern();
        java.lang.String str75 = mathException68.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.math.MathException: " + "'", str75, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex6.subtract(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex6.atan();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex25.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray44, throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42, throwable45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer2.inversetransform(complexArray42);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, (double) (short) 0);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException52.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str54, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.inversetransform(univariateRealFunction23, 0.9999928750078377d, 0.9855462951086804d, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.9999928750078377, 0.9855462951086804]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException10.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str11, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.transform(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray47, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer27.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer62.inversetransform2(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer54.transform2(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer54.inversetransform(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform(doubleArray84);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(univariateRealFunction90, 3.1415679550696d, (-0.9999999995794401d), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.1415679550696, -0.9999999995794401]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = complex9.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.cos();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.asin();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(3.4330616811688754d, (-3.401867186530711d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.4330616811688754, -3.401867186530711]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex86 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex87 = complex86.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray89 = new org.apache.commons.math.complex.Complex[] { complex88 };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer83.transform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer75.inversetransform2(complexArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.inversetransform2(univariateRealFunction94, (-1.296286469206261E-5d), 1.5465095304352279d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.5950815058523973d, 1.570758233006406d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        double double15 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex13);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        double double22 = complex21.abs();
        org.apache.commons.math.complex.Complex complex23 = complex8.multiply(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex8.negate();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex37.cos();
        double double40 = complex37.abs();
        org.apache.commons.math.complex.Complex complex41 = complex28.multiply(complex37);
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        boolean boolean45 = complex44.isInfinite();
        org.apache.commons.math.complex.Complex complex46 = complex41.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex51.acos();
        org.apache.commons.math.complex.Complex complex53 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex51.sqrt1z();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex59.asin();
        org.apache.commons.math.complex.Complex complex62 = complex59.atan();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sin();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex69 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex62.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex54.multiply(complex70);
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex75.sin();
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex54.divide(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex76.tan();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt1z();
        org.apache.commons.math.complex.Complex complex81 = complex41.divide(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex81.sin();
        org.apache.commons.math.complex.Complex complex83 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex8.pow(complex81);
        org.apache.commons.math.complex.Complex complex85 = complex2.add(complex84);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9240.89014825243d) + "'", double15 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 148.4131591025766d + "'", double22 == 148.4131591025766d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 22040.29691869634d + "'", double40 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.acos();
        org.apache.commons.math.complex.Complex complex22 = complex14.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex24 = complex21.sinh();
        double double25 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.apache.commons.math.complex.Complex complex33 = complex26.pow(complex32);
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex21.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex6.pow(complex37);
        java.lang.Class<?> wildcardClass41 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.566370623987466d + "'", double25 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray11, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        double[] doubleArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray20, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.inversetransform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 6.525012184105979d);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer66.inversetransform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer61.transform2(complexArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform2(complexArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(univariateRealFunction90, 19250.68999956769d, (-0.548306907193979d), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [19250.68999956769, -0.548306907193979]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1L, 5991.431043598024d);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        boolean boolean4 = complex3.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.asin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer8.inversetransform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer31.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer45.inversetransform2(complexArray60);
        double[] doubleArray66 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer45.transform2(doubleArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer45.inversetransform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer31.transform(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer8.inversetransform(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform2(univariateRealFunction77, (-990.0d), 42.90705142215203d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.transform(univariateRealFunction46, 3.039980479210091d, 18481.78033459865d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex6.divide(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex4.pow(complex11);
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex11.asin();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex25.acos();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex15.pow(complex30);
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex35.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        org.apache.commons.math.complex.Complex complex45 = complex30.add(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex14.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.negate();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex23.sin();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex23 = complex7.pow(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex5.multiply(complex7);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        boolean boolean29 = complex27.equals(obj28);
        org.apache.commons.math.complex.Complex complex30 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex27.add(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex7.add(complex39);
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.acos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex65 = complex47.subtract(complex60);
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex69.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex69.acos();
        org.apache.commons.math.complex.Complex complex72 = complex69.acos();
        org.apache.commons.math.complex.Complex complex73 = complex72.tanh();
        org.apache.commons.math.complex.Complex complex74 = complex60.divide(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex7.pow(complex72);
        org.apache.commons.math.complex.Complex complex76 = null;
        org.apache.commons.math.complex.Complex complex77 = complex75.subtract(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex77.sinh();
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex78.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.tan();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex34 = complex32.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex5.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", throwable1);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        double double15 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex11.subtract(complex27);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex11.add(complex42);
        double double44 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex(1.2882551587809412d, (-5991.431207677988d));
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) '4', (double) 1.0f);
        org.apache.commons.math.complex.Complex complex51 = complex50.tan();
        org.apache.commons.math.complex.Complex complex52 = complex50.sin();
        org.apache.commons.math.complex.Complex complex53 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex47.divide(complex50);
        org.apache.commons.math.complex.Complex complex55 = complex43.multiply(complex54);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.566370623987466d + "'", double15 == 2.566370623987466d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 11992.869166580937d + "'", double44 == 11992.869166580937d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-1.570758233006406d), (-9.975031327880009d), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.inversetransform(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer23.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer62.transform2(doubleArray66);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray66, 0.035834395863998524d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 0);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.inversetransform(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, (-142.35883754318695d));
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.05226086543509898d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex86 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex87 = complex86.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray89 = new org.apache.commons.math.complex.Complex[] { complex88 };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer83.transform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer75.inversetransform2(complexArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.inversetransform(univariateRealFunction94, (-18481.78033459865d), 1.570758233006406d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex0.negate();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        org.apache.commons.math.complex.Complex complex4 = complex0.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray0, 1.3234581215893517d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.5519424451784027d, 0.36560097309543693d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.5519424451784027, 0.36560097309543693]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        org.apache.commons.math.complex.Complex[] complexArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray0, 1.2933105120246067d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        boolean boolean12 = complex11.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer21.inversetransform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer13.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer39.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer13.inversetransform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer47.inversetransform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer47.transform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer13.inversetransform2(complexArray85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException89);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray9, (java.lang.Throwable) mathException89);
        java.lang.Object[] objArray92 = mathException91.getArguments();
        java.lang.Class<?> wildcardClass93 = mathException91.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.transform(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform2(doubleArray48);
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, 0.035834395863998524d);
        double[] doubleArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer61.inversetransform(complexArray78);
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer56.transform2(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(complexArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform(univariateRealFunction84, (-4183987.6085661002d), 3.1715243988715174d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        boolean boolean10 = complex9.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer21.inversetransform2(complexArray36);
        double[] doubleArray42 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer21.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer61.inversetransform2(complexArray76);
        double[] doubleArray82 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer61.transform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer44.transform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer21.transform2(complexArray84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException86);
        mathException18.addSuppressed((java.lang.Throwable) mathException86);
        java.lang.String str89 = mathException86.getPattern();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.MathException" + "'", str89, "org.apache.commons.math.MathException");
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer27.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer41.inversetransform(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer27.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform2(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(univariateRealFunction72, (-0.0884245248208663d), (-0.9999999983177603d), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-0.0884245248208663, -0.9999999983177603]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.asin();
        org.apache.commons.math.complex.Complex complex24 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex36);
        boolean boolean39 = complex32.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex32.log();
        org.apache.commons.math.complex.Complex complex41 = complex25.add(complex32);
        org.apache.commons.math.complex.Complex complex42 = complex41.atan();
        org.apache.commons.math.complex.Complex complex43 = complex42.atan();
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.cos();
        org.apache.commons.math.complex.Complex complex46 = complex42.sqrt();
        boolean boolean47 = complex17.equals((java.lang.Object) complex42);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11013.232906666808d, 0.9999999983177603d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11013.232906666808, 0.9999999983177603]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex20.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex20.atan();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex29.pow(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex35.asin();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        boolean boolean13 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex12.sin();
        boolean boolean15 = complex3.equals((java.lang.Object) complex14);
        org.apache.commons.math.complex.Complex complex16 = complex3.cos();
        org.apache.commons.math.complex.Complex complex17 = complex3.atan();
        org.apache.commons.math.complex.Complex complex18 = complex17.tan();
        org.apache.commons.math.complex.Complex complex19 = complex17.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer8.inversetransform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) 10);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, (java.lang.Throwable) mathException38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray64);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray64, throwable66);
        java.lang.String str68 = mathException67.getPattern();
        java.lang.String str69 = mathException67.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.lang.String str73 = mathException70.getPattern();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray29, (java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        mathException3.addSuppressed((java.lang.Throwable) mathException74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", objArray1, (java.lang.Throwable) mathException74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        double[] doubleArray44 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer23.transform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer23.transform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(complexArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.inversetransform(univariateRealFunction58, 1.5707201399943767d, (-7.123309922655306E-6d), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex86 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex87 = complex86.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray89 = new org.apache.commons.math.complex.Complex[] { complex88 };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer83.transform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer75.inversetransform2(complexArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.inversetransform(univariateRealFunction94, (-9.408602041294962E-10d), (-9240.89018634622d), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer46.transform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer46.transform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer68.inversetransform(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer46.transform2(complexArray90);
        org.apache.commons.math.complex.Complex[] complexArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray91, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(complexArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform(univariateRealFunction95, (-3.401867186530711d), 0.4669214877224425d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.035834395863998524d);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 0);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex75 };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer70.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer62.inversetransform(complexArray79);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer62.inversetransform2(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform(complexArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform(univariateRealFunction90, 1.511812924233695d, (-18491.78033459865d), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.511812924233695, -18491.78033459865]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer21.inversetransform2(complexArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", objArray39, throwable40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray37, throwable40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException(throwable40);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.String str45 = mathException43.getPattern();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray18, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException47);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer61.inversetransform2(complexArray76);
        double[] doubleArray82 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer61.transform2(doubleArray82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray83);
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray83, throwable85);
        java.lang.String str87 = mathException86.getPattern();
        java.lang.String str88 = mathException86.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException89);
        java.lang.Throwable[] throwableArray91 = mathException89.getSuppressed();
        java.lang.String str92 = mathException89.getPattern();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException89);
        mathException54.addSuppressed((java.lang.Throwable) mathException93);
        java.lang.String str95 = mathException54.getPattern();
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray49, (java.lang.Throwable) mathException54);
        boolean boolean97 = complex6.equals((java.lang.Object) mathException96);
        boolean boolean98 = complex6.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer32.inversetransform2(complexArray47);
        double[] doubleArray53 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer32.transform2(doubleArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray54);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray54, throwable56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        mathException28.addSuppressed((java.lang.Throwable) mathException57);
        java.lang.String str61 = mathException57.getPattern();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException57);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer8.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer8.transform(complexArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer24.inversetransform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer24.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.transform(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer51.transform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer24.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(doubleArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, (-2.679053673795176E-4d), (-10.0d), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex6.divide(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        double double19 = complex18.abs();
        org.apache.commons.math.complex.Complex complex20 = complex18.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.cosh();
        boolean boolean26 = complex10.equals((java.lang.Object) complex23);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-11982.862390657456d) + "'", double12 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 22026.465794806718d + "'", double19 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer54.inversetransform(complexArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer10.transform2(complexArray72);
        double[] doubleArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer10.transform(doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex33.atan();
        double double35 = complex33.getReal();
        org.apache.commons.math.complex.Complex complex36 = complex28.subtract(complex33);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.asin();
        org.apache.commons.math.complex.Complex complex43 = complex40.atan();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex47 = complex33.pow(complex44);
        org.apache.commons.math.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex22.divide(complex44);
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.negate();
        org.apache.commons.math.complex.Complex complex55 = complex53.asin();
        org.apache.commons.math.complex.Complex complex56 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.tanh();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex49.pow(complex59);
        boolean boolean61 = complex49.isNaN();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9240.89014825243d) + "'", double35 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        double[] doubleArray44 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer23.transform2(doubleArray44);
        double[] doubleArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (double) 100L);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer52.inversetransform2(complexArray67);
        double[] doubleArray73 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer52.transform2(doubleArray73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray74);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray74, throwable76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.transform(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray79);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-100.0, 5200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.Object[] objArray67 = mathException65.getArguments();
        mathException37.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException65);
        mathException10.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray71 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray71);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex28.acos();
        org.apache.commons.math.complex.Complex complex33 = complex28.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(10.00001102435328d, (double) (byte) 0);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray45, throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43, throwable46);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer3.inversetransform(complexArray43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        java.lang.Throwable[] throwableArray53 = mathException50.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        boolean boolean9 = complex3.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex13.subtract(complex18);
        boolean boolean22 = complex8.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z();
        boolean boolean30 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex31 = complex28.atan();
        org.apache.commons.math.complex.Complex complex32 = complex21.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex9.multiply(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex20.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex6.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex6.cos();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex34.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.negate();
        org.apache.commons.math.complex.Complex complex41 = complex37.asin();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = complex37.multiply(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex50 = complex49.cos();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.tan();
        org.apache.commons.math.complex.Complex complex67 = complex50.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex67.asin();
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex6.subtract(complex68);
        org.apache.commons.math.complex.Complex complex71 = null;
        org.apache.commons.math.complex.Complex complex72 = complex6.divide(complex71);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-11982.862390657456d) + "'", double47 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) (-1L), 0.7632162736499556d);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.String str29 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        java.lang.Object[] objArray34 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        java.lang.Object[] objArray37 = mathException35.getArguments();
        java.lang.String str38 = mathException35.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.MathException: " + "'", str38, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        double double2 = complex0.getImaginary();
        boolean boolean3 = complex0.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex22.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex14.divide(complex26);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        java.lang.Class<?> wildcardClass35 = complex34.getClass();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex41.asin();
        org.apache.commons.math.complex.Complex complex44 = complex38.multiply(complex43);
        java.lang.Object[] objArray45 = new java.lang.Object[] { throwableArray12, complex29, wildcardClass35, complex43 };
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", objArray45, (java.lang.Throwable) mathException48);
        java.lang.String str51 = mathException50.getPattern();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-6001.431182971055d), 0.6393342588846141d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        double[] doubleArray72 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.transform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer34.transform(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (-5.693156703928211d));
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.inversetransform2(complexArray76);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(univariateRealFunction78, 22026.46581750668d, (double) (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer23.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray66);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.inversetransform2(univariateRealFunction68, (double) 10.0f, (-2.4698520192911105E-5d), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.String str22 = mathException21.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str22, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex10.pow(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex21.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex30.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex50.acos();
        org.apache.commons.math.complex.Complex complex53 = complex46.pow(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex44.subtract(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.tanh();
        org.apache.commons.math.complex.Complex complex56 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex53.cos();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = complex39.divide(complex58);
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = complex26.pow(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex58.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-1.0d), (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex15);
        boolean boolean18 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex19 = complex15.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex3);
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        double double22 = complex21.abs();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex5.pow(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex35.atan();
        org.apache.commons.math.complex.Complex complex37 = complex35.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.035834395863998524d + "'", double22 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, throwable21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable21);
        java.lang.String str25 = mathException24.getPattern();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException24);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer27.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer41.inversetransform(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer27.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform2(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform2(univariateRealFunction72, (-2.05309903558876d), 0.9999999909941609d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.029663027718219624d, (-9247.503074114662d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.029663027718219624, -9247.503074114662]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-42.12221339757899d), (-6001.431182971055d), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-42.12221339757899, -6001.431182971055]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        double double41 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.sin();
        org.apache.commons.math.complex.Complex complex60 = complex40.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex31.subtract(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex61.atan();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex73.subtract(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex76.negate();
        org.apache.commons.math.complex.Complex complex80 = complex76.conjugate();
        boolean boolean81 = complex69.equals((java.lang.Object) complex80);
        double double82 = complex80.abs();
        org.apache.commons.math.complex.Complex complex83 = complex80.negate();
        org.apache.commons.math.complex.Complex complex84 = complex83.cos();
        org.apache.commons.math.complex.Complex complex85 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex62.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex86.acos();
        org.apache.commons.math.complex.Complex complex88 = complex86.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-7.123309922588602E-6d) + "'", double41 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-11982.862390657456d) + "'", double68 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 14.142135623730951d + "'", double82 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(univariateRealFunction74, 5991.431182979468d, 7628.527121079825d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        double[] doubleArray46 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.transform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer8.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer49.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer49.transform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer8.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(complexArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, 0.2876048451616606d, 22040.29691869634d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        double double18 = complex16.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex11.subtract(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex3.subtract(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex20.asin();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9240.89014825243d) + "'", double18 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray45, throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43, throwable46);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer3.inversetransform(complexArray43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException52.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str54, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.973988443733308E-6d), Double.NEGATIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11972.862390657456d, 3.368901671590452d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11972.862390657456, 3.368901671590452]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-11992.862390657456d), 0.9999999995794401d);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex8.pow(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.negate();
        boolean boolean19 = complex14.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex20 = complex5.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.negate();
        org.apache.commons.math.complex.Complex complex24 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-10.693147180349666d) + "'", double7 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex30.multiply(complex38);
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex14.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = complex42.atan();
        boolean boolean48 = complex42.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = complex42.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.035834395863998524d + "'", double31 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        double[] doubleArray72 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.transform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer34.transform(complexArray73);
        boolean boolean75 = complex33.equals((java.lang.Object) fastFourierTransformer34);
        boolean boolean76 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex77 = complex33.tan();
        org.apache.commons.math.complex.Complex complex78 = complex15.multiply(complex33);
        org.apache.commons.math.complex.Complex complex79 = complex7.multiply(complex78);
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex82.sinh();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        double double86 = complex84.getImaginary();
        org.apache.commons.math.complex.Complex complex87 = complex84.acos();
        boolean boolean88 = complex87.isInfinite();
        org.apache.commons.math.complex.Complex complex89 = complex87.sqrt1z();
        org.apache.commons.math.complex.Complex complex90 = complex78.add(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex90.tanh();
        org.apache.commons.math.complex.Complex complex92 = complex90.sinh();
        org.apache.commons.math.complex.Complex complex93 = complex90.log();
        org.apache.commons.math.complex.Complex complex94 = complex90.exp();
        org.apache.commons.math.complex.Complex complex95 = complex94.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-5991.431207677988d) + "'", double86 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex20.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex6.subtract(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex19.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex15.asin();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex15.add(complex18);
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.570758233006406d, 0.0d);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Object[] objArray4 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Object[] objArray8 = mathException7.getArguments();
        java.lang.String str9 = mathException7.getPattern();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray4, (java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str9, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer1.inversetransform(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer1.inversetransform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.inversetransform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76, throwable78);
        java.lang.String str80 = mathException79.getPattern();
        java.lang.Object[] objArray81 = mathException79.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray27, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        java.lang.String str85 = mathException84.getPattern();
        java.lang.String str86 = mathException84.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        java.lang.Object[] objArray88 = mathException84.getArguments();
        java.lang.String str89 = mathException84.getPattern();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str85, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str86, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str89, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.String str30 = mathException28.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.String str33 = mathException32.getPattern();
        java.lang.String str34 = mathException32.getPattern();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray36);
        java.lang.String str38 = mathException37.getPattern();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.MathException: " + "'", str38, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, 100.0d);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (-0.9999999983177603d));
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform2(univariateRealFunction77, 22.213875966014683d, (-9240.89014825243d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, Double.POSITIVE_INFINITY, 1.570758233200585d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [Infinity, 1.570758233200585]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-1.0d), (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex22.divide(complex32);
        double double34 = complex32.abs();
        boolean boolean35 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex49 = complex38.multiply(complex48);
        boolean boolean50 = complex32.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex61 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.cos();
        org.apache.commons.math.complex.Complex complex63 = complex61.tanh();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex72.subtract(complex75);
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex68.divide(complex78);
        double double80 = complex78.abs();
        boolean boolean81 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex82 = complex61.multiply(complex78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        boolean boolean90 = complex78.equals((java.lang.Object) fastFourierTransformer83);
        org.apache.commons.math.complex.Complex complex91 = complex78.sqrt1z();
        org.apache.commons.math.complex.Complex complex92 = complex48.add(complex78);
        org.apache.commons.math.complex.Complex complex93 = complex48.asin();
        boolean boolean94 = complex17.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex95 = complex48.tan();
        org.apache.commons.math.complex.Complex complex96 = complex95.tanh();
        org.apache.commons.math.complex.Complex complex97 = complex95.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 22040.29691869634d + "'", double34 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 22040.29691869634d + "'", double80 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray2, throwable3);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.String str6 = mathException4.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException4);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex18.divide(complex21);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex47.asin();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex23.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex17.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex54.negate();
        org.apache.commons.math.complex.Complex complex56 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.035834395863998524d + "'", double40 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(11992.862403001514d, 1.5465095304352279d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11992.862403001514, 1.5465095304352279]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        boolean boolean13 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex12.sin();
        boolean boolean15 = complex3.equals((java.lang.Object) complex14);
        org.apache.commons.math.complex.Complex complex16 = complex3.cos();
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex14.negate();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex21.acos();
        org.apache.commons.math.complex.Complex complex24 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex33.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex25.divide(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex24.subtract(complex37);
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex46.acos();
        org.apache.commons.math.complex.Complex complex49 = complex46.acos();
        org.apache.commons.math.complex.Complex complex50 = complex49.tanh();
        org.apache.commons.math.complex.Complex complex51 = complex37.divide(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex14.multiply(complex37);
        org.apache.commons.math.complex.Complex complex53 = complex37.sin();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(43.12194549221161d, 0.29010019059136716d);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        double double28 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex29 = complex17.multiply(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.log();
        double double33 = complex32.abs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 18491.78033459865d + "'", double28 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.31876378317886117d + "'", double33 == 0.31876378317886117d);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.999999991586744d), (-1.0231960311378805d));
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj6 = new java.lang.Object();
        boolean boolean7 = complex5.equals(obj6);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.acos();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = complex5.pow(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.negate();
        org.apache.commons.math.complex.Complex complex29 = complex27.asin();
        org.apache.commons.math.complex.Complex complex30 = complex27.atan();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex38 = complex36.acos();
        org.apache.commons.math.complex.Complex complex39 = complex36.acos();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex46.acos();
        org.apache.commons.math.complex.Complex complex48 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex48.subtract(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex40.divide(complex52);
        org.apache.commons.math.complex.Complex complex56 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex57 = complex39.subtract(complex52);
        org.apache.commons.math.complex.Complex complex58 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex31.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.cos();
        org.apache.commons.math.complex.Complex complex61 = complex23.pow(complex58);
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = complex67.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex69.asin();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex81 = complex80.exp();
        org.apache.commons.math.complex.Complex complex82 = complex77.subtract(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex80.negate();
        org.apache.commons.math.complex.Complex complex84 = complex73.multiply(complex83);
        org.apache.commons.math.complex.Complex complex87 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex88 = complex87.exp();
        boolean boolean89 = complex87.isInfinite();
        org.apache.commons.math.complex.Complex complex90 = complex84.pow(complex87);
        org.apache.commons.math.complex.Complex complex91 = complex87.asin();
        org.apache.commons.math.complex.Complex complex92 = complex70.subtract(complex87);
        org.apache.commons.math.complex.Complex complex93 = complex92.atan();
        org.apache.commons.math.complex.Complex complex94 = complex92.sqrt();
        org.apache.commons.math.complex.Complex complex95 = complex58.add(complex92);
        boolean boolean96 = complex2.equals((java.lang.Object) complex58);
        double double97 = complex2.getImaginary();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-1.0231960311378805d) + "'", double97 == (-1.0231960311378805d));
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = complex2.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex2.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex24.divide(complex32);
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        double double42 = complex40.getReal();
        org.apache.commons.math.complex.Complex complex43 = complex40.atan();
        org.apache.commons.math.complex.Complex complex44 = complex40.tan();
        org.apache.commons.math.complex.Complex complex45 = complex32.pow(complex44);
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        double double51 = complex50.abs();
        org.apache.commons.math.complex.Complex complex52 = complex50.cos();
        org.apache.commons.math.complex.Complex complex53 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex53.asin();
        org.apache.commons.math.complex.Complex complex55 = complex45.divide(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex17.pow(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex17.tanh();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-9240.89014825243d) + "'", double42 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 22026.465794806718d + "'", double51 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.divide(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex12.subtract(complex25);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex25.divide(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex3.pow(complex39);
        double double41 = complex3.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-11982.862390657456d) + "'", double5 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-11982.862390657456d) + "'", double41 == (-11982.862390657456d));
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer68.inversetransform(complexArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.inversetransform(univariateRealFunction94, 1.330644760248188d, 11013.23288813991d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) (byte) -1, 100.0d);
        boolean boolean12 = complex8.equals((java.lang.Object) complex11);
        java.lang.Class<?> wildcardClass13 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        double double21 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.NEGATIVE_INFINITY + "'", double21 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 10.025031171631717d, 3.1715243988715174d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.025031171631717, 3.1715243988715174]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer1.transform(complexArray13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray14);
        java.lang.String str16 = mathException15.getPattern();
        java.lang.String str17 = mathException15.getPattern();
        java.lang.String str18 = mathException15.getPattern();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-1.1752011936438014d), (-0.8414709848292453d));
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        double double27 = complex26.abs();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        boolean boolean37 = complex10.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex38 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        double double55 = complex54.abs();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math.complex.Complex complex61 = complex59.acos();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex54.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex10.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex10.asin();
        boolean boolean67 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex68 = complex10.atan();
        boolean boolean69 = complex68.isInfinite();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.035834395863998524d + "'", double27 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.035834395863998524d + "'", double55 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.transform2(univariateRealFunction19, (-9241.894022087909d), (-9240.890166287503d), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        boolean boolean17 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex27.acos();
        org.apache.commons.math.complex.Complex complex31 = complex23.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.cos();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex30.asin();
        org.apache.commons.math.complex.Complex complex35 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex30.conjugate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex78 };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer73.transform2(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer65.inversetransform2(complexArray80);
        double[] doubleArray86 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer65.transform2(doubleArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray87);
        java.lang.Throwable throwable89 = null;
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray87, throwable89);
        java.lang.String str91 = mathException90.getPattern();
        java.lang.Object[] objArray92 = mathException90.getArguments();
        mathException62.addSuppressed((java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException90);
        boolean boolean95 = complex36.equals((java.lang.Object) "hi!");
        org.apache.commons.math.complex.Complex complex96 = complex36.exp();
        org.apache.commons.math.complex.Complex complex97 = complex18.multiply(complex36);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer29.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer29.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(doubleArray59);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform(univariateRealFunction64, (-0.9999999995794401d), (-0.9912858099911315d), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer2.inversetransform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer2.inversetransform2(complexArray27);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.cos();
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex50.subtract(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex55.negate();
        org.apache.commons.math.complex.Complex complex57 = complex46.divide(complex56);
        double double58 = complex56.abs();
        boolean boolean59 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = complex39.multiply(complex56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        boolean boolean68 = complex56.equals((java.lang.Object) fastFourierTransformer61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer69.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer69.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer61.inversetransform(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer2.transform(complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray92, 2.649158683274018d);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray94);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray94);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 22040.29691869634d + "'", double58 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray94);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex13.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.log();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex9.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex14.pow(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex21.negate();
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((-0.9955742870938463d), 2.566370623987466d);
        org.apache.commons.math.complex.Complex complex28 = complex24.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex9.add(complex24);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.9171462850476311d, (-0.9999999983177603d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.9171462850476311, -0.9999999983177603]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer2.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer36.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer36.transform2(doubleArray54);
        double[] doubleArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray54, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer2.transform(doubleArray54);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray61, (java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.Object[] objArray70 = mathException67.getArguments();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex12.tan();
        org.apache.commons.math.complex.Complex complex18 = complex12.cos();
        org.apache.commons.math.complex.Complex complex19 = complex12.asin();
        java.lang.Class<?> wildcardClass20 = complex19.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex14.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex28.asin();
        org.apache.commons.math.complex.Complex complex31 = complex28.atan();
        double double32 = complex31.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.5643385893306951d + "'", double32 == 1.5643385893306951d);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        double double16 = complex14.getReal();
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = complex14.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        boolean boolean21 = complex6.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        org.apache.commons.math.complex.Complex complex23 = complex20.cos();
        org.apache.commons.math.complex.Complex complex24 = complex20.conjugate();
        java.lang.Class<?> wildcardClass25 = complex20.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9240.89014825243d) + "'", double16 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.negate();
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex30.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.negate();
        org.apache.commons.math.complex.Complex complex37 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = complex25.multiply(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex13.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.tan();
        org.apache.commons.math.complex.Complex complex45 = complex44.tan();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex49.subtract(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex52.negate();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex45.add(complex60);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.123309922588602E-6d) + "'", double8 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        java.lang.String str4 = mathException3.getPattern();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray7 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0.0f, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math.complex.Complex complex4 = complex2.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.negate();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex23.sin();
        org.apache.commons.math.complex.Complex complex28 = complex23.sqrt();
        double double29 = complex28.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.7205072694509285d + "'", double29 == 1.7205072694509285d);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer29.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer29.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 2.4698520192911105E-5d);
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) (short) 100);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 5991.431068296545d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", objArray62, throwable63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray60, throwable63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable63);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.String str68 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(complexArray41);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(univariateRealFunction72, (-11992.862390657456d), 0.9999999983177603d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex28.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        boolean boolean51 = complex24.equals((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sin();
        org.apache.commons.math.complex.Complex complex55 = complex12.add(complex52);
        org.apache.commons.math.complex.Complex complex56 = complex52.cos();
        org.apache.commons.math.complex.Complex complex57 = complex52.log();
        org.apache.commons.math.complex.Complex complex58 = complex52.sqrt1z();
        java.lang.Class<?> wildcardClass59 = complex58.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.035834395863998524d + "'", double41 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex25);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.asin();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex25.pow(complex36);
        double double40 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex14.divide(complex36);
        org.apache.commons.math.complex.Complex complex42 = complex14.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.atan();
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex48.add(complex52);
        double double54 = complex53.getReal();
        org.apache.commons.math.complex.Complex complex55 = complex43.add(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex53.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9240.89014825243d) + "'", double27 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.4698520192911105E-5d + "'", double40 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.NEGATIVE_INFINITY + "'", double54 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 2.566370623987466d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        double[] doubleArray80 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer59.transform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 2.566370623987466d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform2(doubleArray84);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform(univariateRealFunction87, (-10.0d), 5.497040179645271d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-2.566370623987466, 133.45127244734823, -2.566370623987466, 133.45127244734823]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-2.566370623987466, 133.45127244734823, -2.566370623987466, 133.45127244734823]");
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.inversetransform(complexArray23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray23, throwable25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        mathException26.addSuppressed((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException26);
        java.lang.String str33 = mathException26.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str33, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex14.asin();
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex9.add(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex9.tan();
        org.apache.commons.math.complex.Complex complex22 = complex9.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, 18491.783038502515d);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer21.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer21.inversetransform(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer55.transform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer55.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer21.inversetransform(doubleArray73);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, (java.lang.Throwable) mathException80);
        java.lang.Object[] objArray82 = mathException81.getArguments();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(objArray82);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer60.inversetransform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer60.inversetransform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer38.transform2(complexArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform(complexArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform2(univariateRealFunction86, 11013.232795482763d, 0.975488763477673d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11013.232795482763, 0.975488763477673]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        double double36 = complex35.abs();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        boolean boolean46 = complex19.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex7.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex7.multiply(complex48);
        org.apache.commons.math.complex.Complex complex65 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex65.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.035834395863998524d + "'", double36 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.cos();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer41.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer60.inversetransform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer41.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 1.0077076126157685d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray82);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer60.inversetransform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer60.inversetransform(complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer38.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 13.018489601050195d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform(complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform2(complexArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(6.910110449651849E34d, 10.996801933833694d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [6.910110449651849E34, 10.996801933833694]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.3527414367793362d, 0.0d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.3527414367793362, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 6.525012184105979d, 1.3351321324395033d, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex19.divide(complex27);
        boolean boolean31 = complex6.equals((java.lang.Object) complex30);
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex38 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex6.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        double[] doubleArray44 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer23.transform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer23.transform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer58.inversetransform2(complexArray73);
        double[] doubleArray79 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer58.transform2(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer58.inversetransform(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray89, Double.POSITIVE_INFINITY);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray91);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer34.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform2(doubleArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform(univariateRealFunction79, (-0.9912858099911315d), 1.306932828523934d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray23, throwable24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray21, throwable24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable24);
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        java.lang.Object[] objArray29 = mathException27.getArguments();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException35);
        java.lang.String str37 = mathException35.getPattern();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str37, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.inversetransform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, (double) 10);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray23);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer44.inversetransform2(complexArray59);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", objArray62, throwable63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray60, throwable63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable63);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.String str68 = mathException66.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(complexArray41);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(univariateRealFunction72, 22040.29691869634d, 2.190540177722022d, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [22040.29691869634, 2.190540177722022]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer16.inversetransform(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer2.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer1.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        double[] doubleArray67 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.transform2(doubleArray67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray68);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray68, throwable70);
        java.lang.String str72 = mathException71.getPattern();
        java.lang.String str73 = mathException71.getPattern();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException74);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.lang.Object[] objArray77 = mathException75.getArguments();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray39, (java.lang.Throwable) mathException75);
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathException75.addSuppressed(throwable80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        double[] doubleArray26 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer5.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer5.inversetransform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform2(doubleArray41);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer47.inversetransform2(complexArray62);
        double[] doubleArray68 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer47.transform2(doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray77 = new org.apache.commons.math.complex.Complex[] { complex76 };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer71.transform2(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray85 = new org.apache.commons.math.complex.Complex[] { complex84 };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer79.transform2(complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer71.inversetransform2(complexArray86);
        java.lang.Object[] objArray89 = new java.lang.Object[] {};
        java.lang.Throwable throwable90 = null;
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("", objArray89, throwable90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray87, throwable90);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer47.inversetransform(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform(complexArray93);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform(univariateRealFunction95, (double) 10.0f, 1.3754263876807227d, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.0, 1.3754263876807227]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        boolean boolean14 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        org.apache.commons.math.complex.Complex complex27 = complex24.acos();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.cos();
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex29.asin();
        org.apache.commons.math.complex.Complex complex32 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex15.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.tan();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        boolean boolean13 = complex12.isInfinite();
        double double14 = complex12.abs();
        double double15 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        double double25 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex35.acos();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.cos();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex38.asin();
        org.apache.commons.math.complex.Complex complex43 = complex26.pow(complex42);
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        org.apache.commons.math.complex.Complex complex48 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex43.multiply(complex46);
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex60.acos();
        org.apache.commons.math.complex.Complex complex63 = complex56.pow(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex54.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.tanh();
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = complex65.asin();
        org.apache.commons.math.complex.Complex complex68 = complex49.divide(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex12.add(complex49);
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex73.subtract(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex76.negate();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex76.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        double double86 = complex85.abs();
        org.apache.commons.math.complex.Complex complex89 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex90 = complex89.exp();
        org.apache.commons.math.complex.Complex complex91 = complex90.negate();
        org.apache.commons.math.complex.Complex complex92 = complex90.acos();
        org.apache.commons.math.complex.Complex complex93 = complex92.sqrt();
        org.apache.commons.math.complex.Complex complex94 = complex85.multiply(complex93);
        org.apache.commons.math.complex.Complex complex95 = complex93.negate();
        org.apache.commons.math.complex.Complex complex96 = complex93.cos();
        org.apache.commons.math.complex.Complex complex97 = complex93.sin();
        org.apache.commons.math.complex.Complex complex98 = complex93.sqrt();
        boolean boolean99 = complex69.equals((java.lang.Object) complex93);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9999999983177603d + "'", double14 == 0.9999999983177603d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.763440814919645E-9d) + "'", double15 == (-3.763440814919645E-9d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.4698520192911105E-5d + "'", double25 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.035834395863998524d + "'", double86 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex2.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex7.sqrt();
        double double33 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex32.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer1.transform(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer15.inversetransform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer1.inversetransform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer35.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer35.transform2(doubleArray53);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray53, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer1.transform(doubleArray53);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray60);
        java.lang.String str62 = mathException61.getPattern();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray66 = mathException65.getArguments();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException65);
        mathException61.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray69 = mathException61.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.asin();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.tan();
        org.apache.commons.math.complex.Complex complex36 = complex19.pow(complex33);
        double double37 = complex19.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-11982.862390657456d) + "'", double16 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-8863.931686667593d) + "'", double37 == (-8863.931686667593d));
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer24.transform(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer1.transform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray75);
        java.lang.Throwable[] throwableArray77 = mathException76.getSuppressed();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray77);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        java.lang.String str84 = mathException83.getPattern();
        mathException81.addSuppressed((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray64, (java.lang.Throwable) mathException81);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray64);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str84, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.apache.commons.math.complex.Complex complex14 = complex12.sin();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex34.subtract(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex29.subtract(complex42);
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = complex49.equals(obj50);
        org.apache.commons.math.complex.Complex complex52 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math.complex.Complex complex59 = complex49.add(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj65 = new java.lang.Object();
        boolean boolean66 = complex64.equals(obj65);
        org.apache.commons.math.complex.Complex complex67 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex68 = complex64.negate();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex60.pow(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex46.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex29.divide(complex74);
        org.apache.commons.math.complex.Complex complex77 = complex12.subtract(complex76);
        double double78 = complex77.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex3);
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        double double22 = complex21.abs();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex5.pow(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex5.exp();
        double double36 = complex35.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.035834395863998524d + "'", double22 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9752357642135653d, 19250.68999956769d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer23.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 22040.29691869634d);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, (-0.2511271623901931d));
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 10.025031171631717d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.negate();
        org.apache.commons.math.complex.Complex complex22 = complex11.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.asin();
        org.apache.commons.math.complex.Complex complex30 = complex8.subtract(complex25);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex39.acos();
        org.apache.commons.math.complex.Complex complex42 = complex39.acos();
        org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex45 = complex44.tan();
        org.apache.commons.math.complex.Complex complex46 = complex30.add(complex44);
        org.apache.commons.math.complex.Complex complex47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex48 = complex30.add(complex47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer2.inversetransform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer2.inversetransform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.inversetransform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer55.inversetransform2(complexArray70);
        double[] doubleArray76 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer55.transform2(doubleArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray77);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray77, throwable79);
        java.lang.String str81 = mathException80.getPattern();
        java.lang.Object[] objArray82 = mathException80.getArguments();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray52, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray28, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        java.lang.String str86 = mathException85.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException85);
        java.lang.String str88 = mathException87.getPattern();
        java.lang.Throwable[] throwableArray89 = mathException87.getSuppressed();
        java.lang.String str90 = mathException87.getPattern();
        java.lang.Object[] objArray91 = mathException87.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str86, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str88, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str90, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.pow(complex11);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-1.0d), (double) 0.0f);
        org.apache.commons.math.complex.Complex complex16 = complex12.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        double double23 = complex22.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.1752011936438014d + "'", double23 == 1.1752011936438014d);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform(univariateRealFunction26, 1.25328374281112d, (double) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.25328374281112, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.330644760248188d, 3.760603093086394d);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.asin();
        org.apache.commons.math.complex.Complex complex28 = complex25.atan();
        org.apache.commons.math.complex.Complex complex29 = complex19.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex33.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.negate();
        org.apache.commons.math.complex.Complex complex40 = complex29.add(complex36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer43.inversetransform2(complexArray58);
        double[] doubleArray64 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer43.transform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray65, throwable67);
        java.lang.String str69 = mathException68.getPattern();
        java.lang.String str70 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        boolean boolean75 = complex29.equals((java.lang.Object) mathException72);
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj79 = new java.lang.Object();
        boolean boolean80 = complex78.equals(obj79);
        org.apache.commons.math.complex.Complex complex81 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex82 = complex29.pow(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex82.asin();
        org.apache.commons.math.complex.Complex complex84 = complex14.multiply(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex84.conjugate();
        double double86 = complex84.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        double double20 = complex18.getReal();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex25.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex18.subtract(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex7.pow(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex7.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 42.12194549221161d + "'", double20 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex9.divide(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex32.negate();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex32.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = complex21.add(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.atan();
        org.apache.commons.math.complex.Complex complex47 = complex7.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.sinh();
        double double49 = complex47.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex11 };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer6.transform2(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer6.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer6.inversetransform(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer40.inversetransform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer40.transform(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer6.inversetransform2(complexArray78);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform2(complexArray84);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform2(univariateRealFunction86, 14.142224011249972d, 10.693147180349666d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = complex19.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex13.pow(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex11.multiply(complex13);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex35.atan();
        double double37 = complex35.getReal();
        org.apache.commons.math.complex.Complex complex38 = complex35.atan();
        double double39 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex13.add(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex3.divide(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-9240.89014825243d) + "'", double37 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-4.93970403857352E-5d) + "'", double39 == (-4.93970403857352E-5d));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        boolean boolean8 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex7.log();
        java.lang.Class<?> wildcardClass11 = complex7.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.inversetransform(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 6.525012184105979d);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException30);
        java.lang.Object[] objArray33 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException30);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 10.025031171631717d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(complexArray36);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray59, throwable60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray57, throwable60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer17.inversetransform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex74 };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer69.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer64.transform(complexArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer64.transform2(doubleArray82);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, 0.0d);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer17.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.inversetransform(complexArray90);
        double[] doubleArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray60, throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray58, throwable61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform(complexArray58);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform(univariateRealFunction65, 11020.828705888358d, (-9240.89014825243d), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11020.828705888358, -9240.89014825243]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(complexArray64);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        boolean boolean17 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex24.negate();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex24.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.tan();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex33.cos();
        org.apache.commons.math.complex.Complex complex36 = complex16.subtract(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        double double43 = complex42.abs();
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = complex44.tanh();
        org.apache.commons.math.complex.Complex complex47 = complex44.atan();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt1z();
        org.apache.commons.math.complex.Complex complex49 = complex36.multiply(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex36.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 22026.465794806718d + "'", double43 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-0.04991641756298178d), 1.306932828523934d);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex30.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.negate();
        org.apache.commons.math.complex.Complex complex37 = complex33.asin();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = complex33.multiply(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex33.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex50.subtract(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex53.negate();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex53.divide(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.tan();
        org.apache.commons.math.complex.Complex complex63 = complex46.pow(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex26.divide(complex63);
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.negate();
        org.apache.commons.math.complex.Complex complex70 = complex68.asin();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt1z();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex77.acos();
        org.apache.commons.math.complex.Complex complex80 = complex73.pow(complex79);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex82 = complex81.sin();
        org.apache.commons.math.complex.Complex complex83 = complex81.negate();
        boolean boolean84 = complex79.equals((java.lang.Object) complex83);
        org.apache.commons.math.complex.Complex complex85 = complex70.multiply(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex70.cos();
        org.apache.commons.math.complex.Complex complex87 = complex64.multiply(complex70);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-11982.862390657456d) + "'", double43 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-10.693147180349666d) + "'", double72 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        double[] doubleArray39 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer18.transform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer1.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray67, throwable70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable70);
        java.lang.Throwable[] throwableArray74 = mathException73.getSuppressed();
        java.lang.String str75 = mathException73.getPattern();
        java.lang.Object[] objArray76 = mathException73.getArguments();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49, (java.lang.Throwable) mathException73);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer1.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, 0.2876048451616606d);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray49);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex19.divide(complex27);
        boolean boolean31 = complex6.equals((java.lang.Object) complex30);
        org.apache.commons.math.complex.Complex complex32 = complex6.sqrt1z();
        java.lang.Class<?> wildcardClass33 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex7.multiply(complex28);
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex33.subtract(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer57.inversetransform2(complexArray72);
        double[] doubleArray78 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer57.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer40.transform(complexArray79);
        boolean boolean81 = complex39.equals((java.lang.Object) fastFourierTransformer40);
        boolean boolean82 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex83 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex84 = complex83.tan();
        org.apache.commons.math.complex.Complex complex85 = complex29.subtract(complex84);
        double double86 = complex85.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer15.inversetransform2(complexArray30);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray33, throwable34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray31, throwable34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException(throwable34);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.String str39 = mathException37.getPattern();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray12, (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray12);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray1, (java.lang.Throwable) mathException42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex15.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer19.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        double[] doubleArray57 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer36.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer19.transform(complexArray58);
        boolean boolean60 = complex18.equals((java.lang.Object) fastFourierTransformer19);
        boolean boolean61 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex62 = complex18.tan();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex64 = complex63.tanh();
        org.apache.commons.math.complex.Complex complex65 = complex63.exp();
        org.apache.commons.math.complex.Complex complex66 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex8.multiply(complex63);
        org.apache.commons.math.complex.Complex complex68 = complex63.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray45, throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43, throwable46);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer3.inversetransform(complexArray43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException53.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str54, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0.0f, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.9999999909941609d, (-0.010721414358482029d));
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex9.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex9.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex23.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        boolean boolean33 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex6.tan();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex43.subtract(complex46);
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        double double51 = complex48.abs();
        org.apache.commons.math.complex.Complex complex52 = complex39.multiply(complex48);
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        boolean boolean56 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex57 = complex52.pow(complex55);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex62.acos();
        org.apache.commons.math.complex.Complex complex64 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex62.sqrt1z();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        org.apache.commons.math.complex.Complex complex72 = complex70.asin();
        org.apache.commons.math.complex.Complex complex73 = complex70.atan();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sin();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex73.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex65.multiply(complex81);
        org.apache.commons.math.complex.Complex complex85 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex86 = complex85.exp();
        org.apache.commons.math.complex.Complex complex87 = complex86.sin();
        org.apache.commons.math.complex.Complex complex88 = complex87.cosh();
        org.apache.commons.math.complex.Complex complex89 = complex65.divide(complex87);
        org.apache.commons.math.complex.Complex complex90 = complex87.tan();
        org.apache.commons.math.complex.Complex complex91 = complex90.sqrt1z();
        org.apache.commons.math.complex.Complex complex92 = complex52.divide(complex91);
        boolean boolean93 = complex92.isNaN();
        org.apache.commons.math.complex.Complex complex94 = complex35.pow(complex92);
        org.apache.commons.math.complex.Complex complex95 = complex94.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 22040.29691869634d + "'", double51 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex10 = complex7.exp();
        double double11 = complex10.abs();
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.negate();
        org.apache.commons.math.complex.Complex complex23 = complex19.asin();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex19.multiply(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex32.pow(complex46);
        org.apache.commons.math.complex.Complex complex50 = complex49.asin();
        org.apache.commons.math.complex.Complex complex51 = complex12.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex57 = complex55.sin();
        org.apache.commons.math.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math.complex.Complex complex59 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex60 = complex59.cos();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex64.subtract(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        double double72 = complex70.getReal();
        org.apache.commons.math.complex.Complex complex73 = complex70.cos();
        org.apache.commons.math.complex.Complex complex74 = complex59.divide(complex70);
        org.apache.commons.math.complex.Complex complex75 = complex51.add(complex70);
        org.apache.commons.math.complex.Complex complex76 = complex75.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.190540177722022d + "'", double11 == 2.190540177722022d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-11982.862390657456d) + "'", double29 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 42.12194549221161d + "'", double72 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer57.inversetransform2(complexArray72);
        double[] doubleArray78 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer57.transform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray78);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 2.566370623987466d);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.transform2(doubleArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform(univariateRealFunction84, 3.141592653589793d, (-0.99999999957944d), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.141592653589793, -0.99999999957944]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-2.566370623987466, 133.45127244734823, -2.566370623987466, 133.45127244734823]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-2.566370623987466, 133.45127244734823, -2.566370623987466, 133.45127244734823]");
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-3.8093789046474835E-5d), 10.0d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex14.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math.complex.Complex complex28 = complex9.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex9.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex10.pow(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        double double29 = complex27.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.1608602090379334d + "'", double29 == 1.1608602090379334d);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex13 = complex10.atan();
        org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex14.add(complex21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        double[] doubleArray49 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer28.transform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50, throwable52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.String str55 = mathException53.getPattern();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = mathException57.getSuppressed();
        boolean boolean60 = complex14.equals((java.lang.Object) mathException57);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException57);
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(throwableArray62);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex2.log();
        org.apache.commons.math.complex.Complex complex6 = complex2.tan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.cos();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex18.asin();
        org.apache.commons.math.complex.Complex complex23 = complex18.negate();
        org.apache.commons.math.complex.Complex complex24 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.asin();
        org.apache.commons.math.complex.Complex complex31 = complex28.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex32.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex39.acos();
        org.apache.commons.math.complex.Complex complex41 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex47.asin();
        org.apache.commons.math.complex.Complex complex50 = complex47.atan();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex55.acos();
        org.apache.commons.math.complex.Complex complex57 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex50.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex42.multiply(complex58);
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex42.divide(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex33.add(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex24.add(complex66);
        double double69 = complex24.abs();
        org.apache.commons.math.complex.Complex complex70 = complex2.multiply(complex24);
        org.apache.commons.math.complex.Complex complex71 = complex2.sin();
        org.apache.commons.math.complex.Complex complex72 = complex2.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.9951960409932249d + "'", double69 == 0.9951960409932249d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math.complex.Complex complex8 = complex6.sin();
        double double9 = complex8.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 29.767279224544986d + "'", double9 == 29.767279224544986d);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex17.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.add(complex20);
        boolean boolean25 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.asin();
        org.apache.commons.math.complex.Complex complex38 = complex35.atan();
        org.apache.commons.math.complex.Complex complex39 = complex29.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex20.multiply(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex20.asin();
        org.apache.commons.math.complex.Complex complex42 = complex20.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex47.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex52.cos();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex58.subtract(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex61.negate();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex61.divide(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        double double71 = complex70.abs();
        org.apache.commons.math.complex.Complex complex74 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = complex75.negate();
        org.apache.commons.math.complex.Complex complex77 = complex75.acos();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex79 = complex70.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex78.negate();
        boolean boolean81 = complex54.equals((java.lang.Object) complex80);
        org.apache.commons.math.complex.Complex complex82 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex83 = complex54.atan();
        org.apache.commons.math.complex.Complex complex84 = complex42.pow(complex54);
        org.apache.commons.math.complex.Complex complex85 = complex42.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.035834395863998524d + "'", double71 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex18);
        boolean boolean21 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex14.log();
        org.apache.commons.math.complex.Complex complex23 = complex7.add(complex14);
        org.apache.commons.math.complex.Complex complex24 = complex7.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.acos();
        org.apache.commons.math.complex.Complex complex21 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer24.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer24.transform2(doubleArray42);
        double[] doubleArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 2.566370623987466d);
        boolean boolean48 = complex23.equals((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex complex49 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex50 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex51 = complex23.acos();
        org.apache.commons.math.complex.Complex complex52 = complex11.multiply(complex51);
        java.lang.Class<?> wildcardClass53 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2.566370623987466, 380.8831717340306]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex29.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex29.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer34.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform2(doubleArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, (-4.764399774669739E-37d), 3.5202723815553454d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex6.subtract(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex6.atan();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.exp();
        double double38 = complex35.getReal();
        org.apache.commons.math.complex.Complex complex39 = complex35.exp();
        org.apache.commons.math.complex.Complex complex40 = complex25.divide(complex35);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 18491.78033459865d + "'", double38 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 0.0f, (-9240.89018634622d));
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.add(complex9);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        double[] doubleArray67 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.transform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer29.transform(complexArray68);
        boolean boolean70 = complex28.equals((java.lang.Object) fastFourierTransformer29);
        boolean boolean71 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex72 = complex28.tan();
        double double73 = complex28.abs();
        org.apache.commons.math.complex.Complex complex74 = complex28.acos();
        org.apache.commons.math.complex.Complex complex75 = complex28.exp();
        org.apache.commons.math.complex.Complex complex76 = complex18.pow(complex28);
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.negate();
        org.apache.commons.math.complex.Complex complex84 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex85 = complex84.exp();
        org.apache.commons.math.complex.Complex complex86 = complex84.sinh();
        org.apache.commons.math.complex.Complex complex87 = complex86.atan();
        org.apache.commons.math.complex.Complex complex88 = complex80.add(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex28.multiply(complex87);
        double double90 = complex87.abs();
        boolean boolean91 = complex9.equals((java.lang.Object) double90);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 14.142135623730951d + "'", double73 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.5707201399946504d + "'", double90 == 1.5707201399946504d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(3.4330616811688865d, 0.9963191767703051d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.4330616811688865, 0.9963191767703051]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((-1.0d), (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex22.divide(complex32);
        double double34 = complex32.abs();
        boolean boolean35 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex49 = complex38.multiply(complex48);
        boolean boolean50 = complex32.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex54.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex61 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.cos();
        org.apache.commons.math.complex.Complex complex63 = complex61.tanh();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex72.subtract(complex75);
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex68.divide(complex78);
        double double80 = complex78.abs();
        boolean boolean81 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex82 = complex61.multiply(complex78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        boolean boolean90 = complex78.equals((java.lang.Object) fastFourierTransformer83);
        org.apache.commons.math.complex.Complex complex91 = complex78.sqrt1z();
        org.apache.commons.math.complex.Complex complex92 = complex48.add(complex78);
        org.apache.commons.math.complex.Complex complex93 = complex48.asin();
        boolean boolean94 = complex17.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex95 = complex48.tan();
        org.apache.commons.math.complex.Complex complex96 = complex95.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 22040.29691869634d + "'", double34 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 22040.29691869634d + "'", double80 == 22040.29691869634d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex12.subtract(complex18);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex29.pow(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.negate();
        boolean boolean40 = complex35.equals((java.lang.Object) complex39);
        org.apache.commons.math.complex.Complex complex41 = complex26.multiply(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex20.add(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.sinh();
        boolean boolean46 = complex45.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-10.693147180349666d) + "'", double28 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.36560097309543693d);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer26.inversetransform2(complexArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray44, throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42, throwable45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer2.inversetransform(complexArray42);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray67, throwable70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable70);
        java.lang.Throwable[] throwableArray74 = mathException73.getSuppressed();
        mathException49.addSuppressed((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException73);
        java.lang.Throwable[] throwableArray77 = mathException73.getSuppressed();
        java.lang.Throwable[] throwableArray78 = mathException73.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray78);
        java.lang.Object[] objArray80 = mathException79.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer34.transform2(doubleArray80);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.transform2(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform2(univariateRealFunction85, 10.693147180349666d, 0.18118766697302902d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.693147180349666, 0.18118766697302902]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.035834395863998524, -5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray84);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.negate();
        boolean boolean50 = complex23.equals((java.lang.Object) complex49);
        org.apache.commons.math.complex.Complex complex51 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex58.negate();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        double double68 = complex67.abs();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex72.acos();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex67.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex23.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex23.asin();
        double double80 = complex79.getReal();
        org.apache.commons.math.complex.Complex complex81 = complex12.pow(complex79);
        org.apache.commons.math.complex.Complex complex82 = complex81.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.035834395863998524d + "'", double40 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.035834395863998524d + "'", double68 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.5707201399946504d, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.5707201399946504, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex21.asin();
        org.apache.commons.math.complex.Complex complex26 = complex21.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex13.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 3.368901671590452d);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex19.pow(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex26.cos();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex31.pow(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex35.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.0d, 0.9951960409932249d);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 10.996801933833694d, 22584.772424365518d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex13.pow(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex80 };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer75.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex86 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex87 = complex86.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray89 = new org.apache.commons.math.complex.Complex[] { complex88 };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer83.transform2(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer75.inversetransform2(complexArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(complexArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.transform(univariateRealFunction94, (double) 100.0f, 11013.23288813991d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        double double13 = complex11.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.inversetransform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer46.inversetransform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer46.inversetransform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer46.transform2(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, 0.035834395863998524d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, 5991.431182979468d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray82);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        double[] doubleArray43 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer22.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer22.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer51.transform2(complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer78.inversetransform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer77.transform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer51.inversetransform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer22.inversetransform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 2.4698520192911105E-5d);
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, (double) (short) 100);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform2(complexArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.inversetransform2(univariateRealFunction91, 0.0d, 3.141592653589793d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        double double5 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex6.negate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = complex6.multiply(complex16);
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex26.cos();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex32.subtract(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        double double45 = complex44.abs();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.acos();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.negate();
        boolean boolean55 = complex28.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex56 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex60.subtract(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.negate();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex63.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        double double73 = complex72.abs();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex77.acos();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = complex72.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex28.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex28.asin();
        double double85 = complex84.getReal();
        org.apache.commons.math.complex.Complex complex86 = complex6.multiply(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex4.subtract(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex89 = complex4.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-5991.431207677988d) + "'", double15 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.035834395863998524d + "'", double45 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.035834395863998524d + "'", double73 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer3.inversetransform(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer32.inversetransform(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer32.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer3.transform2(complexArray66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        java.lang.String str74 = mathException73.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str74, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.transform2(univariateRealFunction34, (-0.8414709838989786d), 100.65854475119974d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer47.inversetransform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.inversetransform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform2(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 0.035834395863998524d);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 0);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.inversetransform2(doubleArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform2(univariateRealFunction81, (-5.693156703928211d), 0.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform2(doubleArray38);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray38, 0.035834395863998524d);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex62 };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer57.transform2(complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer49.inversetransform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer49.inversetransform(complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, (double) 10);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray70, (java.lang.Throwable) mathException79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform2(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform(complexArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray81);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray40, throwable43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer47.transform(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer47.transform2(doubleArray65);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 0.0d);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 1.0f);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform2(doubleArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(univariateRealFunction74, 10.046827686460665d, 3.1415679550696d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.046827686460665, 3.1415679550696]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(4.432339073949621E8d, 0.17833323080676133d);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(22026.465794806718d, (double) 1);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 22026.46581750668d + "'", double3 == 22026.46581750668d);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.0038738355039385d, 9240.89018634622d);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        boolean boolean13 = complex12.isInfinite();
        double double14 = complex12.abs();
        double double15 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex12.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9999999983177603d + "'", double14 == 0.9999999983177603d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.763440814919645E-9d) + "'", double15 == (-3.763440814919645E-9d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex17.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        double double27 = complex26.abs();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        boolean boolean37 = complex10.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        double double55 = complex53.getReal();
        org.apache.commons.math.complex.Complex complex56 = complex48.subtract(complex53);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex60.asin();
        org.apache.commons.math.complex.Complex complex63 = complex60.atan();
        org.apache.commons.math.complex.Complex complex64 = complex63.negate();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex64.sqrt1z();
        org.apache.commons.math.complex.Complex complex67 = complex53.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex64.exp();
        org.apache.commons.math.complex.Complex complex70 = complex41.subtract(complex64);
        org.apache.commons.math.complex.Complex complex71 = complex10.subtract(complex64);
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.035834395863998524d + "'", double27 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9240.89014825243d) + "'", double55 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        double double7 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex8 = complex4.tan();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.negate();
        org.apache.commons.math.complex.Complex complex22 = complex11.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex22.pow(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex33.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex44.asin();
        org.apache.commons.math.complex.Complex complex47 = complex44.atan();
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        double double50 = complex48.abs();
        org.apache.commons.math.complex.Complex complex51 = complex48.negate();
        org.apache.commons.math.complex.Complex complex52 = complex40.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex25.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex25.sin();
        org.apache.commons.math.complex.Complex complex55 = complex4.add(complex54);
        double double56 = complex4.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9240.89014825243d) + "'", double7 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.570758233200585d + "'", double50 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 11013.23288813991d + "'", double56 == 11013.23288813991d);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer16.inversetransform(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer2.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, (-7.123309922588602E-6d));
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray41);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex4.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        double double22 = complex20.getReal();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex20.tan();
        org.apache.commons.math.complex.Complex complex25 = complex12.pow(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = complex26.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.tan();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9240.89014825243d) + "'", double22 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex24 };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer19.transform2(complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer14.transform(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer28.inversetransform(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer14.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer53.inversetransform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.transform2(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.transform2(univariateRealFunction75, 0.7656706613751785d, 0.0d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7656706613751785, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.transform2(doubleArray52);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.transform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, (double) ' ');
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform2(complexArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, 1.2882551587809412d, (-1.7387935193125343d), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer35.inversetransform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer27.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer27.inversetransform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer61.transform(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer61.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer27.inversetransform(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 10.0f);
        double[] doubleArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, 22026.465794806718d);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, (-0.03563670930070898d));
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform(doubleArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.inversetransform(univariateRealFunction91, (-0.0d), (double) (byte) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-0.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-7849.507584515368, -1164970.2180175611]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-7849.507584515368, -1164970.2180175611]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-7849.507584515368, -1164970.2180175611]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-7849.507584515368, -1164970.2180175611]");
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer20.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer34.inversetransform(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer20.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, (-7.123309922588602E-6d));
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer19.transform2(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.transform2(complexArray57);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.inversetransform2(univariateRealFunction62, 18481.78033459865d, 9.306852820281174d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [18481.78033459865, 9.306852820281174]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60, throwable62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer31.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform2(doubleArray78);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 0.035834395863998524d);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) 0);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray86);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray86, 11972.862390657456d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray86);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0]");
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24, throwable26);
        java.lang.String str28 = mathException27.getPattern();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer33.inversetransform2(complexArray48);
        double[] doubleArray54 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer33.transform2(doubleArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray55);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray55, throwable57);
        java.lang.String str59 = mathException58.getPattern();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException60);
        mathException29.addSuppressed((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.Object[] objArray64 = mathException61.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer9.inversetransform2(complexArray24);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray27, throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray25, throwable28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable28);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.String str33 = mathException31.getPattern();
        java.lang.Object[] objArray34 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray7, (java.lang.Throwable) mathException31);
        java.lang.String str36 = mathException31.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex69 };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer64.transform2(complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray78 = new org.apache.commons.math.complex.Complex[] { complex77 };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer72.transform2(complexArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer64.inversetransform2(complexArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", objArray82, throwable83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray80, throwable83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer40.inversetransform(complexArray80);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException89);
        mathException31.addSuppressed((java.lang.Throwable) mathException89);
        java.lang.Object[] objArray92 = mathException31.getArguments();
        java.lang.String str93 = mathException31.toString();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.MathException" + "'", str93, "org.apache.commons.math.MathException");
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), Double.NaN);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        double double15 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex13);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex20.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex13.pow(complex24);
        double double28 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex24.tanh();
        double double30 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        boolean boolean33 = complex2.equals((java.lang.Object) complex29);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9240.89014825243d) + "'", double15 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.4698520192911105E-5d + "'", double28 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.9231794343056575E-6d + "'", double30 == 3.9231794343056575E-6d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex11.subtract(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex14.negate();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex14.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        double double24 = complex23.abs();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.negate();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = complex31.sin();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sin();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex46 = complex41.divide(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex50.subtract(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex53.negate();
        org.apache.commons.math.complex.Complex complex57 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex46.subtract(complex53);
        org.apache.commons.math.complex.Complex complex59 = complex53.asin();
        org.apache.commons.math.complex.Complex complex60 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex61 = complex53.log();
        org.apache.commons.math.complex.Complex complex62 = complex31.subtract(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex7.subtract(complex62);
        java.lang.Class<?> wildcardClass64 = complex7.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.035834395863998524d + "'", double24 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        double[] doubleArray69 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.transform2(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer48.inversetransform(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.inversetransform2(doubleArray74);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.inversetransform2(univariateRealFunction78, (-1.5024074532019105d), 0.6001436993302822d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex20 };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer15.transform2(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer7.inversetransform2(complexArray22);
        double[] doubleArray28 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.transform2(doubleArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray29, throwable31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.transform(univariateRealFunction34, (double) 10, (-1.0947552508950837E-7d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray8, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer24.inversetransform2(complexArray39);
        double[] doubleArray45 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer24.transform2(doubleArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray46);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray46, throwable48);
        java.lang.String str50 = mathException49.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex58 };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer53.transform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex66 };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer61.transform2(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer53.inversetransform2(complexArray68);
        double[] doubleArray74 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer53.transform2(doubleArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray75);
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray75, throwable77);
        java.lang.String str79 = mathException78.getPattern();
        java.lang.Object[] objArray80 = mathException78.getArguments();
        mathException49.addSuppressed((java.lang.Throwable) mathException78);
        java.lang.Throwable[] throwableArray82 = mathException78.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException78);
        mathException19.addSuppressed((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        java.lang.Object[] objArray88 = mathException87.getArguments();
        mathException19.addSuppressed((java.lang.Throwable) mathException87);
        java.lang.Throwable[] throwableArray90 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException91);
        java.lang.String str93 = mathException91.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.MathException: " + "'", str93, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        double double7 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex8 = complex4.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9240.89014825243d) + "'", double7 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform2(doubleArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer22.inversetransform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex52 };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer47.transform2(complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer39.inversetransform2(complexArray54);
        double[] doubleArray60 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer39.transform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer22.transform(complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer15.transform2(complexArray61);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform2(complexArray63);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(univariateRealFunction66, (-13.268071397712466d), 3.070581306251327d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.6393342588846141d, (-2.4698520192911105E-5d), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.6393342588846141, -2.4698520192911105E-5]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer34.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex61 };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer56.transform2(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer48.inversetransform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer48.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer34.transform2(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform2(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray76, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer34.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, 0.035834395863998524d);
        double[] doubleArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, 3.342308207562617d);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(doubleArray93);
        double[] doubleArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray93, (-0.010721414358482029d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-0.0012840994599307468, -0.19057725745023466]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-0.0012840994599307468, -0.19057725745023466]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0012840994599307468, -0.19057725745023466]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-0.0012840994599307468, -0.19057725745023466]");
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, throwable21);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex49 };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer44.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer36.inversetransform2(complexArray51);
        double[] doubleArray57 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer36.transform2(doubleArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray58);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray58, throwable60);
        java.lang.String str62 = mathException61.getPattern();
        java.lang.String str63 = mathException61.getPattern();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray66 = mathException64.getSuppressed();
        java.lang.String str67 = mathException64.getPattern();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException64);
        mathException29.addSuppressed((java.lang.Throwable) mathException68);
        java.lang.String str70 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", objArray24, (java.lang.Throwable) mathException68);
        java.lang.String str72 = mathException68.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str70, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str72, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray45, throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43, throwable46);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer3.inversetransform(complexArray43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, (double) (short) 0);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray56);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-5991.431182979468d), 0.05000000000000001d);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform(univariateRealFunction17, 0.05000000000000001d, 0.6393342588846141d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex0.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.tan();
        double double12 = complex10.getImaginary();
        double double13 = complex10.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer5.inversetransform2(complexArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray23, throwable24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray21, throwable24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable24);
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        java.lang.Object[] objArray29 = mathException27.getArguments();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException32);
        java.lang.Object[] objArray36 = mathException32.getArguments();
        java.lang.Throwable[] throwableArray37 = mathException32.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray37);
        java.lang.String str39 = mathException38.getPattern();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, Double.POSITIVE_INFINITY, 0.05226086543509898d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [Infinity, 0.05226086543509898]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        double[] doubleArray46 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer25.transform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer8.transform(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer1.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex57 };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer52.transform2(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex65 };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer60.transform2(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer52.inversetransform2(complexArray67);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("", objArray70, throwable71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray68, throwable71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable71);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        java.lang.Object[] objArray76 = mathException74.getArguments();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray47, (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("");
        java.lang.String str84 = mathException83.getPattern();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException85);
        mathException80.addSuppressed((java.lang.Throwable) mathException85);
        java.lang.String str88 = mathException80.toString();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str88, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        boolean boolean6 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        double double19 = complex17.getReal();
        org.apache.commons.math.complex.Complex complex20 = complex12.subtract(complex17);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex27.negate();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex17.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex3.add(complex17);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        double double45 = complex42.getReal();
        org.apache.commons.math.complex.Complex complex46 = complex32.divide(complex42);
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex56.sinh();
        org.apache.commons.math.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math.complex.Complex complex59 = complex56.acos();
        org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex59);
        boolean boolean61 = complex52.isNaN();
        org.apache.commons.math.complex.Complex complex62 = complex52.asin();
        org.apache.commons.math.complex.Complex complex63 = complex47.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex47.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9240.89014825243d) + "'", double19 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 18491.78033459865d + "'", double45 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer42.inversetransform2(complexArray57);
        double[] doubleArray63 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer42.transform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer25.transform(complexArray64);
        boolean boolean66 = complex24.equals((java.lang.Object) fastFourierTransformer25);
        boolean boolean67 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex68 = complex24.tan();
        org.apache.commons.math.complex.Complex complex69 = complex6.multiply(complex24);
        org.apache.commons.math.complex.Complex complex70 = complex24.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.String str30 = mathException28.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Object[] objArray34 = mathException32.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException32);
        java.lang.Object[] objArray36 = mathException35.getArguments();
        java.lang.String str37 = mathException35.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str37, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.Object[] objArray67 = mathException65.getArguments();
        mathException37.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException65);
        mathException10.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray71 = mathException65.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        java.lang.String str73 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException65);
        java.lang.String str76 = mathException75.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str76, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.String str6 = mathException3.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        double[] doubleArray31 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer10.transform2(doubleArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray32, throwable34);
        java.lang.String str36 = mathException35.getPattern();
        java.lang.String str37 = mathException35.getPattern();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Object[] objArray41 = mathException39.getArguments();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException39);
        mathException3.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException39);
        java.lang.String str45 = mathException44.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException" + "'", str45, "org.apache.commons.math.MathException: org.apache.commons.math.MathException");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-2.4698520192911105E-5d), (-2.4698520192911105E-5d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform2(doubleArray48);
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, 0.035834395863998524d);
        double[] doubleArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, (double) 0);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(doubleArray52);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform(univariateRealFunction56, 1.0d, 0.006775931892946596d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex8 };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer3.transform2(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex16 };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer11.transform2(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer3.inversetransform2(complexArray18);
        double[] doubleArray24 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer3.transform2(doubleArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray25, throwable27);
        java.lang.String str29 = mathException28.getPattern();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer31.inversetransform2(complexArray46);
        double[] doubleArray52 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer31.transform2(doubleArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray53);
        mathException28.addSuppressed((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", objArray58);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex12 };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer7.transform2(complexArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer2.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer16.inversetransform(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer2.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer40.inversetransform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex72 };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer67.transform2(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer59.inversetransform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer40.transform(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer2.transform2(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, (-1.7387935193125343d));
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray85);
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex7.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        double double15 = complex12.abs();
        org.apache.commons.math.complex.Complex complex16 = complex3.multiply(complex12);
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) (-1L));
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex16.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex26.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex37.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex29.multiply(complex45);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex29.divide(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tan();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex16.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex57.atan();
        org.apache.commons.math.complex.Complex complex59 = complex58.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 22040.29691869634d + "'", double15 == 22040.29691869634d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer2.inversetransform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer2.inversetransform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.inversetransform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex60 };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer55.transform2(complexArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex68 };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer63.transform2(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer55.inversetransform2(complexArray70);
        double[] doubleArray76 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer55.transform2(doubleArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray77);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray77, throwable79);
        java.lang.String str81 = mathException80.getPattern();
        java.lang.Object[] objArray82 = mathException80.getArguments();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray52, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray28, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException80);
        java.lang.String str86 = mathException80.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        boolean boolean11 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex(0.0d, (-11982.862390657456d));
        boolean boolean16 = complex12.equals((java.lang.Object) (-11982.862390657456d));
        boolean boolean17 = complex12.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60, throwable62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer31.inversetransform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 42.12194549221161d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer31.inversetransform2(complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform2(doubleArray78);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 0.035834395863998524d);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) 0);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray84, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, 0.36560097309543693d, (double) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex7.pow(complex11);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex30.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.negate();
        org.apache.commons.math.complex.Complex complex41 = complex38.cos();
        org.apache.commons.math.complex.Complex complex42 = complex38.sin();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sin();
        org.apache.commons.math.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math.complex.Complex complex49 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) (short) 0, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex53 = complex48.divide(complex52);
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex57.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex60.negate();
        org.apache.commons.math.complex.Complex complex64 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex53.subtract(complex60);
        org.apache.commons.math.complex.Complex complex66 = complex60.asin();
        org.apache.commons.math.complex.Complex complex67 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex60.log();
        org.apache.commons.math.complex.Complex complex69 = complex38.subtract(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex7.divide(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex70.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5991.431207677988d) + "'", double6 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-11982.862390657456d) + "'", double13 == (-11982.862390657456d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.035834395863998524d + "'", double31 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex6.subtract(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex19.log();
        org.apache.commons.math.complex.Complex complex26 = complex19.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        double double41 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.sin();
        org.apache.commons.math.complex.Complex complex60 = complex40.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex31.subtract(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-7.123309922588602E-6d) + "'", double41 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex22 };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer17.transform2(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer17.inversetransform2(complexArray32);
        double[] doubleArray38 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer17.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex46 };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer41.transform2(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex54 };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer49.transform2(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer41.inversetransform2(complexArray56);
        double[] doubleArray62 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer41.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex71 };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer66.transform2(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.exp();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex79 };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer74.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer66.inversetransform2(complexArray81);
        double[] doubleArray87 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer66.transform2(doubleArray87);
        double[] doubleArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, (double) 100L);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray90);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray90);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, 10.046827686460665d);
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform2(doubleArray94);
        double[] doubleArray97 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray94, (double) (short) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray94);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-0.0, 0.0, -0.0, 0.0]");
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        double[] doubleArray22 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex30 };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer25.transform2(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex38 };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer33.transform2(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer25.inversetransform2(complexArray40);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", objArray43, throwable44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray41, throwable44);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer1.inversetransform(complexArray41);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer50.inversetransform2(complexArray65);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray68, throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray66, throwable69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable69);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        mathException48.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        java.lang.Throwable[] throwableArray76 = mathException72.getSuppressed();
        java.lang.String str77 = mathException72.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.math.MathException" + "'", str77, "org.apache.commons.math.MathException");
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.3839442314993494d, 0.8414709838989786d);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        double[] doubleArray35 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.transform2(doubleArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray62, throwable64);
        java.lang.String str66 = mathException65.getPattern();
        java.lang.Object[] objArray67 = mathException65.getArguments();
        mathException37.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException65);
        mathException10.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray71 = mathException65.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        java.lang.String str73 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException65);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray46);
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex51.asin();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math.complex.Complex complex62 = complex60.acos();
        org.apache.commons.math.complex.Complex complex63 = complex56.pow(complex62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex65 = complex64.sin();
        org.apache.commons.math.complex.Complex complex66 = complex64.negate();
        boolean boolean67 = complex62.equals((java.lang.Object) complex66);
        org.apache.commons.math.complex.Complex complex68 = complex53.multiply(complex66);
        org.apache.commons.math.complex.Complex complex69 = complex68.sin();
        org.apache.commons.math.complex.Complex complex70 = complex68.tan();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer71.transform2(doubleArray75);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, 0.035834395863998524d);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 0);
        boolean boolean82 = complex68.equals((java.lang.Object) doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray79);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform2(univariateRealFunction84, (-0.548306907193979d), 0.8414709838989786d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-10.693147180349666d) + "'", double55 == (-10.693147180349666d));
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        double double6 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex4.cos();
        double double9 = complex8.abs();
        double double10 = complex8.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9240.89014825243d) + "'", double6 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.sin();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex9.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 11972.862390657456d, (-7.123309922655306E-6d), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [11972.862390657456, -7.123309922655306E-6]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.1608602090379334d, 10.046827686460665d);
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0L, Double.NEGATIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer1.inversetransform(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer1.inversetransform2(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer29.inversetransform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer29.inversetransform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray76, throwable78);
        java.lang.String str80 = mathException79.getPattern();
        java.lang.Object[] objArray81 = mathException79.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51, (java.lang.Throwable) mathException79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer1.transform2(complexArray51);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51);
        java.lang.Object[] objArray85 = mathException84.getArguments();
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray85);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(objArray85);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex37 };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer32.transform2(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.transform(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray47, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer27.transform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        double[] doubleArray75 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer54.transform2(doubleArray75);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 100L);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 11766.272084123093d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.inversetransform2(complexArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1176627.2084123094, 6.118461483744008E7, -1176627.2084123094, 6.118461483744008E7]");
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        double double26 = complex24.getReal();
        org.apache.commons.math.complex.Complex complex27 = complex24.exp();
        org.apache.commons.math.complex.Complex complex28 = complex13.add(complex24);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex40.acos();
        boolean boolean44 = complex43.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex32.add(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex24.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex48 = complex45.asin();
        org.apache.commons.math.complex.Complex complex49 = complex45.asin();
        org.apache.commons.math.complex.Complex complex50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex51 = complex45.pow(complex50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.12194549221161d + "'", double26 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-5991.431207677988d) + "'", double42 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex0.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        double double12 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex9.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        double double17 = complex16.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 18491.78033459865d + "'", double12 == 18491.78033459865d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.45407153819929014d + "'", double17 == 0.45407153819929014d);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex24.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex20.add(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex6.subtract(complex31);
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        double double41 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.negate();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.sin();
        org.apache.commons.math.complex.Complex complex60 = complex40.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex31.subtract(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex63.exp();
        org.apache.commons.math.complex.Complex complex65 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex69.subtract(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex72.negate();
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = complex75.acos();
        org.apache.commons.math.complex.Complex complex78 = complex63.divide(complex77);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-7.123309922588602E-6d) + "'", double41 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = complex4.cos();
        boolean boolean6 = complex5.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex12.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex21.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer4.inversetransform2(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer3.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer54.inversetransform2(complexArray69);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray72, throwable73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray70, throwable73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable73);
        java.lang.Throwable[] throwableArray77 = mathException76.getSuppressed();
        java.lang.Object[] objArray78 = mathException76.getArguments();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        double[] doubleArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, 100.0d);
        double[] doubleArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, (-0.9999999983177603d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[99.99999983177604, -5199.9999912523535, 99.99999983177604, -5199.9999912523535]");
        org.junit.Assert.assertNotNull(complexArray66);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex6.pow(complex11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        double[] doubleArray51 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer13.transform(complexArray52);
        boolean boolean54 = complex11.equals((java.lang.Object) complexArray53);
        org.apache.commons.math.complex.Complex complex55 = complex11.log();
        org.apache.commons.math.complex.Complex complex56 = complex11.atan();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.exp();
        org.apache.commons.math.complex.Complex complex61 = complex59.sinh();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        double double69 = complex67.getReal();
        org.apache.commons.math.complex.Complex complex70 = complex62.subtract(complex67);
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex74.negate();
        org.apache.commons.math.complex.Complex complex76 = complex74.asin();
        org.apache.commons.math.complex.Complex complex77 = complex74.atan();
        org.apache.commons.math.complex.Complex complex78 = complex77.negate();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = complex78.sqrt1z();
        org.apache.commons.math.complex.Complex complex81 = complex67.pow(complex78);
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex82.log();
        org.apache.commons.math.complex.Complex complex85 = complex84.log();
        org.apache.commons.math.complex.Complex complex86 = complex67.subtract(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex67.asin();
        org.apache.commons.math.complex.Complex complex88 = complex56.divide(complex87);
        org.apache.commons.math.complex.Complex complex91 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex92 = complex91.cosh();
        org.apache.commons.math.complex.Complex complex93 = complex91.log();
        org.apache.commons.math.complex.Complex complex94 = complex91.exp();
        double double95 = complex91.abs();
        boolean boolean96 = complex91.isInfinite();
        org.apache.commons.math.complex.Complex complex97 = complex91.asin();
        org.apache.commons.math.complex.Complex complex98 = complex87.add(complex91);
        org.apache.commons.math.complex.Complex complex99 = complex87.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-9240.89014825243d) + "'", double69 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 14.142135623730951d + "'", double95 == 14.142135623730951d);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj18 = new java.lang.Object();
        boolean boolean19 = complex17.equals(obj18);
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex17.negate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex13.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex13.log();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex37.acos();
        org.apache.commons.math.complex.Complex complex41 = complex33.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.cos();
        org.apache.commons.math.complex.Complex complex43 = complex40.tan();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex54.atan();
        double double56 = complex54.getReal();
        org.apache.commons.math.complex.Complex complex57 = complex49.subtract(complex54);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.asin();
        org.apache.commons.math.complex.Complex complex64 = complex61.atan();
        org.apache.commons.math.complex.Complex complex65 = complex64.negate();
        org.apache.commons.math.complex.Complex complex66 = complex65.acos();
        org.apache.commons.math.complex.Complex complex67 = complex65.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = complex54.pow(complex65);
        double double69 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = complex43.divide(complex65);
        org.apache.commons.math.complex.Complex complex71 = complex43.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex71.exp();
        org.apache.commons.math.complex.Complex complex74 = complex28.subtract(complex71);
        double double75 = complex71.getReal();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-9240.89014825243d) + "'", double56 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2.4698520192911105E-5d + "'", double69 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1.6822396823040624E-9d) + "'", double75 == (-1.6822396823040624E-9d));
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.sin();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        double double32 = complex31.getReal();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex38.subtract(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.exp();
        org.apache.commons.math.complex.Complex complex48 = complex44.negate();
        org.apache.commons.math.complex.Complex complex49 = complex33.add(complex44);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 42.12194549221161d + "'", double46 == 42.12194549221161d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform(univariateRealFunction23, 28046.050736663732d, 0.08295426844511536d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex2.negate();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        double double15 = complex13.getReal();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        boolean boolean13 = complex12.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        double double7 = complex6.abs();
        org.apache.commons.math.complex.Complex complex8 = complex6.negate();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex16.add(complex30);
        org.apache.commons.math.complex.Complex complex44 = complex16.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex50.divide(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex58.log();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex66.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex58.pow(complex66);
        org.apache.commons.math.complex.Complex complex73 = complex66.tan();
        org.apache.commons.math.complex.Complex complex74 = complex44.pow(complex73);
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex83.sinh();
        org.apache.commons.math.complex.Complex complex85 = complex83.acos();
        org.apache.commons.math.complex.Complex complex86 = complex83.acos();
        org.apache.commons.math.complex.Complex complex87 = complex79.divide(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt1z();
        org.apache.commons.math.complex.Complex complex89 = complex88.log();
        org.apache.commons.math.complex.Complex complex90 = complex44.add(complex88);
        double double91 = complex90.getReal();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.570758233200585d + "'", double40 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex29 };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer24.transform2(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer16.inversetransform2(complexArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer8.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, (double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer35.transform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray55, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer35.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform2(complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        double[] doubleArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, 3.9231794343056575E-6d);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray68, 18491.78033459865d);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray70);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.07254657231239521, 10.76686597894609]");
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        double double7 = complex6.getReal();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.sinh();
        double double8 = complex6.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex25);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.asin();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex25.pow(complex36);
        double double40 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex14.divide(complex36);
        org.apache.commons.math.complex.Complex complex42 = complex36.asin();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9240.89014825243d) + "'", double27 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.4698520192911105E-5d + "'", double40 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex25);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex32.asin();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex25.pow(complex36);
        double double40 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex14.divide(complex36);
        org.apache.commons.math.complex.Complex complex42 = complex14.log();
        boolean boolean43 = complex42.isNaN();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex47.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex50.negate();
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex50.divide(complex57);
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sin();
        org.apache.commons.math.complex.Complex complex64 = complex63.acos();
        org.apache.commons.math.complex.Complex complex67 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex71);
        org.apache.commons.math.complex.Complex complex74 = complex63.divide(complex71);
        boolean boolean75 = complex50.equals((java.lang.Object) complex74);
        org.apache.commons.math.complex.Complex complex76 = complex42.divide(complex50);
        org.apache.commons.math.complex.Complex complex77 = complex50.tan();
        boolean boolean78 = complex77.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9240.89014825243d) + "'", double27 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.4698520192911105E-5d + "'", double40 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        double double28 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex29 = complex16.subtract(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        org.apache.commons.math.complex.Complex complex31 = complex29.exp();
        double double32 = complex31.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex12);
        org.apache.commons.math.complex.Complex complex16 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex20.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex23.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.tan();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex35 = complex12.add(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex41.asin();
        org.apache.commons.math.complex.Complex complex44 = complex41.atan();
        org.apache.commons.math.complex.Complex complex45 = complex44.atan();
        double double46 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex50 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex51.subtract(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex54.negate();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex54.divide(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex45.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex37.add(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex64.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-7.123309922588602E-6d) + "'", double46 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) (-1L), 10.0d);
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = complex10.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.divide(complex10);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex28.asin();
        org.apache.commons.math.complex.Complex complex31 = complex28.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        org.apache.commons.math.complex.Complex complex37 = complex10.add(complex36);
        double double38 = complex37.getReal();
        org.apache.commons.math.complex.Complex complex39 = complex37.sqrt();
        double double40 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex37.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-7.123309922588602E-6d) + "'", double33 == (-7.123309922588602E-6d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.18118766697302902d + "'", double38 == 0.18118766697302902d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.00001102435328d + "'", double40 == 10.00001102435328d);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex8.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer5.inversetransform(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 3.0296757004818433d);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform2(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex39 };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer34.transform2(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex47 };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer42.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer34.inversetransform2(complexArray49);
        double[] doubleArray55 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer34.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer34.inversetransform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer29.inversetransform2(doubleArray60);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray60, (double) 'a');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform2(doubleArray67);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.inversetransform(univariateRealFunction70, (-3.342308207562602d), 148.41652803783924d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[97.0, 14396.07643294993]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[97.0, 14396.07643294993]");
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        java.lang.String str2 = mathException1.getPattern();
        java.lang.Object[] objArray3 = mathException1.getArguments();
        java.lang.String str4 = mathException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str2, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str4, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        boolean boolean30 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = complex33.equals(obj34);
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.acos();
        org.apache.commons.math.complex.Complex complex48 = complex40.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.cos();
        org.apache.commons.math.complex.Complex complex50 = complex33.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sinh();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.negate();
        org.apache.commons.math.complex.Complex complex57 = complex55.asin();
        org.apache.commons.math.complex.Complex complex58 = complex55.atan();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex64.acos();
        org.apache.commons.math.complex.Complex complex67 = complex64.acos();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex72 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = complex74.acos();
        org.apache.commons.math.complex.Complex complex76 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex80.negate();
        org.apache.commons.math.complex.Complex complex82 = complex76.subtract(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex68.divide(complex80);
        org.apache.commons.math.complex.Complex complex84 = complex80.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex67.subtract(complex80);
        org.apache.commons.math.complex.Complex complex86 = complex85.conjugate();
        org.apache.commons.math.complex.Complex complex87 = complex59.divide(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex86.cos();
        org.apache.commons.math.complex.Complex complex89 = complex51.pow(complex86);
        org.apache.commons.math.complex.Complex complex90 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex91 = complex90.exp();
        org.apache.commons.math.complex.Complex complex92 = complex29.pow(complex90);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.035834395863998524d + "'", double16 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        double[] doubleArray25 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer4.transform2(doubleArray25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray26);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray26, throwable28);
        java.lang.String str30 = mathException29.getPattern();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException29);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        java.lang.String str33 = mathException31.getPattern();
        java.lang.Throwable[] throwableArray34 = mathException31.getSuppressed();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray59);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray59, throwable61);
        java.lang.String str63 = mathException62.getPattern();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        java.lang.Throwable[] throwableArray66 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray34, (java.lang.Throwable) mathException67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) throwableArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str33, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.cosh();
        double double9 = complex8.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.NEGATIVE_INFINITY + "'", double9 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        double double10 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex6.pow(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.sin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.36560097309543693d, (-3.763440814919645E-9d), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.36560097309543693, -3.763440814919645E-9]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.342308207562617d, 14.142135623730951d);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer0.inversetransform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer0.inversetransform2(complexArray25);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer0.transform2(univariateRealFunction27, 1.330644760248188d, 4.810294135147748d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-9.999999991586744d), 0.05226086543509898d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        boolean boolean16 = complex15.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer23.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex41 = complex40.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex42 };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer37.transform2(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex50 };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer45.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer37.inversetransform2(complexArray52);
        double[] doubleArray58 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer37.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer37.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer23.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex73 };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer68.transform2(complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex81 };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer76.transform2(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer68.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 10.324062088703297d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform2(complexArray86);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer88 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray91 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer88.inversetransform2(doubleArray91);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray91, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray94);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray94);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.transform(doubleArray94);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray97);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.1608602090796682d, 1.5465095304352279d);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-9240.89014825243d));
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer0.inversetransform(univariateRealFunction31, (double) 1.0f, (-11982.862390657456d), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray30);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex29.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex35 = null;
        org.apache.commons.math.complex.Complex complex36 = complex34.divide(complex35);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex40.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt();
        boolean boolean44 = complex36.equals((java.lang.Object) complex41);
        double double45 = complex41.getReal();
        boolean boolean46 = complex41.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray18, throwable21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable21);
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        java.lang.Object[] objArray26 = mathException24.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.String str30 = mathException29.getPattern();
        java.lang.Object[] objArray31 = mathException29.getArguments();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.MathException: " + "'", str30, "org.apache.commons.math.MathException: ");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex13.acos();
        org.apache.commons.math.complex.Complex complex17 = complex9.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.cos();
        org.apache.commons.math.complex.Complex complex19 = complex2.pow(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex0.negate();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.acos();
        org.apache.commons.math.complex.Complex complex11 = complex0.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex14 = complex11.pow(complex13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-5991.431207677988d) + "'", double9 == (-5991.431207677988d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex0.pow(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex0.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        boolean boolean11 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex9.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        boolean boolean14 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.402371196203514d + "'", double18 == 4.402371196203514d);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex16.add(complex30);
        org.apache.commons.math.complex.Complex complex44 = complex16.sin();
        org.apache.commons.math.complex.Complex complex45 = complex16.asin();
        double double46 = complex16.getImaginary();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.570758233200585d + "'", double40 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex26.divide(complex34);
        boolean boolean38 = complex13.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex43.atan();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex13.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex6.add(complex47);
        java.lang.Class<?> wildcardClass49 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex9 };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer4.transform2(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer4.inversetransform2(complexArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray22, throwable23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray20, throwable23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable23);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Object[] objArray28 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException31);
        java.lang.String str35 = mathException34.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str35, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(14.142224011249972d, (-0.2511271623901931d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [14.142224011249972, -0.2511271623901931]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray11 = new org.apache.commons.math.complex.Complex[] { complex10 };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer5.transform2(complexArray11);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex19 };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer14.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex27 };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer22.transform2(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer14.inversetransform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer14.inversetransform(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform2(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex48 };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer43.transform2(complexArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer38.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer38.transform2(doubleArray56);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform2(doubleArray67);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 0.035834395863998524d);
        double[] doubleArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 3.342308207562617d);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, (-9240.89014825243d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform2(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform2(univariateRealFunction86, (double) 10L, 148.41652803783924d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.11976959540929016, 17.77538401913021]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9240.89014825243, -1371469.6998220207]");
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        double double54 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        boolean boolean57 = complex53.isNaN();
        double double58 = complex53.getImaginary();
        boolean boolean59 = complex53.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-0.9999999983177603d) + "'", double54 == (-0.9999999983177603d));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999983177603d) + "'", double58 == (-0.9999999983177603d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex18);
        boolean boolean21 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex14.log();
        org.apache.commons.math.complex.Complex complex23 = complex7.add(complex14);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex42 = complex7.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex7.sin();
        java.lang.Class<?> wildcardClass44 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.1715243988715174d + "'", double41 == 3.1715243988715174d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex21 };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer16.transform2(complexArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer8.inversetransform2(complexArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.transform2(univariateRealFunction26, (-9240.89014825243d), 1.570758233006406d, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.asin();
        org.apache.commons.math.complex.Complex complex29 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.asin();
        org.apache.commons.math.complex.Complex complex37 = complex34.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        org.apache.commons.math.complex.Complex complex42 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex16.add(complex30);
        org.apache.commons.math.complex.Complex complex44 = complex16.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex50.divide(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex58.log();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex66.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex58.pow(complex66);
        org.apache.commons.math.complex.Complex complex73 = complex66.tan();
        org.apache.commons.math.complex.Complex complex74 = complex44.pow(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.log();
        double double76 = complex75.getReal();
        org.apache.commons.math.complex.Complex complex77 = complex75.sinh();
        org.apache.commons.math.complex.Complex complex80 = new org.apache.commons.math.complex.Complex(6.525012184105979d, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex81 = complex75.multiply(complex80);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.570758233200585d + "'", double40 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.4430227241169225d + "'", double76 == 0.4430227241169225d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.asin();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        double double36 = complex35.abs();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex40.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        boolean boolean46 = complex19.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex7.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4698520192911105E-5d + "'", double8 == 2.4698520192911105E-5d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.035834395863998524d + "'", double36 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.asin();
        org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.asin();
        org.apache.commons.math.complex.Complex complex38 = complex35.atan();
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        double double41 = complex39.abs();
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex43 = complex31.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex16.multiply(complex42);
        double double45 = complex42.abs();
        org.apache.commons.math.complex.Complex complex46 = complex42.sqrt();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.570758233200585d + "'", double41 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.570758233200585d + "'", double45 == 1.570758233200585d);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex58 = complex57.exp();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex59 };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer54.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex67 };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer62.transform2(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer54.inversetransform(complexArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer10.transform2(complexArray72);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer10.transform2(univariateRealFunction76, (-0.9999999995794401d), (-2.3012033191608836d), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = complex17.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex10.pow(complex21);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex33.acos();
        org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex10.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex44.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.cos();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex58 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex59 = complex58.exp();
        org.apache.commons.math.complex.Complex complex60 = complex55.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex58.negate();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex58.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        double double68 = complex67.abs();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex72.acos();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex67.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.negate();
        boolean boolean78 = complex51.equals((java.lang.Object) complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex80 = complex79.exp();
        org.apache.commons.math.complex.Complex complex81 = complex79.sin();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt1z();
        org.apache.commons.math.complex.Complex complex83 = complex40.add(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex40.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9240.89014825243d) + "'", double12 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.035834395863998524d + "'", double68 == 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex7.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex3.acos();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex23 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex6.subtract(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex19.negate();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        double double28 = complex27.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 100, 2.566370623987466d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        double[] doubleArray51 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer13.transform(complexArray52);
        boolean boolean54 = complex12.equals((java.lang.Object) fastFourierTransformer13);
        boolean boolean55 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex56 = complex12.tan();
        org.apache.commons.math.complex.Complex complex57 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex2.divide(complex12);
        org.apache.commons.math.complex.Complex complex59 = complex2.sin();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = complex66.acos();
        org.apache.commons.math.complex.Complex complex68 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.apache.commons.math.complex.Complex complex74 = complex68.subtract(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex60.divide(complex72);
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex80 = complex79.sinh();
        org.apache.commons.math.complex.Complex complex81 = complex79.acos();
        org.apache.commons.math.complex.Complex complex82 = complex79.acos();
        org.apache.commons.math.complex.Complex complex83 = complex82.exp();
        boolean boolean84 = complex60.equals((java.lang.Object) complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.asin();
        org.apache.commons.math.complex.Complex complex86 = complex83.sinh();
        org.apache.commons.math.complex.Complex complex87 = complex59.add(complex83);
        org.apache.commons.math.complex.Complex complex88 = complex83.acos();
        org.apache.commons.math.complex.Complex complex89 = complex83.cosh();
        java.lang.Class<?> wildcardClass90 = complex89.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex9.pow(complex18);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex27.divide(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex26.subtract(complex39);
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex49.asin();
        org.apache.commons.math.complex.Complex complex52 = complex49.atan();
        org.apache.commons.math.complex.Complex complex53 = complex52.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.acos();
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        boolean boolean56 = complex45.equals((java.lang.Object) complex53);
        org.apache.commons.math.complex.Complex complex57 = complex19.multiply(complex45);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.asin();
        org.apache.commons.math.complex.Complex complex63 = complex57.multiply(complex62);
        boolean boolean64 = complex63.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        double[] doubleArray21 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer23.inversetransform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex45 };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer40.transform2(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer40.inversetransform2(complexArray55);
        double[] doubleArray61 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer40.transform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer23.transform(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform2(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex78 };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer73.transform2(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer65.inversetransform(complexArray82);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer84.transform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer65.inversetransform2(complexArray90);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform(complexArray91);
        org.apache.commons.math.complex.Complex[] complexArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray92, 0.8414709848078965d);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, (-11982.862390657456d));
        org.apache.commons.math.complex.Complex[] complexArray98 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, 0.035834395863998524d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray98);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex17 };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer12.transform2(complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex25 };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer20.transform2(complexArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer12.inversetransform2(complexArray27);
        double[] doubleArray33 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer12.transform2(doubleArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray34);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray34, throwable36);
        java.lang.String str38 = mathException37.getPattern();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.lang.String str40 = mathException37.getPattern();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray9, (java.lang.Throwable) mathException37);
        java.lang.String str42 = mathException41.getPattern();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException43);
        java.lang.String str45 = mathException43.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str42, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str45, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex32 = complex31.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex33 };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer28.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex41 };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer36.transform2(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer28.inversetransform2(complexArray43);
        double[] doubleArray49 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer28.transform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray50, throwable52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.Object[] objArray55 = mathException53.getArguments();
        mathException25.addSuppressed((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        java.lang.Throwable[] throwableArray58 = mathException53.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException53);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.asin();
        org.apache.commons.math.complex.Complex complex16 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = complex11.cos();
        org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        double double23 = complex22.abs();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex25 = complex22.atan();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.negate();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex35.asin();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z();
        boolean boolean39 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex38.sin();
        boolean boolean41 = complex29.equals((java.lang.Object) complex40);
        org.apache.commons.math.complex.Complex complex42 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 0L, (double) 100L);
        double double46 = complex45.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math.complex.Complex complex49 = complex42.subtract(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex42.sin();
        org.apache.commons.math.complex.Complex complex51 = complex25.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex17.divide(complex25);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 22026.465794806718d + "'", double23 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        double double54 = complex9.abs();
        org.apache.commons.math.complex.Complex complex55 = complex9.acos();
        org.apache.commons.math.complex.Complex complex56 = complex55.tan();
        double double57 = complex55.abs();
        double double58 = complex55.abs();
        org.apache.commons.math.complex.Complex complex59 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj63 = new java.lang.Object();
        boolean boolean64 = complex62.equals(obj63);
        org.apache.commons.math.complex.Complex complex65 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = complex65.sin();
        org.apache.commons.math.complex.Complex complex68 = complex59.multiply(complex65);
        org.apache.commons.math.complex.Complex complex69 = complex65.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 14.142135623730951d + "'", double54 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4.088616848873298d + "'", double57 == 4.088616848873298d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 4.088616848873298d + "'", double58 == 4.088616848873298d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.acos();
        org.apache.commons.math.complex.Complex complex12 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = complex18.equals(obj19);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex29.acos();
        org.apache.commons.math.complex.Complex complex33 = complex25.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.cos();
        org.apache.commons.math.complex.Complex complex35 = complex18.pow(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex15.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex(3.2027538945916267E-5d, 100.0d);
        org.apache.commons.math.complex.Complex complex42 = complex38.divide(complex41);
        boolean boolean43 = complex42.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex28 };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer23.transform2(complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform2(complexArray29);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.transform2(univariateRealFunction34, (-1.5731742829667947d), 148.41652803783924d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 100, 2.566370623987466d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex18 };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer13.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex26 };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer21.transform2(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer13.inversetransform2(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex35 };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer30.transform2(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer30.inversetransform2(complexArray45);
        double[] doubleArray51 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer30.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer13.transform(complexArray52);
        boolean boolean54 = complex12.equals((java.lang.Object) fastFourierTransformer13);
        boolean boolean55 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex56 = complex12.tan();
        org.apache.commons.math.complex.Complex complex57 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex2.divide(complex12);
        org.apache.commons.math.complex.Complex complex59 = complex2.sin();
        org.apache.commons.math.complex.Complex complex60 = complex59.tanh();
        org.apache.commons.math.complex.Complex complex61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex62 = complex59.pow(complex61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex3.subtract(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex6.negate();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer10.inversetransform2(complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        double[] doubleArray48 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.transform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer10.transform(complexArray49);
        boolean boolean51 = complex9.equals((java.lang.Object) fastFourierTransformer10);
        boolean boolean52 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex9.tan();
        org.apache.commons.math.complex.Complex complex54 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex54.sinh();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        java.lang.Object obj60 = new java.lang.Object();
        boolean boolean61 = complex59.equals(obj60);
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex70.acos();
        org.apache.commons.math.complex.Complex complex73 = complex70.acos();
        org.apache.commons.math.complex.Complex complex74 = complex66.divide(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.cos();
        org.apache.commons.math.complex.Complex complex76 = complex59.pow(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.asin();
        org.apache.commons.math.complex.Complex complex78 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex56.add(complex75);
        double double80 = complex56.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-142.35883754318695d), (-2.05309903558876d));
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.asin();
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex2.acos();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex15.divide(complex25);
        boolean boolean27 = complex15.isInfinite();
        double double28 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex15.acos();
        org.apache.commons.math.complex.Complex complex30 = complex2.multiply(complex15);
        org.apache.commons.math.complex.Complex complex31 = complex30.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.693147083113669d + "'", double28 == 10.693147083113669d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer5.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer5.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex32 };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer27.transform2(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex40 };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer35.transform2(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer27.inversetransform2(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer27.inversetransform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer5.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex56 };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer51.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex63 = complex62.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex64 };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer59.transform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer51.inversetransform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer51.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer51.transform2(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer5.transform2(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.transform2(doubleArray87);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray87, 0.035834395863998524d);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer5.transform(doubleArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform2(doubleArray91);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer0.transform2(univariateRealFunction94, 10.046827686460665d, (-10.0d), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.046827686460665, -10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.035834395863998524, 5.318295894708326]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex5 = complex4.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex6 };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer1.transform2(complexArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex14 };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer9.transform2(complexArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer1.inversetransform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer1.inversetransform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex34 };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer29.transform2(complexArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer24.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex43 };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer38.transform2(complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex51 };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer46.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer38.inversetransform2(complexArray53);
        double[] doubleArray59 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer38.transform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer38.inversetransform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer24.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer1.inversetransform(complexArray67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray68);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        double double18 = complex16.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex11.subtract(complex16);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex23.asin();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex27.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex16.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex27.exp();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math.complex.Complex complex41 = complex36.subtract(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex39.negate();
        org.apache.commons.math.complex.Complex complex43 = complex42.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.apache.commons.math.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math.complex.Complex complex59 = complex52.pow(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex50.subtract(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.tanh();
        org.apache.commons.math.complex.Complex complex62 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex59.cos();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex65 = complex45.divide(complex64);
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = complex32.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex5.subtract(complex64);
        org.apache.commons.math.complex.Complex complex70 = complex64.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9240.89014825243d) + "'", double18 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex5 };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer0.transform2(complexArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex13 };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer8.transform2(complexArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer0.inversetransform2(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex23 };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer18.transform2(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex31 };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer26.transform2(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer18.inversetransform2(complexArray33);
        double[] doubleArray39 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer18.transform2(doubleArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.inversetransform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex53 };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer48.transform2(complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer43.transform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer43.transform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex69 = complex68.exp();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex70 };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer65.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex77 = complex76.exp();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex78 };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer73.transform2(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer65.inversetransform2(complexArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer65.inversetransform(complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer43.transform2(complexArray87);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform(complexArray87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(univariateRealFunction91, (-2.5609709644692593d), 1.3754263876807227d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 100.0f);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.negate();
        org.apache.commons.math.complex.Complex complex13 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        boolean boolean18 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = complex20.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.sin();
        org.apache.commons.math.complex.Complex complex30 = complex27.acos();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex7 };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer2.transform2(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex15 };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer10.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer2.inversetransform2(complexArray17);
        double[] doubleArray23 = new double[] { (byte) -1, '4', (-1L), '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer2.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 1L, 148.4131591025766d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer2.inversetransform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex36 };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer31.transform2(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex44 };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer39.transform2(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, (double) (byte) 0);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer31.inversetransform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex55 };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer50.transform2(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex62 = complex61.exp();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex63 };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer58.transform2(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer50.inversetransform2(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer31.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer2.transform2(complexArray65);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException", (java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 148.4131591025766]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math.complex.Complex complex13 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        double double21 = complex19.getReal();
        org.apache.commons.math.complex.Complex complex22 = complex19.atan();
        double double23 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex14.add(complex24);
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        double double28 = complex27.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 22026.465794806718d + "'", double5 == 22026.465794806718d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9240.89014825243d) + "'", double21 == (-9240.89014825243d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-4.93970403857352E-5d) + "'", double23 == (-4.93970403857352E-5d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.25328374281112d + "'", double26 == 1.25328374281112d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.8492018891820645d) + "'", double28 == (-0.8492018891820645d));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]](DBBBD)Ljava/beans/PropertyDescriptor;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]]");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        propertyDescriptor23.setDisplayName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        propertyDescriptor23.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor23.setConstrained(true);
        propertyDescriptor23.setDisplayName("V");
        boolean boolean39 = propertyDescriptor23.isHidden();
        propertyDescriptor23.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        org.mockito.asm.Type type35 = classInfo18.getSuperType();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        org.mockito.asm.Type type37 = classInfo18.getType();
        org.mockito.asm.Type type38 = classInfo18.getType();
        int int39 = classInfo18.getModifiers();
        org.mockito.asm.Type type40 = classInfo18.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        propertyDescriptor3.setValue("", (java.lang.Object) "byte");
        propertyDescriptor3.setShortDescription("(DBBBD)V");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setShortDescription("()Lhi!byteBfloat;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str15, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor24.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor3.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        int int43 = type42.getSort();
        int int45 = type42.getOpcode(3);
        java.lang.String str46 = type42.getClassName();
        java.lang.String str47 = type42.getClassName();
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        boolean boolean50 = type42.equals((java.lang.Object) classArray48);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type58 = signature57.getReturnType();
        java.lang.Class<?> wildcardClass59 = signature57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("hi!", method64, method65);
        java.lang.String str67 = propertyDescriptor66.getShortDescription();
        java.lang.reflect.Method method68 = propertyDescriptor66.getWriteMethod();
        java.lang.String str69 = propertyDescriptor66.getDisplayName();
        boolean boolean70 = classInfo62.equals((java.lang.Object) str69);
        org.mockito.asm.Type type71 = classInfo62.getSuperType();
        org.mockito.asm.Type type72 = classInfo62.getType();
        org.mockito.asm.Type[] typeArray73 = classInfo62.getInterfaces();
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass40, classArray48, (java.lang.Object[]) classArray75);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "byte" + "'", str46, "byte");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "byte" + "'", str47, "byte");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNull(method68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.core.Signature", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor");
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]", method7, method8);
        java.lang.Object obj11 = propertyDescriptor9.getValue("ava.beans.PropertyDescriptor[name=hi!");
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "ava.beans.PropertyDescriptor[name=hi!");
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor" + "'", str13, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor" + "'", str14, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        propertyDescriptor5.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor5.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor5.setDisplayName("");
        java.lang.reflect.Method method15 = propertyDescriptor5.getWriteMethod();
        boolean boolean16 = propertyDescriptor5.isHidden();
        propertyDescriptor5.setShortDescription("va.lang.Object");
        boolean boolean19 = type1.equals((java.lang.Object) "va.lang.Object");
        org.mockito.asm.Type type20 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("hi!byteBfloat");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; hidden; propertyEditorClass=class org.mockito.cglib.core.Signature]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; preferred]Lorg/mockito/asm/Type;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        java.lang.String str21 = propertyDescriptor18.getShortDescription();
        propertyDescriptor18.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor18.setConstrained(false);
        propertyDescriptor18.setHidden(false);
        propertyDescriptor18.setExpert(true);
        boolean boolean31 = propertyDescriptor18.isPreferred();
        java.lang.String str32 = propertyDescriptor18.getDisplayName();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];]", (java.lang.Object) propertyDescriptor18);
        propertyDescriptor18.setDisplayName("L()B;");
        propertyDescriptor18.setShortDescription("java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor18.setHidden(true);
        propertyDescriptor18.setShortDescription("java.beans.PropertyDescriptor[name=hi!; bound]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("C(DBBBD)Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setHidden(false);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor14.setExpert(false);
        propertyDescriptor14.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor14.setConstrained(true);
        java.lang.String str27 = propertyDescriptor14.getName();
        java.util.Enumeration<java.lang.String> strEnumeration28 = propertyDescriptor14.attributeNames();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("java.lang.Object");
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.String str35 = propertyDescriptor34.getShortDescription();
        java.lang.reflect.Method method36 = propertyDescriptor34.getWriteMethod();
        propertyDescriptor34.setValue("double", (java.lang.Object) ' ');
        boolean boolean40 = propertyDescriptor34.isExpert();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        java.lang.Class<?> wildcardClass46 = propertyDescriptor45.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        propertyDescriptor34.setValue("float", (java.lang.Object) wildcardClass46);
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        int int50 = classInfo49.getModifiers();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        java.lang.String str55 = propertyDescriptor54.getShortDescription();
        java.lang.reflect.Method method56 = propertyDescriptor54.getWriteMethod();
        propertyDescriptor54.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean60 = classInfo49.equals((java.lang.Object) propertyDescriptor54);
        int int61 = classInfo49.getModifiers();
        org.mockito.asm.Type[] typeArray62 = classInfo49.getInterfaces();
        org.mockito.asm.Type type63 = classInfo49.getType();
        java.lang.String str64 = type63.toString();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("hi!", method66, method67);
        java.lang.Class<?> wildcardClass69 = propertyDescriptor68.getClass();
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type73 = classInfo72.getType();
        org.mockito.asm.Type type74 = classInfo72.getType();
        org.mockito.asm.Type[] typeArray75 = classInfo72.getInterfaces();
        org.mockito.asm.Type[] typeArray76 = classInfo72.getInterfaces();
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray76);
        java.beans.PropertyEditor propertyEditor80 = propertyDescriptor14.createPropertyEditor((java.lang.Object) typeArray76);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans.PropertyDescriptor[name=(DBBBD)B]", (java.lang.Object) propertyDescriptor14);
        java.lang.reflect.Method method82 = null;
        propertyDescriptor14.setReadMethod(method82);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java/beans/PropertyDescriptor" + "'", str47, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(method56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str64, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java/beans/PropertyDescriptor" + "'", str70, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str71, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str77, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "()Ljava.lang.Object;" + "'", str78, "()Ljava.lang.Object;");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNull(propertyEditor80);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        java.lang.String str21 = propertyDescriptor18.getShortDescription();
        boolean boolean22 = propertyDescriptor18.isPreferred();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type27 = signature26.getReturnType();
        java.lang.String str28 = signature26.getName();
        org.mockito.asm.Type type29 = signature26.getReturnType();
        propertyDescriptor18.setValue("B", (java.lang.Object) type29);
        propertyDescriptor18.setShortDescription("byte");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        java.lang.String str42 = classInfo41.toString();
        org.mockito.asm.Type type43 = classInfo41.getSuperType();
        boolean boolean44 = classInfo35.equals((java.lang.Object) classInfo41);
        org.mockito.asm.Type type45 = classInfo41.getType();
        org.mockito.asm.Type type46 = classInfo41.getSuperType();
        propertyDescriptor3.setValue("LLorg.mockito.cglib.core.Signature;;", (java.lang.Object) classInfo41);
        java.lang.String str48 = classInfo41.toString();
        java.lang.String str49 = classInfo41.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.beans.PropertyDescriptor" + "'", str42, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.beans.PropertyDescriptor" + "'", str48, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.beans.PropertyDescriptor" + "'", str49, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        boolean boolean14 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEnumeration17);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass16 = signature14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = classInfo18.getSuperType();
        java.lang.String str20 = type19.getInternalName();
        java.lang.String str21 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        int int41 = type38.getOpcode(3);
        java.lang.String str42 = type38.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type36, type38, type43, type45, type47 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str55 = type54.getDescriptor();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type35, type51, type54, type56, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        int int67 = type64.getOpcode(3);
        java.lang.String str68 = type64.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BYTE_TYPE;
        int int70 = type69.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type62, type64, type69, type71, type73 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray75);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type27, typeArray75);
        org.mockito.cglib.core.Signature signature80 = new org.mockito.cglib.core.Signature("hi!", type23, typeArray75);
        org.mockito.cglib.core.Signature signature81 = new org.mockito.cglib.core.Signature("F", type19, typeArray75);
        java.beans.PropertyEditor propertyEditor82 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature81);
        org.mockito.asm.Type type83 = signature81.getReturnType();
        java.lang.String str84 = type83.getDescriptor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/lang/Object" + "'", str20, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Object" + "'", str21, "java.lang.Object");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "double" + "'", str37, "double");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "byte" + "'", str42, "byte");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "double" + "'", str48, "double");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)V" + "'", str50, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lhi!;" + "'", str55, "Lhi!;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(VBLhi!;SD)B" + "'", str60, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "byte" + "'", str68, "byte");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "double" + "'", str74, "double");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(DBBBD)V" + "'", str76, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(DBBBD)B" + "'", str77, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(DBBBD)Lhi!;" + "'", str78, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNull(propertyEditor82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Ljava/lang/Object;" + "'", str84, "Ljava/lang/Object;");
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setHidden(true);
        java.lang.String str24 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        java.lang.String str15 = signature11.getDescriptor();
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        boolean boolean23 = signature11.equals((java.lang.Object) strArray22);
        java.lang.String str24 = signature11.getDescriptor();
        org.mockito.asm.Type type25 = signature11.getReturnType();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        int int32 = type29.getOpcode(3);
        java.lang.String str33 = type29.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        int int35 = type34.getSort();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type27, type29, type34, type36, type38 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray40);
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type25, typeArray40);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray40);
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("java.lang.Object", type1, typeArray40);
        java.lang.String str45 = signature44.getName();
        org.mockito.asm.Type type46 = signature44.getReturnType();
        java.lang.String str47 = signature44.toString();
        org.mockito.asm.Type[] typeArray48 = signature44.getArgumentTypes();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B" + "'", str15, "B");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "double" + "'", str28, "double");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "byte" + "'", str33, "byte");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(DBBBD)V" + "'", str41, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str43, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.lang.Object" + "'", str45, "java.lang.Object");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.lang.Object(DBBBD)C" + "'", str47, "java.lang.Object(DBBBD)C");
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        java.lang.String str54 = propertyDescriptor53.getShortDescription();
        java.lang.reflect.Method method55 = propertyDescriptor53.getWriteMethod();
        propertyDescriptor53.setValue("double", (java.lang.Object) ' ');
        boolean boolean59 = propertyDescriptor53.isExpert();
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("hi!", method62, method63);
        java.lang.Class<?> wildcardClass65 = propertyDescriptor64.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        propertyDescriptor53.setValue("float", (java.lang.Object) wildcardClass65);
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass65);
        int int69 = classInfo68.getModifiers();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        java.lang.String str74 = propertyDescriptor73.getShortDescription();
        java.lang.reflect.Method method75 = propertyDescriptor73.getWriteMethod();
        propertyDescriptor73.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean79 = classInfo68.equals((java.lang.Object) propertyDescriptor73);
        int int80 = classInfo68.getModifiers();
        org.mockito.asm.Type[] typeArray81 = classInfo68.getInterfaces();
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray81);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("Lhi!;float", type2, typeArray81);
        int int84 = type2.getSize();
        org.mockito.asm.Type type85 = type2.getElementType();
        java.lang.String str86 = type2.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNull(method55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java/beans/PropertyDescriptor" + "'", str66, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNull(method75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "()B" + "'", str82, "()B");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str86, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.Class<?> wildcardClass13 = signature11.getClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.Class<?> wildcardClass23 = signature21.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass23 };
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray28);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method31 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "L()B;", classArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: L()B;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java/beans/PropertyDescriptor" + "'", str6, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean14 = type5.equals((java.lang.Object) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type17 = classInfo16.getType();
        org.mockito.asm.Type type18 = classInfo16.getType();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.util.List list25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list26 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass18, list25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str23, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("Ljava/beans/FeatureDescriptor;", method2, method3);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.Class<?> wildcardClass10 = signature8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        propertyDescriptor4.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) classInfo13);
        org.mockito.asm.Type type16 = classInfo13.getType();
        org.mockito.asm.Type type17 = classInfo13.getType();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type21 = signature20.getReturnType();
        java.lang.Class<?> wildcardClass22 = signature20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type26 = classInfo25.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo25.getInterfaces();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type17, typeArray27);
        int int30 = type17.getOpcode(24);
        int int31 = type17.getSort();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 28 + "'", int30 == 28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        int int2 = type1.getSort();
        boolean boolean4 = type1.equals((java.lang.Object) "Lhi!;float");
        java.lang.String str5 = type1.getDescriptor();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        int int7 = type6.getSort();
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean12 = type1.equals((java.lang.Object) wildcardClass8);
        java.lang.Class<?> wildcardClass13 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];" + "'", str5, "Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}; constrained]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byte", "B");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        org.mockito.asm.Type type7 = signature2.getReturnType();
        java.lang.String str8 = signature2.toString();
        org.mockito.asm.Type type9 = signature2.getReturnType();
        java.lang.String str10 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byteB" + "'", str3, "byteB");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "byteB" + "'", str8, "byteB");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byteB" + "'", str10, "byteB");
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(classInfo24);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean10 = classInfo7.equals((java.lang.Object) type9);
        java.lang.String str11 = classInfo7.toString();
        org.mockito.asm.Type type12 = classInfo7.getType();
        int int13 = type12.getSort();
        int int15 = type12.getOpcode((int) ' ');
        int int16 = type12.getDimensions();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str11, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36 + "'", int15 == 36);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("Lva/beans/PropertyDescriptor;");
        java.lang.String str21 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lva/beans/PropertyDescriptor;" + "'", str21, "Lva/beans/PropertyDescriptor;");
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        int int4 = type2.getOpcode(0);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        int int7 = type6.getSort();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        propertyDescriptor11.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor11.setReadMethod(method18);
        java.lang.Object obj21 = propertyDescriptor11.getValue("java/beans/PropertyDescriptor");
        boolean boolean22 = type6.equals((java.lang.Object) "java/beans/PropertyDescriptor");
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type type35 = signature32.getReturnType();
        java.lang.String str36 = signature32.getDescriptor();
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray37);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        boolean boolean44 = signature32.equals((java.lang.Object) strArray43);
        java.lang.String str45 = signature32.getDescriptor();
        org.mockito.asm.Type type46 = signature32.getReturnType();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        int int53 = type50.getOpcode(3);
        java.lang.String str54 = type50.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        int int58 = type57.getSort();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type48, type50, type55, type57, type59 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray61);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type46, typeArray61);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray61);
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", type6, typeArray61);
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("V", type2, typeArray61);
        int int67 = type2.getDimensions();
        int int69 = type2.getOpcode((int) (byte) -1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "B" + "'", str36, "B");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "B" + "'", str45, "B");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "double" + "'", str49, "double");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "byte" + "'", str54, "byte");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "double" + "'", str60, "double");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(DBBBD)V" + "'", str62, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str64, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(true);
        java.lang.Object obj9 = propertyDescriptor3.getValue("Lhi!;");
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = classInfo6.getType();
        int int9 = type7.getOpcode(5);
        int int10 = type7.getDimensions();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setValue("double", (java.lang.Object) ' ');
        boolean boolean20 = propertyDescriptor14.isExpert();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        propertyDescriptor14.setValue("float", (java.lang.Object) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        java.lang.Object obj30 = null;
        boolean boolean31 = classInfo29.equals(obj30);
        java.lang.String str32 = classInfo29.toString();
        org.mockito.asm.Type[] typeArray33 = classInfo29.getInterfaces();
        java.lang.String str34 = classInfo29.toString();
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str38 = signature37.getName();
        java.lang.String str39 = signature37.toString();
        org.mockito.asm.Type type40 = signature37.getReturnType();
        boolean boolean41 = classInfo29.equals((java.lang.Object) signature37);
        boolean boolean42 = type7.equals((java.lang.Object) signature37);
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(DBBBD)Lg/mockito/cglib/core/Signature;");
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=byteB]", type7, typeArray44);
        java.lang.String str46 = signature45.getName();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor" + "'", str32, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.beans.PropertyDescriptor" + "'", str34, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!B" + "'", str39, "hi!B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.beans.PropertyDescriptor[name=byteB]" + "'", str46, "java.beans.PropertyDescriptor[name=byteB]");
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = classInfo6.getType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("Lorg/mockito/cglib/core/Signature;");
        java.lang.String str11 = type10.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        int int23 = type22.getSort();
        int int25 = type22.getOpcode(3);
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSort();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type20, type22, type27, type29, type31 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        int int36 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str39 = type38.getDescriptor();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type19, type35, type38, type40, type41 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        int int51 = type48.getOpcode(3);
        java.lang.String str52 = type48.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type46, type48, type53, type55, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray59);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type10, typeArray59);
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("double", type7, typeArray59);
        org.mockito.asm.Type type65 = signature64.getReturnType();
        java.lang.String str66 = type65.getInternalName();
        java.lang.String str67 = type65.toString();
        java.lang.String str68 = type65.getInternalName();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str11, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lhi!;" + "'", str14, "Lhi!;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "byte" + "'", str26, "byte");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(DBBBD)V" + "'", str34, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lhi!;" + "'", str39, "Lhi!;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "double" + "'", str42, "double");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(VBLhi!;SD)B" + "'", str44, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "byte" + "'", str52, "byte");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)V" + "'", str60, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)B" + "'", str61, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(DBBBD)Lhi!;" + "'", str62, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java/beans/PropertyDescriptor" + "'", str66, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str67, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java/beans/PropertyDescriptor" + "'", str68, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("java/beans/PropertyDescriptor");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = type9.getElementType();
        java.lang.String str11 = type10.getDescriptor();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSort();
        java.lang.String str15 = type12.getClassName();
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.Class<?> wildcardClass20 = signature18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getShortDescription();
        java.lang.reflect.Method method29 = propertyDescriptor27.getWriteMethod();
        java.lang.String str30 = propertyDescriptor27.getDisplayName();
        boolean boolean31 = classInfo23.equals((java.lang.Object) str30);
        org.mockito.asm.Type[] typeArray32 = classInfo23.getInterfaces();
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray32);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray32);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lva/beans/PropertyDescriptor;" + "'", str11, "Lva/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()F" + "'", str33, "()F");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "()Lva/beans/PropertyDescriptor;" + "'", str35, "()Lva/beans/PropertyDescriptor;");
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(DBBBD)Ljava/lang/Object;");
        int int4 = type2.getOpcode((int) (short) 10);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        int int8 = type6.getOpcode(3);
        int int9 = type6.getSize();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type32 = signature31.getReturnType();
        java.lang.String str33 = signature31.getName();
        org.mockito.asm.Type type34 = signature31.getReturnType();
        boolean boolean35 = classInfo28.equals((java.lang.Object) type34);
        java.lang.String str36 = classInfo28.toString();
        org.mockito.asm.Type type37 = classInfo28.getSuperType();
        org.mockito.asm.Type[] typeArray38 = classInfo28.getInterfaces();
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type6, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray38);
        java.lang.String str41 = type2.getInternalName();
        int int42 = type2.getSize();
        int int43 = type2.getDimensions();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.String str48 = propertyDescriptor47.getShortDescription();
        java.lang.reflect.Method method49 = propertyDescriptor47.getWriteMethod();
        propertyDescriptor47.setValue("double", (java.lang.Object) ' ');
        boolean boolean53 = propertyDescriptor47.isExpert();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        java.lang.Class<?> wildcardClass59 = propertyDescriptor58.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass59);
        propertyDescriptor47.setValue("float", (java.lang.Object) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        int int63 = classInfo62.getModifiers();
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("hi!", method65, method66);
        java.lang.String str68 = propertyDescriptor67.getShortDescription();
        java.lang.reflect.Method method69 = propertyDescriptor67.getWriteMethod();
        propertyDescriptor67.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean73 = classInfo62.equals((java.lang.Object) propertyDescriptor67);
        int int74 = classInfo62.getModifiers();
        org.mockito.asm.Type type75 = classInfo62.getSuperType();
        int int76 = classInfo62.getModifiers();
        org.mockito.asm.Type[] typeArray77 = classInfo62.getInterfaces();
        org.mockito.asm.Type type78 = classInfo62.getSuperType();
        org.mockito.asm.Type[] typeArray79 = classInfo62.getInterfaces();
        java.lang.Class[] classArray80 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray79);
        org.mockito.cglib.core.Signature signature81 = new org.mockito.cglib.core.Signature("Ljava.beans.PropertyDescriptor[name=hi!;", type2, typeArray79);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.beans.PropertyDescriptor" + "'", str36, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "()Ljava/lang/Object;" + "'", str40, "()Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/lang/Object" + "'", str41, "java/lang/Object");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java/beans/PropertyDescriptor" + "'", str60, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNull(method69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(classArray80);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ljava/lang/Object;()Lorg/mockito/cglib/core/Signature;");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        int int14 = type13.getSort();
        int int16 = type13.getOpcode(3);
        java.lang.String str17 = type13.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSort();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type11, type13, type18, type20, type22 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type10, type26, type29, type31, type32 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        int int40 = type39.getSort();
        int int42 = type39.getOpcode(3);
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        int int45 = type44.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type37, type39, type44, type46, type48 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray50);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray50);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type2, typeArray50);
        org.mockito.asm.Type[] typeArray55 = signature54.getArgumentTypes();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lhi!;" + "'", str5, "Lhi!;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "byte" + "'", str17, "byte");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "double" + "'", str23, "double");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(DBBBD)V" + "'", str25, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "double" + "'", str33, "double");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(VBLhi!;SD)B" + "'", str35, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "double" + "'", str38, "double");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "byte" + "'", str43, "byte");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "double" + "'", str49, "double");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(DBBBD)V" + "'", str51, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)B" + "'", str52, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)Lhi!;" + "'", str53, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(typeArray55);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        java.lang.Class<?> wildcardClass31 = classInfo18.getClass();
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type36 = signature35.getReturnType();
        java.lang.Class<?> wildcardClass37 = signature35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method44 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass31, "java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]", classArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lva.beans.PropertyDescriptor[name=hi!;", "java.lang.Object");
        java.lang.Class<?> wildcardClass3 = signature2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.beans.PropertyDescriptor" + "'", str2, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        java.lang.String str12 = propertyDescriptor9.getShortDescription();
        propertyDescriptor9.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor9.setExpert(false);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getShortDescription();
        java.lang.reflect.Method method23 = propertyDescriptor21.getWriteMethod();
        propertyDescriptor21.setBound(false);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor9.createPropertyEditor((java.lang.Object) propertyDescriptor21);
        propertyDescriptor9.setShortDescription("hi!");
        boolean boolean29 = signature2.equals((java.lang.Object) "hi!");
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.String str34 = propertyDescriptor33.getShortDescription();
        java.lang.reflect.Method method35 = propertyDescriptor33.getWriteMethod();
        java.lang.String str36 = propertyDescriptor33.getShortDescription();
        propertyDescriptor33.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor33.setShortDescription("float");
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor33.createPropertyEditor((java.lang.Object) classArray42);
        propertyDescriptor33.setConstrained(true);
        boolean boolean49 = propertyDescriptor33.isHidden();
        java.lang.reflect.Method method50 = propertyDescriptor33.getReadMethod();
        java.lang.String str51 = propertyDescriptor33.getName();
        java.lang.reflect.Method method52 = propertyDescriptor33.getWriteMethod();
        propertyDescriptor33.setPreferred(true);
        boolean boolean55 = signature2.equals((java.lang.Object) propertyDescriptor33);
        propertyDescriptor33.setShortDescription("(DBBBD)Lg/mockito/cglib/core/Signature;");
        java.lang.String str58 = propertyDescriptor33.getDisplayName();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        java.lang.Class<?> wildcardClass63 = propertyDescriptor62.getClass();
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass63);
        boolean boolean69 = propertyDescriptor33.equals((java.lang.Object) wildcardClass63);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(method50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(method52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java/beans/PropertyDescriptor" + "'", str64, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}; propertyEditorClass=class org.mockito.cglib.core.Signature]", "Ljava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("LDBBBD)Lvoid;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]", "Ljava/lang/Object;()Lorg/mockito/cglib/core/Signature;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        java.lang.Class<?> wildcardClass8 = signature6.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass3, wildcardClass8 };
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type17 = signature16.getReturnType();
        java.lang.String str18 = signature16.getName();
        org.mockito.asm.Type type19 = signature16.getReturnType();
        java.lang.String str20 = signature16.getDescriptor();
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        boolean boolean28 = signature16.equals((java.lang.Object) strArray27);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type32 = signature31.getReturnType();
        java.lang.Class<?> wildcardClass33 = signature31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, false);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        java.lang.Class<?> wildcardClass42 = type40.getClass();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type46 = signature45.getReturnType();
        java.lang.Class<?> wildcardClass47 = signature45.getClass();
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass42, wildcardClass47 };
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        java.lang.reflect.Method[] methodArray51 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray51);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray51);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor57.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, false);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str9, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "B" + "'", str20, "B");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str48, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("byteB", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("()Ljava.lang.Object;");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str13, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(true);
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        propertyDescriptor3.setShortDescription("(DBBBD)V");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        boolean boolean20 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str8, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str10, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str11, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.String str7 = signature2.toString();
        org.mockito.asm.Type type8 = signature2.getReturnType();
        org.mockito.asm.Type type9 = signature2.getReturnType();
        java.lang.String str10 = signature2.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!B" + "'", str7, "hi!B");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!B" + "'", str10, "hi!B");
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str8, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str3 = type2.getDescriptor();
        int int5 = type2.getOpcode((int) (short) 0);
        int int6 = type2.getSize();
        int int7 = type2.getDimensions();
        int int9 = type2.getOpcode((-1));
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor13.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type18 = classInfo17.getType();
        org.mockito.asm.Type type19 = classInfo17.getType();
        org.mockito.asm.Type[] typeArray20 = classInfo17.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type2, typeArray20);
        java.lang.String str22 = signature21.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str16, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Ljava/lang/Object;()Lhi!;" + "'", str22, "Ljava/lang/Object;()Lhi!;");
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(false);
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor14.attributeNames();
        java.lang.reflect.Method method22 = null;
        propertyDescriptor14.setReadMethod(method22);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor14.setReadMethod(method24);
        java.lang.reflect.Method method26 = null;
        propertyDescriptor14.setReadMethod(method26);
        propertyDescriptor14.setConstrained(false);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=g.mockito.cglib.core.Signature]", (java.lang.Object) false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration21);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setBound(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor14.createPropertyEditor((java.lang.Object) str38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        propertyDescriptor43.setValue("double", (java.lang.Object) ' ');
        boolean boolean49 = propertyDescriptor43.isExpert();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        java.lang.Class<?> wildcardClass55 = propertyDescriptor54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        propertyDescriptor43.setValue("float", (java.lang.Object) wildcardClass55);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor43.getPropertyEditorClass();
        java.lang.reflect.Method method59 = propertyDescriptor43.getReadMethod();
        java.lang.reflect.Method method60 = propertyDescriptor43.getWriteMethod();
        boolean boolean61 = propertyDescriptor43.isHidden();
        java.beans.PropertyEditor propertyEditor62 = propertyDescriptor14.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        java.beans.PropertyEditor propertyEditor63 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        boolean boolean64 = propertyDescriptor3.isExpert();
        java.lang.Object obj66 = propertyDescriptor3.getValue("()LC;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java/beans/PropertyDescriptor" + "'", str38, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(propertyEditor62);
        org.junit.Assert.assertNull(propertyEditor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        boolean boolean24 = propertyDescriptor3.isHidden();
        java.lang.String str25 = propertyDescriptor3.getShortDescription();
        boolean boolean26 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("doublejava/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setName("java/beans/PropertyDescriptor");
        propertyDescriptor12.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=V]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = classInfo20.getType();
        org.mockito.asm.Type type22 = classInfo20.getSuperType();
        int int23 = classInfo20.getModifiers();
        java.lang.String str24 = classInfo20.toString();
        org.mockito.asm.Type type25 = classInfo20.getType();
        int int26 = classInfo20.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=B]double");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        java.lang.String str23 = classInfo19.toString();
        org.mockito.asm.Type type24 = classInfo19.getSuperType();
        java.lang.String str25 = type24.getDescriptor();
        java.lang.String str26 = type24.getClassName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str25, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.FeatureDescriptor" + "'", str26, "java.beans.FeatureDescriptor");
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("va.lang.Object");
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setWriteMethod(method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "va.lang.Object" + "'", str19, "va.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("byteB");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setConstrained(true);
        boolean boolean16 = propertyDescriptor3.isHidden();
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj20 = propertyDescriptor3.getValue("Ljava/lang/Object;");
        boolean boolean21 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        java.lang.reflect.Method method26 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method27 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(method27);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=()Lhi!;; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray62);
        java.lang.Class<?> wildcardClass64 = strArray53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list67 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass64, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!B" + "'", str3, "hi!B");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!B" + "'", str5, "hi!B");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("(DBBBD)Lg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getShortDescription();
        java.lang.reflect.Method method23 = propertyDescriptor21.getWriteMethod();
        java.lang.String str24 = propertyDescriptor21.getShortDescription();
        boolean boolean25 = propertyDescriptor21.isPreferred();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.String str31 = signature29.getName();
        org.mockito.asm.Type type32 = signature29.getReturnType();
        propertyDescriptor21.setValue("B", (java.lang.Object) type32);
        propertyDescriptor21.setShortDescription("byte");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = classInfo38.getType();
        org.mockito.asm.Type type40 = classInfo38.getSuperType();
        int int41 = classInfo38.getModifiers();
        java.lang.String str42 = classInfo38.toString();
        org.mockito.asm.Type type43 = classInfo38.getType();
        org.mockito.asm.Type[] typeArray44 = classInfo38.getInterfaces();
        propertyDescriptor3.setValue("Lorg.mockito.cglib.core.Signature", (java.lang.Object) typeArray44);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.beans.PropertyDescriptor" + "'", str42, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()Ljava/beans/PropertyDescriptor;", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Ljava/beans/PropertyDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        int int5 = type4.getSort();
        int int7 = type4.getOpcode(3);
        java.lang.String str8 = type4.getClassName();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        boolean boolean14 = type4.equals((java.lang.Object) signature11);
        java.lang.String str15 = type4.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        int int29 = type26.getOpcode(3);
        java.lang.String str30 = type26.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        int int32 = type31.getSort();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type24, type26, type31, type33, type35 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        int int40 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str43 = type42.getDescriptor();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type23, type39, type42, type44, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray47);
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type18, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray47);
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type1, typeArray47);
        java.lang.String str52 = signature51.getDescriptor();
        org.mockito.asm.Type[] typeArray53 = signature51.getArgumentTypes();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byte" + "'", str3, "byte");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "byte" + "'", str8, "byte");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "byte" + "'", str15, "byte");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "double" + "'", str25, "double");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "byte" + "'", str30, "byte");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "double" + "'", str36, "double");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(DBBBD)V" + "'", str38, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lhi!;" + "'", str43, "Lhi!;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(VBLhi!;SD)B" + "'", str48, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(VBLhi!;SD)B" + "'", str50, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(VBLhi!;SD)B" + "'", str52, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method23 = null;
        propertyDescriptor3.setReadMethod(method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setReadMethod(method25);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor3.setWriteMethod(method27);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj25 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]");
        java.lang.reflect.Method method26 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(method26);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setName("org.mockito.cglib.core.Signature");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; values={byte=0}]; values={B=B}]");
        int int15 = type14.getSort();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}; bound]", (java.lang.Object) int15);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=B]", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; preferred; constrained]", (java.lang.Object) classArray14);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setReadMethod(method17);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray15);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("Ljava/lang/Object;");
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getDisplayName();
        boolean boolean16 = propertyDescriptor14.isHidden();
        propertyDescriptor14.setHidden(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor23.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor14.setValue("byte", (java.lang.Object) propertyDescriptor23);
        propertyDescriptor3.setValue("()Lhi!;", (java.lang.Object) propertyDescriptor14);
        propertyDescriptor3.setShortDescription("org/mockito/asm/Type");
        java.lang.String str35 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=org/mockito/asm/Type; expert; values={()Lhi!;=java.beans.PropertyDescriptor[name=hi!; values={byte=java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={double= }]}]}]" + "'", str35, "java.beans.PropertyDescriptor[name=hi!; shortDescription=org/mockito/asm/Type; expert; values={()Lhi!;=java.beans.PropertyDescriptor[name=hi!; values={byte=java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={double= }]}]}]");
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("g/mockito/cglib/core/Signature", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("hi!LLorg/mockito/cglib/core/Signature;;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getDisplayName();
        propertyDescriptor6.setShortDescription("D");
        java.lang.String str10 = propertyDescriptor6.getShortDescription();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        int int13 = type12.getSort();
        int int15 = type12.getOpcode(3);
        java.lang.String str16 = type12.toString();
        boolean boolean18 = type12.equals((java.lang.Object) 8);
        propertyDescriptor6.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) 8);
        propertyDescriptor6.setName("org.mockito.cglib.core.Signature");
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type28 = signature27.getReturnType();
        java.lang.Class<?> wildcardClass29 = signature27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        boolean boolean33 = signature24.equals((java.lang.Object) wildcardClass29);
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor6.createPropertyEditor((java.lang.Object) signature24);
        boolean boolean35 = propertyDescriptor6.isExpert();
        boolean boolean36 = propertyDescriptor6.isHidden();
        boolean boolean37 = type2.equals((java.lang.Object) boolean36);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "D" + "'", str10, "D");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(propertyEditor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method24 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(method24);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(DBBBD)LbyteB;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.Object obj19 = null;
        boolean boolean20 = classInfo18.equals(obj19);
        org.mockito.asm.Type[] typeArray21 = classInfo18.getInterfaces();
        org.mockito.asm.Type type22 = classInfo18.getSuperType();
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        int int26 = type22.getOpcode(72);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 76 + "'", int26 == 76);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str8 = type7.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        java.lang.reflect.Method method21 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strEnumeration23);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=byteB; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setHidden(false);
        java.lang.reflect.Method method24 = propertyDescriptor12.getReadMethod();
        java.lang.reflect.Method method25 = propertyDescriptor12.getWriteMethod();
        boolean boolean26 = propertyDescriptor12.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        java.lang.Class<?> wildcardClass20 = type18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, true);
        propertyDescriptor3.setValue("LbyteB;", (java.lang.Object) propertyDescriptorArray22);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, false);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        int int22 = classInfo19.getModifiers();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        org.mockito.asm.Type type24 = classInfo19.getType();
        java.lang.String str25 = classInfo19.toString();
        java.lang.String str26 = classInfo19.toString();
        int int27 = classInfo19.getModifiers();
        org.mockito.asm.Type type28 = classInfo19.getSuperType();
        java.lang.String str29 = type28.toString();
        java.lang.String str30 = type28.getDescriptor();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type37 = signature36.getReturnType();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        int int44 = type41.getOpcode(3);
        java.lang.String str45 = type41.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type39, type41, type46, type48, type50 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        int int55 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str58 = type57.getDescriptor();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type38, type54, type57, type59, type60 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray62);
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type33, typeArray62);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray62);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.PropertyDescriptor" + "'", str25, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str29, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str30, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "double" + "'", str40, "double");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "byte" + "'", str45, "byte");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "double" + "'", str51, "double");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)V" + "'", str53, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lhi!;" + "'", str58, "Lhi!;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "double" + "'", str61, "double");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(VBLhi!;SD)B" + "'", str63, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(VBLhi!;SD)Ljava/beans/FeatureDescriptor;" + "'", str65, "(VBLhi!;SD)Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!B");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!B;" + "'", str2, "Lhi!B;");
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}]");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        propertyDescriptor5.setValue("double", (java.lang.Object) ' ');
        boolean boolean11 = propertyDescriptor5.isExpert();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        propertyDescriptor5.setValue("float", (java.lang.Object) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        int int22 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str25 = type24.getDescriptor();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSize();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str50 = type49.getDescriptor();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type30, type46, type49, type51, type52 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        int int62 = type59.getOpcode(3);
        java.lang.String str63 = type59.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type57, type59, type64, type66, type68 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray70);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray70);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray70);
        java.lang.Class[] classArray76 = new java.lang.Class[] {};
        int int77 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        int int79 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        int int80 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        int int81 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        boolean boolean82 = type1.equals((java.lang.Object) classArray76);
        int int83 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lhi!;" + "'", str25, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lhi!;" + "'", str50, "Lhi!;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "double" + "'", str53, "double");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(VBLhi!;SD)B" + "'", str55, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "byte" + "'", str63, "byte");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "double" + "'", str69, "double");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(DBBBD)V" + "'", str71, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(DBBBD)B" + "'", str72, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)Lhi!;" + "'", str73, "(DBBBD)Lhi!;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str74, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(DBBBD)Ljava.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}];" + "'", str75, "(DBBBD)Ljava.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}];");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        boolean boolean14 = signature2.equals((java.lang.Object) strArray13);
        java.lang.String str15 = signature2.getDescriptor();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method26 = null;
        propertyDescriptor19.setReadMethod(method26);
        propertyDescriptor19.setDisplayName("");
        boolean boolean30 = signature2.equals((java.lang.Object) "");
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.String str35 = propertyDescriptor34.getShortDescription();
        java.lang.reflect.Method method36 = propertyDescriptor34.getWriteMethod();
        java.lang.String str37 = propertyDescriptor34.getShortDescription();
        boolean boolean38 = propertyDescriptor34.isPreferred();
        boolean boolean39 = propertyDescriptor34.isExpert();
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type43 = signature42.getReturnType();
        java.lang.Class<?> wildcardClass44 = signature42.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        java.lang.Class<?> wildcardClass49 = propertyDescriptor48.getClass();
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type53 = signature52.getReturnType();
        java.lang.Class<?> wildcardClass54 = signature52.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass44, wildcardClass49, wildcardClass54 };
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray55);
        java.beans.PropertyEditor propertyEditor57 = propertyDescriptor34.createPropertyEditor((java.lang.Object) classArray55);
        boolean boolean58 = signature2.equals((java.lang.Object) classArray55);
        org.mockito.asm.Type type59 = signature2.getReturnType();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        java.lang.String str64 = propertyDescriptor63.getShortDescription();
        java.lang.reflect.Method method65 = propertyDescriptor63.getWriteMethod();
        java.lang.String str66 = propertyDescriptor63.getShortDescription();
        boolean boolean67 = propertyDescriptor63.isPreferred();
        boolean boolean68 = propertyDescriptor63.isExpert();
        java.lang.Object obj70 = propertyDescriptor63.getValue("()B");
        java.util.Enumeration<java.lang.String> strEnumeration71 = propertyDescriptor63.attributeNames();
        boolean boolean72 = signature2.equals((java.lang.Object) propertyDescriptor63);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B" + "'", str15, "B");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(propertyEditor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNull(method65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(strEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("()B");
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type[] typeArray33 = classInfo32.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray10, (java.lang.Object[]) typeArray33);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        propertyDescriptor23.setPreferred(false);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor23.setReadMethod(method32);
        java.lang.String str34 = propertyDescriptor23.getDisplayName();
        java.lang.Object obj36 = propertyDescriptor23.getValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={B=B}]]");
        java.lang.reflect.Method method37 = null;
        propertyDescriptor23.setWriteMethod(method37);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        java.lang.String str4 = type1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type5 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("g.mockito.cglib.core.Signature");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strEnumeration21);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int2 = type0.getOpcode(15);
        java.lang.String str3 = type0.getDescriptor();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        java.lang.String str6 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 17 + "'", int2 == 17);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "F" + "'", str3, "F");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "F" + "'", str5, "F");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        int int6 = type5.getSort();
        int int8 = type5.getOpcode(3);
        java.lang.String str9 = type5.getClassName();
        java.lang.String str10 = type5.getClassName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        boolean boolean13 = type5.equals((java.lang.Object) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        propertyDescriptor3.setValue("", (java.lang.Object) strArray14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("float");
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        boolean boolean21 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "byte" + "'", str9, "byte");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byte" + "'", str10, "byte");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor13);
        propertyDescriptor3.setName("(DBBBD)B");
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.String str40 = propertyDescriptor39.getShortDescription();
        boolean boolean41 = propertyDescriptor39.isPreferred();
        java.lang.reflect.Method method42 = null;
        propertyDescriptor39.setWriteMethod(method42);
        java.beans.PropertyEditor propertyEditor45 = propertyDescriptor39.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor39.setPreferred(false);
        propertyDescriptor39.setConstrained(false);
        boolean boolean50 = propertyDescriptor39.isPreferred();
        java.lang.reflect.Method method51 = propertyDescriptor39.getWriteMethod();
        java.beans.PropertyEditor propertyEditor52 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method51);
        java.lang.String str53 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(propertyEditor45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertNull(propertyEditor52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "byteB" + "'", str53, "byteB");
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type2, typeArray31);
        java.lang.String str34 = signature33.getName();
        java.lang.String str35 = signature33.toString();
        java.lang.String str36 = signature33.toString();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        propertyDescriptor40.setValue("double", (java.lang.Object) ' ');
        boolean boolean46 = propertyDescriptor40.isExpert();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        java.lang.Class<?> wildcardClass52 = propertyDescriptor51.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        propertyDescriptor40.setValue("float", (java.lang.Object) wildcardClass52);
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        int int56 = classInfo55.getModifiers();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        java.lang.String str61 = propertyDescriptor60.getShortDescription();
        java.lang.reflect.Method method62 = propertyDescriptor60.getWriteMethod();
        propertyDescriptor60.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean66 = classInfo55.equals((java.lang.Object) propertyDescriptor60);
        int int67 = classInfo55.getModifiers();
        org.mockito.asm.Type[] typeArray68 = classInfo55.getInterfaces();
        boolean boolean70 = classInfo55.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type71 = classInfo55.getType();
        org.mockito.asm.Type type72 = classInfo55.getType();
        int int73 = classInfo55.getModifiers();
        org.mockito.asm.Type[] typeArray74 = classInfo55.getInterfaces();
        org.mockito.asm.Type type75 = classInfo55.getType();
        boolean boolean76 = signature33.equals((java.lang.Object) type75);
        org.mockito.asm.Type type77 = signature33.getReturnType();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/Type(VBLhi!;SD)Lhi!;" + "'", str35, "org/mockito/asm/Type(VBLhi!;SD)Lhi!;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/Type(VBLhi!;SD)Lhi!;" + "'", str36, "org/mockito/asm/Type(VBLhi!;SD)Lhi!;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java/beans/PropertyDescriptor" + "'", str53, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("B", method15, method16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method16);
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Object obj21 = propertyDescriptor3.getValue("hi!LLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setConstrained(false);
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass27 = signature26.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str29, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNull(propertyEditor34);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int6 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("va.beans.PropertyDescriptor(DBBBD)Llong;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=org.mockito.asm.Type; shortDescription=hi!; values={byte=0}; bound]");
        java.lang.Object obj14 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={double= }; constrained; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.Class<?> wildcardClass20 = signature18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        boolean boolean23 = propertyDescriptor3.equals((java.lang.Object) wildcardClass20);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=org.mockito.asm.Type; shortDescription=hi!; values={byte=0}; bound]" + "'", str15, "java.beans.PropertyDescriptor[name=org.mockito.asm.Type; shortDescription=hi!; values={byte=0}; bound]");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; expert]");
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor3.setBound(false);
        boolean boolean12 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("ava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        org.mockito.asm.Type type33 = classInfo18.getSuperType();
        int int34 = type33.getSort();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/beans/FeatureDescriptor" + "'", str36, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        org.mockito.asm.Type type22 = classInfo19.getSuperType();
        java.lang.String str23 = classInfo19.toString();
        org.mockito.asm.Type type24 = classInfo19.getType();
        org.mockito.asm.Type type25 = classInfo19.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; preferred]");
        java.lang.Object obj12 = propertyDescriptor3.getValue("hi!B");
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        propertyDescriptor18.setValue("double", (java.lang.Object) ' ');
        boolean boolean24 = propertyDescriptor18.isExpert();
        propertyDescriptor18.setName("double");
        java.lang.String str27 = propertyDescriptor18.getName();
        propertyDescriptor18.setName("(DBBBD)Lg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;", (java.lang.Object) propertyDescriptor18);
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor3.createPropertyEditor((java.lang.Object) (short) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "double" + "'", str27, "double");
        org.junit.Assert.assertNull(propertyEditor32);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.String str10 = propertyDescriptor3.getName();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setDisplayName("()Ljava/beans/PropertyDescriptor;");
        java.lang.String str15 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str17, "()Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(DBBBD)B]");
        boolean boolean14 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.reflect.Method method21 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNull(method21);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        java.lang.String str26 = classInfo18.toString();
        org.mockito.asm.Type type27 = classInfo18.getSuperType();
        org.mockito.asm.Type type28 = classInfo18.getSuperType();
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("double", "java/beans/PropertyDescriptor");
        java.lang.String str32 = signature31.getName();
        boolean boolean33 = classInfo18.equals((java.lang.Object) str32);
        org.mockito.asm.Type type34 = classInfo18.getType();
        int int35 = classInfo18.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        java.lang.String str21 = propertyDescriptor20.getShortDescription();
        java.lang.reflect.Method method22 = propertyDescriptor20.getWriteMethod();
        java.lang.String str23 = propertyDescriptor20.getShortDescription();
        propertyDescriptor20.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor20.setExpert(false);
        propertyDescriptor20.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor20.setHidden(true);
        propertyDescriptor20.setHidden(false);
        java.lang.Class<?> wildcardClass35 = propertyDescriptor20.getPropertyEditorClass();
        propertyDescriptor3.setValue("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", (java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setName("byte");
        propertyDescriptor20.setConstrained(true);
        propertyDescriptor20.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass35);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "DBBBD)Ljava/lang/Object");
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        boolean boolean7 = signature2.equals((java.lang.Object) 10.0d);
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        boolean boolean13 = signature2.equals((java.lang.Object) classArray8);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        propertyDescriptor19.setValue("float", (java.lang.Object) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.Class<?> wildcardClass43 = propertyDescriptor42.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.Class<?> wildcardClass45 = type44.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, false);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray50);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray50);
        java.lang.Class<?> wildcardClass53 = methodArray50.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java/beans/PropertyDescriptor" + "'", str32, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java/beans/PropertyDescriptor" + "'", str34, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor12.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        boolean boolean17 = type8.equals((java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor24 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass2, classArray23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.IndexedPropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java/beans/PropertyDescriptor" + "'", str7, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "byteB");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.toString();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.String str9 = propertyDescriptor8.getShortDescription();
        java.lang.reflect.Method method10 = propertyDescriptor8.getWriteMethod();
        propertyDescriptor8.setValue("double", (java.lang.Object) ' ');
        boolean boolean14 = propertyDescriptor8.isExpert();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        propertyDescriptor8.setValue("float", (java.lang.Object) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        int int24 = classInfo23.getModifiers();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getShortDescription();
        java.lang.reflect.Method method30 = propertyDescriptor28.getWriteMethod();
        propertyDescriptor28.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean34 = classInfo23.equals((java.lang.Object) propertyDescriptor28);
        int int35 = classInfo23.getModifiers();
        org.mockito.asm.Type[] typeArray36 = classInfo23.getInterfaces();
        boolean boolean38 = classInfo23.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type39 = classInfo23.getType();
        org.mockito.asm.Type type40 = classInfo23.getType();
        org.mockito.asm.Type[] typeArray41 = classInfo23.getInterfaces();
        boolean boolean42 = signature2.equals((java.lang.Object) classInfo23);
        org.mockito.asm.Type type43 = classInfo23.getSuperType();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.String str48 = propertyDescriptor47.getShortDescription();
        java.lang.reflect.Method method49 = propertyDescriptor47.getWriteMethod();
        java.lang.String str50 = propertyDescriptor47.getDisplayName();
        boolean boolean51 = classInfo23.equals((java.lang.Object) propertyDescriptor47);
        org.mockito.asm.Type[] typeArray52 = classInfo23.getInterfaces();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!byteB" + "'", str3, "hi!byteB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!byteB" + "'", str4, "hi!byteB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java/beans/PropertyDescriptor" + "'", str21, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass2, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        int int22 = classInfo19.getModifiers();
        int int23 = classInfo19.getModifiers();
        org.mockito.asm.Type[] typeArray24 = classInfo19.getInterfaces();
        int int25 = classInfo19.getModifiers();
        java.lang.String str26 = classInfo19.toString();
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        boolean boolean30 = classInfo19.equals((java.lang.Object) int29);
        org.mockito.asm.Type type31 = classInfo19.getSuperType();
        org.mockito.asm.Type type32 = classInfo19.getType();
        int int33 = type32.getSort();
        int int34 = type32.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getDisplayName();
        boolean boolean18 = classInfo10.equals((java.lang.Object) str17);
        org.mockito.asm.Type[] typeArray19 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", type2, typeArray19);
        java.lang.String str21 = signature20.getName();
        java.lang.String str22 = signature20.toString();
        java.lang.String str23 = signature20.getDescriptor();
        org.mockito.asm.Type type24 = signature20.getReturnType();
        java.lang.String str25 = signature20.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str22, "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str23, "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str25, "()Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(true);
        boolean boolean10 = propertyDescriptor3.isPreferred();
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        boolean boolean13 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        java.lang.String str21 = propertyDescriptor18.getShortDescription();
        propertyDescriptor18.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor18.setExpert(false);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        propertyDescriptor30.setBound(false);
        java.beans.PropertyEditor propertyEditor35 = propertyDescriptor18.createPropertyEditor((java.lang.Object) propertyDescriptor30);
        propertyDescriptor18.setShortDescription("hi!");
        java.lang.reflect.Method method38 = propertyDescriptor18.getWriteMethod();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.beans.PropertyEditor propertyEditor41 = propertyDescriptor18.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        boolean boolean42 = propertyDescriptor18.isExpert();
        propertyDescriptor18.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setValue("()Ljava/beans/PropertyDescriptor;", (java.lang.Object) "floatLLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertNull(propertyEditor35);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNull(propertyEditor41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str8 = classInfo7.toString();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java/beans/PropertyDescriptor" + "'", str6, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.beans.PropertyDescriptor" + "'", str8, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.Type[] typeArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("LLava.beans.PropertyDescriptor[name=hi!;;", type1, typeArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method11);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("java/beans/PropertyDescriptor");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int8 = type7.getSort();
        java.lang.String str9 = type7.getClassName();
        java.lang.String str10 = type7.getClassName();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor" + "'", str9, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]" + "'", str18, "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]" + "'", str19, "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.lang.Object obj16 = propertyDescriptor3.getValue("()J");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("va.lang.Object");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("hi!", method8, method9);
        java.lang.String str11 = propertyDescriptor10.getShortDescription();
        java.lang.reflect.Method method12 = propertyDescriptor10.getWriteMethod();
        java.lang.String str13 = propertyDescriptor10.getShortDescription();
        propertyDescriptor10.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor10.setExpert(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setBound(false);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor10.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        propertyDescriptor10.setShortDescription("hi!");
        boolean boolean30 = signature3.equals((java.lang.Object) "hi!");
        java.lang.String str31 = signature3.getDescriptor();
        org.mockito.asm.Type type32 = signature3.getReturnType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        propertyDescriptor36.setValue("double", (java.lang.Object) ' ');
        boolean boolean42 = propertyDescriptor36.isExpert();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor47.getClass();
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        propertyDescriptor36.setValue("float", (java.lang.Object) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        int int52 = classInfo51.getModifiers();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        java.lang.String str57 = propertyDescriptor56.getShortDescription();
        java.lang.reflect.Method method58 = propertyDescriptor56.getWriteMethod();
        propertyDescriptor56.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean62 = classInfo51.equals((java.lang.Object) propertyDescriptor56);
        int int63 = classInfo51.getModifiers();
        org.mockito.asm.Type[] typeArray64 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=B]", type32, typeArray64);
        org.mockito.asm.Type[] typeArray66 = signature65.getArgumentTypes();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("hi!", method68, method69);
        java.lang.String str71 = propertyDescriptor70.getShortDescription();
        java.lang.reflect.Method method72 = propertyDescriptor70.getWriteMethod();
        propertyDescriptor70.setValue("double", (java.lang.Object) ' ');
        boolean boolean76 = propertyDescriptor70.isExpert();
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("hi!", method79, method80);
        java.lang.Class<?> wildcardClass82 = propertyDescriptor81.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        propertyDescriptor70.setValue("float", (java.lang.Object) wildcardClass82);
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray88 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray88, false, false);
        boolean boolean92 = signature65.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java/beans/PropertyDescriptor" + "'", str49, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNull(method58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNull(method72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java/beans/PropertyDescriptor" + "'", str83, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java/beans/PropertyDescriptor" + "'", str85, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(propertyDescriptorArray88);
        org.junit.Assert.assertNotNull(methodArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        boolean boolean15 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean19 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor15.setShortDescription("java/beans/PropertyDescriptor");
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str25 = type24.getDescriptor();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSize();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str50 = type49.getDescriptor();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type30, type46, type49, type51, type52 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        int int62 = type59.getOpcode(3);
        java.lang.String str63 = type59.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type57, type59, type64, type66, type68 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray70);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray70);
        java.beans.PropertyEditor propertyEditor75 = propertyDescriptor15.createPropertyEditor((java.lang.Object) classArray74);
        java.lang.String[] strArray76 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass78 = type77.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass78);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, true, false);
        java.lang.reflect.Method[] methodArray83 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray76, methodArray82);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lhi!;" + "'", str25, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lhi!;" + "'", str50, "Lhi!;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "double" + "'", str53, "double");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(VBLhi!;SD)B" + "'", str55, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "byte" + "'", str63, "byte");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "double" + "'", str69, "double");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(DBBBD)V" + "'", str71, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(DBBBD)B" + "'", str72, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)Lhi!;" + "'", str73, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNull(propertyEditor75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(methodArray83);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyType();
        java.lang.String str24 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("S");
        propertyDescriptor3.setConstrained(false);
        boolean boolean20 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass2, wildcardClass7 };
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        java.lang.Class<?> wildcardClass14 = classArray9.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        int int16 = type15.getSort();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        java.lang.String str21 = propertyDescriptor20.getShortDescription();
        java.lang.reflect.Method method22 = propertyDescriptor20.getWriteMethod();
        propertyDescriptor20.setValue("double", (java.lang.Object) ' ');
        boolean boolean26 = propertyDescriptor20.isExpert();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.Class<?> wildcardClass32 = propertyDescriptor31.getClass();
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        propertyDescriptor20.setValue("float", (java.lang.Object) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        java.lang.String str43 = propertyDescriptor40.getShortDescription();
        boolean boolean44 = propertyDescriptor40.isPreferred();
        java.lang.reflect.Method method45 = null;
        propertyDescriptor40.setReadMethod(method45);
        propertyDescriptor40.setPreferred(true);
        propertyDescriptor40.setDisplayName("float");
        java.lang.reflect.Method method51 = null;
        propertyDescriptor40.setWriteMethod(method51);
        boolean boolean53 = classInfo36.equals((java.lang.Object) propertyDescriptor40);
        org.mockito.asm.Type type54 = classInfo36.getSuperType();
        org.mockito.asm.Type[] typeArray55 = classInfo36.getInterfaces();
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray55);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java/beans/PropertyDescriptor" + "'", str33, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "()[Ljava/lang/Class;" + "'", str56, "()[Ljava/lang/Class;");
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(VBLhi!;SD)B");
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(classInfo20);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        int int4 = type1.getSize();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.String str9 = propertyDescriptor8.getShortDescription();
        java.lang.reflect.Method method10 = propertyDescriptor8.getWriteMethod();
        java.lang.String str11 = propertyDescriptor8.getShortDescription();
        boolean boolean12 = propertyDescriptor8.isPreferred();
        boolean boolean13 = propertyDescriptor8.isExpert();
        java.lang.Object obj15 = propertyDescriptor8.getValue("()B");
        propertyDescriptor8.setConstrained(false);
        java.lang.String str18 = propertyDescriptor8.getShortDescription();
        propertyDescriptor8.setDisplayName("java.beans.PropertyDescriptor[name=(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;; values={byte=0}]");
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type24 = signature23.getReturnType();
        java.lang.Class<?> wildcardClass25 = signature23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean31 = classInfo28.equals((java.lang.Object) type30);
        org.mockito.asm.Type type32 = classInfo28.getType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        java.lang.String str39 = propertyDescriptor36.getShortDescription();
        boolean boolean40 = propertyDescriptor36.isPreferred();
        boolean boolean41 = propertyDescriptor36.isExpert();
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type45 = signature44.getReturnType();
        java.lang.Class<?> wildcardClass46 = signature44.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        java.lang.Class<?> wildcardClass51 = propertyDescriptor50.getClass();
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type55 = signature54.getReturnType();
        java.lang.Class<?> wildcardClass56 = signature54.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass46, wildcardClass51, wildcardClass56 };
        int int58 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.beans.PropertyEditor propertyEditor59 = propertyDescriptor36.createPropertyEditor((java.lang.Object) classArray57);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        boolean boolean63 = classInfo28.equals((java.lang.Object) classArray57);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.Class[] classArray65 = new java.lang.Class[] {};
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        java.lang.String[] strArray67 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        int int69 = type68.getSort();
        java.lang.Class<?> wildcardClass70 = type68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass70);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass70);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray72, true, true);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray75);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray75);
        java.beans.PropertyEditor propertyEditor78 = propertyDescriptor8.createPropertyEditor((java.lang.Object) methodArray77);
        boolean boolean79 = type1.equals((java.lang.Object) propertyDescriptor8);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(propertyEditor59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNull(propertyEditor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor; shortDescription=Ljava/lang/Object;; values={byte=0}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setHidden(true);
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.String str17 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSort();
        java.lang.Class<?> wildcardClass26 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method35 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass18, "java.beans.PropertyDescriptor[name=g.mockito.cglib.core.Signature; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={byte=0}; constrained]]", classArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=g.mockito.cglib.core.Signature; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={byte=0}; constrained]]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lva/beans/FeatureDescriptor;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lva/beans/FeatureDescriptor;" + "'", str3, "Lva/beans/FeatureDescriptor;");
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        java.lang.String str39 = propertyDescriptor36.getShortDescription();
        propertyDescriptor36.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor36.setExpert(false);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor36.getPropertyEditorClass();
        java.lang.reflect.Method method46 = null;
        propertyDescriptor36.setWriteMethod(method46);
        propertyDescriptor36.setShortDescription("(DBBBD)Lhi!;");
        boolean boolean50 = classInfo18.equals((java.lang.Object) propertyDescriptor36);
        org.mockito.asm.Type type51 = classInfo18.getType();
        int int53 = type51.getOpcode((int) 'a');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 101 + "'", int53 == 101);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.String str7 = signature3.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        boolean boolean15 = signature3.equals((java.lang.Object) strArray14);
        java.lang.String str16 = signature3.getDescriptor();
        java.lang.String str17 = signature3.getDescriptor();
        java.lang.String str18 = signature3.getName();
        java.lang.String str19 = signature3.getDescriptor();
        org.mockito.asm.Type type20 = signature3.getReturnType();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        java.lang.String str27 = propertyDescriptor24.getShortDescription();
        boolean boolean28 = propertyDescriptor24.isPreferred();
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type type35 = signature32.getReturnType();
        propertyDescriptor24.setValue("B", (java.lang.Object) type35);
        propertyDescriptor24.setShortDescription("byte");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        int int47 = type45.getOpcode(1);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        java.lang.String str52 = propertyDescriptor51.getShortDescription();
        java.lang.reflect.Method method53 = propertyDescriptor51.getWriteMethod();
        propertyDescriptor51.setValue("double", (java.lang.Object) ' ');
        boolean boolean57 = propertyDescriptor51.isExpert();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        java.lang.Class<?> wildcardClass63 = propertyDescriptor62.getClass();
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        propertyDescriptor51.setValue("float", (java.lang.Object) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        java.lang.String str68 = classInfo67.toString();
        java.lang.String str69 = classInfo67.toString();
        org.mockito.asm.Type type70 = classInfo67.getSuperType();
        org.mockito.asm.Type type71 = classInfo67.getSuperType();
        java.lang.String str72 = classInfo67.toString();
        org.mockito.asm.Type[] typeArray73 = classInfo67.getInterfaces();
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray73);
        org.mockito.cglib.core.Signature signature75 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; expert]", type20, typeArray73);
        org.mockito.cglib.core.Signature signature78 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type79 = signature78.getReturnType();
        java.lang.Class<?> wildcardClass80 = signature78.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("hi!", method83, method84);
        java.lang.Class<?> wildcardClass86 = propertyDescriptor85.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.lang.Class<?> wildcardClass88 = type87.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        boolean boolean90 = type81.equals((java.lang.Object) wildcardClass88);
        org.mockito.cglib.core.ClassInfo classInfo91 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray92 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        java.lang.reflect.Method[] methodArray95 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray92, true, false);
        boolean boolean96 = signature75.equals((java.lang.Object) propertyDescriptorArray92);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "B" + "'", str17, "B");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str44, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNull(method53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java/beans/PropertyDescriptor" + "'", str64, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.beans.PropertyDescriptor" + "'", str68, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.beans.PropertyDescriptor" + "'", str69, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.beans.PropertyDescriptor" + "'", str72, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str74, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classInfo91);
        org.junit.Assert.assertNotNull(propertyDescriptorArray92);
        org.junit.Assert.assertNotNull(methodArray95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("L(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->L");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        byte[] byteArray1 = new byte[] {};
        java.lang.ClassLoader classLoader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class3 = org.mockito.cglib.core.ReflectUtils.defineClass("Ljava/beans/PropertyDescriptor;", byteArray1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, false);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        int int3 = type0.getOpcode(3);
        java.lang.String str4 = type0.getClassName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.String str9 = signature7.getName();
        boolean boolean10 = type0.equals((java.lang.Object) signature7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        int int14 = type13.getSort();
        java.lang.String str15 = type13.getDescriptor();
        java.lang.String str16 = type13.getClassName();
        int int18 = type13.getOpcode((int) (short) 10);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type38 = classInfo37.getSuperType();
        org.mockito.asm.Type[] typeArray39 = classInfo37.getInterfaces();
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}; bound]", type13, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byte" + "'", str4, "byte");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str15, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.beans.PropertyDescriptor" + "'", str16, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "()B" + "'", str41, "()B");
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=; preferred; values={double= }]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str3 = type2.getDescriptor();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        int int12 = type11.getSort();
        int int14 = type11.getOpcode(3);
        java.lang.String str15 = type11.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        int int17 = type16.getSort();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type9, type11, type16, type18, type20 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type8, type24, type27, type29, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        int int38 = type37.getSort();
        int int40 = type37.getOpcode(3);
        java.lang.String str41 = type37.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        int int43 = type42.getSort();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        int int45 = type44.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type35, type37, type42, type44, type46 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray48);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray48);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) classArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "double" + "'", str10, "double");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "byte" + "'", str15, "byte");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(DBBBD)V" + "'", str23, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lhi!;" + "'", str28, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(VBLhi!;SD)B" + "'", str33, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "double" + "'", str36, "double");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "byte" + "'", str41, "byte");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)V" + "'", str49, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)B" + "'", str50, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(DBBBD)Lhi!;" + "'", str51, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method5 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.String str8 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.String str11 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setDisplayName("hi!byteB");
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, true);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray29);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        propertyDescriptor18.setValue("double", (java.lang.Object) ' ');
        boolean boolean24 = propertyDescriptor18.isExpert();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor29.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        propertyDescriptor18.setValue("float", (java.lang.Object) wildcardClass30);
        java.lang.reflect.Method method33 = propertyDescriptor18.getReadMethod();
        java.lang.reflect.Method method34 = null;
        propertyDescriptor18.setReadMethod(method34);
        propertyDescriptor18.setPreferred(true);
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java/beans/PropertyDescriptor" + "'", str31, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertNull(propertyEditor38);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; shortDescription=F; values={double= ; float=class java.beans.PropertyDescriptor}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("byteB");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.toString();
        int int4 = type1.getSize();
        java.lang.String str5 = type1.getDescriptor();
        int int6 = type1.getDimensions();
        java.lang.String str7 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LbyteB;" + "'", str3, "LbyteB;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LbyteB;" + "'", str5, "LbyteB;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "byteB" + "'", str7, "byteB");
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str13 = type12.getDescriptor();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type17 = signature16.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        int int24 = type21.getOpcode(3);
        java.lang.String str25 = type21.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type19, type21, type26, type28, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        int int35 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str38 = type37.getDescriptor();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type18, type34, type37, type39, type40 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        int int50 = type47.getOpcode(3);
        java.lang.String str51 = type47.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        int int55 = type54.getSort();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type45, type47, type52, type54, type56 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray58);
        int int63 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        int int65 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray62);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method69 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "()LDBBBD)Lhi!;", classArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()LDBBBD)Lhi!;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lhi!;" + "'", str13, "Lhi!;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "byte" + "'", str25, "byte");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(DBBBD)V" + "'", str33, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lhi!;" + "'", str38, "Lhi!;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "double" + "'", str41, "double");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(VBLhi!;SD)B" + "'", str43, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "byte" + "'", str51, "byte");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "double" + "'", str57, "double");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)V" + "'", str59, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)B" + "'", str60, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)Lhi!;" + "'", str61, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.Class<?> wildcardClass11 = signature9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type6, typeArray14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        propertyDescriptor19.setValue("float", (java.lang.Object) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        java.lang.Object obj35 = null;
        boolean boolean36 = classInfo34.equals(obj35);
        java.lang.String str37 = classInfo34.toString();
        org.mockito.asm.Type[] typeArray38 = classInfo34.getInterfaces();
        boolean boolean39 = signature15.equals((java.lang.Object) classInfo34);
        org.mockito.asm.Type type40 = classInfo34.getSuperType();
        org.mockito.asm.Type type41 = classInfo34.getType();
        java.lang.String str42 = classInfo34.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java/beans/PropertyDescriptor" + "'", str32, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor" + "'", str37, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.beans.PropertyDescriptor" + "'", str42, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(DBBBD)Ljava/lang/Object;");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        propertyDescriptor5.setValue("double", (java.lang.Object) ' ');
        boolean boolean11 = propertyDescriptor5.isExpert();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        propertyDescriptor5.setValue("float", (java.lang.Object) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        int int21 = classInfo20.getModifiers();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.String str26 = propertyDescriptor25.getShortDescription();
        java.lang.reflect.Method method27 = propertyDescriptor25.getWriteMethod();
        propertyDescriptor25.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean31 = classInfo20.equals((java.lang.Object) propertyDescriptor25);
        int int32 = classInfo20.getModifiers();
        org.mockito.asm.Type[] typeArray33 = classInfo20.getInterfaces();
        boolean boolean35 = classInfo20.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type36 = classInfo20.getType();
        java.lang.String str37 = type36.getInternalName();
        org.mockito.asm.Type type38 = type36.getElementType();
        org.mockito.asm.Type type39 = type36.getElementType();
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type44 = signature43.getReturnType();
        java.lang.String str45 = signature43.getName();
        org.mockito.asm.Type type46 = signature43.getReturnType();
        java.lang.String str47 = signature43.getDescriptor();
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        boolean boolean55 = signature43.equals((java.lang.Object) strArray54);
        java.lang.String str56 = signature43.getDescriptor();
        org.mockito.asm.Type type57 = signature43.getReturnType();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        int int64 = type61.getOpcode(3);
        java.lang.String str65 = type61.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        int int69 = type68.getSort();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type59, type61, type66, type68, type70 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray72);
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type57, typeArray72);
        org.mockito.cglib.core.Signature signature75 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];; expert; values={byte=0}; constrained]", type39, typeArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray72);
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) classArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java/beans/PropertyDescriptor" + "'", str37, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "B" + "'", str47, "B");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "B" + "'", str56, "B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "double" + "'", str60, "double");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "double" + "'", str71, "double");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)V" + "'", str73, "(DBBBD)V");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        boolean boolean16 = propertyDescriptor3.isExpert();
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lva/beans/PropertyDescriptor;", "Lg/mockito/cglib/core/Signature;");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        boolean boolean50 = signature2.equals((java.lang.Object) typeArray47);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; expert; values={byte=0}; bound]", method1, method2);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type[] typeArray9 = classInfo7.getInterfaces();
        java.lang.String str10 = classInfo7.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo7.getInterfaces();
        org.mockito.asm.Type type12 = classInfo7.getType();
        org.mockito.asm.Type type13 = classInfo7.getSuperType();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = classInfo21.getType();
        org.mockito.asm.Type type23 = classInfo21.getType();
        org.mockito.asm.Type type24 = classInfo21.getType();
        org.mockito.asm.Type type25 = classInfo21.getType();
        org.mockito.asm.Type[] typeArray26 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class<?> wildcardClass31 = signature29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = classInfo33.getSuperType();
        org.mockito.asm.Type[] typeArray35 = classInfo33.getInterfaces();
        boolean boolean36 = classInfo21.equals((java.lang.Object) typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray35);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str10, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str20, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()Ljava/lang/Object;" + "'", str37, "()Ljava/lang/Object;");
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        boolean boolean7 = signature2.equals((java.lang.Object) 10.0d);
        java.lang.String str8 = signature2.getName();
        java.lang.String str9 = signature2.getName();
        java.lang.String str10 = signature2.getName();
        java.lang.String str11 = signature2.getName();
        java.lang.String str12 = signature2.getName();
        java.lang.String str13 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "B" + "'", str13, "B");
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) -1, (byte) 100 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("LD;", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, -1, 100]");
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        java.lang.String str7 = propertyDescriptor4.getShortDescription();
        boolean boolean8 = propertyDescriptor4.isPreferred();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.String str14 = signature12.getName();
        org.mockito.asm.Type type15 = signature12.getReturnType();
        propertyDescriptor4.setValue("B", (java.lang.Object) type15);
        int int17 = type15.getSize();
        int int18 = type15.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSort();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.String str26 = propertyDescriptor25.getShortDescription();
        java.lang.reflect.Method method27 = propertyDescriptor25.getWriteMethod();
        java.lang.String str28 = propertyDescriptor25.getShortDescription();
        propertyDescriptor25.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor25.setReadMethod(method32);
        java.lang.Object obj35 = propertyDescriptor25.getValue("java/beans/PropertyDescriptor");
        boolean boolean36 = type20.equals((java.lang.Object) "java/beans/PropertyDescriptor");
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor40.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type47 = signature46.getReturnType();
        java.lang.String str48 = signature46.getName();
        org.mockito.asm.Type type49 = signature46.getReturnType();
        java.lang.String str50 = signature46.getDescriptor();
        java.lang.Class[] classArray51 = new java.lang.Class[] {};
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray51);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        boolean boolean58 = signature46.equals((java.lang.Object) strArray57);
        java.lang.String str59 = signature46.getDescriptor();
        org.mockito.asm.Type type60 = signature46.getReturnType();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        int int67 = type64.getOpcode(3);
        java.lang.String str68 = type64.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BYTE_TYPE;
        int int70 = type69.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type62, type64, type69, type71, type73 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray75);
        org.mockito.cglib.core.Signature signature77 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type60, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray75);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", type20, typeArray75);
        org.mockito.cglib.core.Signature signature80 = new org.mockito.cglib.core.Signature("hi!B", type15, typeArray75);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray75);
        java.lang.String[] strArray82 = org.mockito.cglib.core.ReflectUtils.getNames(classArray81);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "B" + "'", str50, "B");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "B" + "'", str59, "B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "byte" + "'", str68, "byte");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "double" + "'", str74, "double");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(DBBBD)V" + "'", str76, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str78, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj20 = propertyDescriptor3.getValue("LLorg/mockito/cglib/core/Signature;;");
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean14 = type5.equals((java.lang.Object) wildcardClass12);
        java.lang.String str15 = type5.getDescriptor();
        java.lang.String str16 = type5.getClassName();
        int int17 = type5.getSize();
        java.lang.String str18 = type5.getClassName();
        int int19 = type5.getSort();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str15, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str16, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str18, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.String str26 = propertyDescriptor25.getShortDescription();
        java.lang.reflect.Method method27 = propertyDescriptor25.getWriteMethod();
        java.lang.String str28 = propertyDescriptor25.getShortDescription();
        boolean boolean29 = propertyDescriptor25.isPreferred();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        java.lang.String str35 = signature33.getName();
        org.mockito.asm.Type type36 = signature33.getReturnType();
        propertyDescriptor25.setValue("B", (java.lang.Object) type36);
        propertyDescriptor25.setShortDescription("double");
        propertyDescriptor25.setHidden(true);
        java.lang.String str42 = propertyDescriptor25.getName();
        propertyDescriptor25.setExpert(true);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]", (java.lang.Object) true);
        java.lang.reflect.Method method46 = null;
        propertyDescriptor3.setReadMethod(method46);
        java.lang.String str48 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=byteB]", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=B; values={L(DBBBD)V;=Ljava/beans/PropertyDescriptor;}]");
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.Object obj7 = null;
        boolean boolean8 = signature2.equals(obj7);
        java.lang.String str9 = signature2.getName();
        java.lang.String str10 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!B" + "'", str5, "hi!B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = type10.getElementType();
        int int12 = type10.getSize();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!]", "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.mockito.asm.Type[] typeArray16 = signature15.getArgumentTypes();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("", type10, typeArray16);
        java.lang.String str18 = signature17.getDescriptor();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(DBBBD)Lorg/mockito/asm/Type;" + "'", str18, "(DBBBD)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) -1, (byte) 0 };
        java.lang.ClassLoader classLoader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class8 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=org.mockito.cglib.core.Signature; displayName=java.beans.PropertyDescriptor]", byteArray6, classLoader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1, -1, 0]");
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=double; shortDescription=F; hidden; values={java.beans.PropertyDescriptor[name=hi!]=0}]", "Lva/lang/Object;");
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type type11 = classInfo7.getType();
        org.mockito.asm.Type type12 = classInfo7.getType();
        org.mockito.asm.Type type13 = classInfo7.getSuperType();
        org.mockito.asm.Type type14 = classInfo7.getType();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        java.lang.Class class0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getDisplayName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        propertyDescriptor4.setHidden(false);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor13.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor4.setValue("byte", (java.lang.Object) propertyDescriptor13);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, false);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray24);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type32 = signature31.getReturnType();
        java.lang.String str33 = signature31.getName();
        org.mockito.asm.Type type34 = signature31.getReturnType();
        boolean boolean36 = signature31.equals((java.lang.Object) 10.0d);
        java.lang.String str37 = signature31.getName();
        java.lang.String str38 = signature31.getDescriptor();
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("byte", "B");
        java.lang.String str42 = signature41.toString();
        org.mockito.asm.Type type43 = signature41.getReturnType();
        org.mockito.asm.Type type44 = signature41.getReturnType();
        boolean boolean45 = signature31.equals((java.lang.Object) type44);
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        int int50 = type49.getSort();
        java.lang.Class<?> wildcardClass51 = type49.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, true, true);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray56);
        boolean boolean58 = signature31.equals((java.lang.Object) methodArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = org.mockito.cglib.core.ReflectUtils.newInstance(class0, classArray28, (java.lang.Object[]) methodArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "B" + "'", str38, "B");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "byteB" + "'", str42, "byteB");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration9);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        boolean boolean31 = propertyDescriptor23.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]; values={double= ; float=class java.beans.PropertyDescriptor}]");
        int int3 = type1.getOpcode(46);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        int int28 = type27.getDimensions();
        java.lang.String str29 = type27.getDescriptor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str29, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = type0.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type13 = type12.getElementType();
        int int14 = type12.getDimensions();
        java.lang.String str15 = type12.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str10, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str15, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSize();
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "B" + "'", str2, "B");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getDisplayName();
        boolean boolean29 = propertyDescriptor27.isHidden();
        propertyDescriptor27.setHidden(false);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        propertyDescriptor36.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor36.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor27.setValue("byte", (java.lang.Object) propertyDescriptor36);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass45);
        java.beans.PropertyEditor propertyEditor48 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str47);
        java.lang.Object obj50 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java/beans/PropertyDescriptor" + "'", str47, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor48);
        org.junit.Assert.assertNull(obj50);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Ljava.lang.Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass15, classArray19, objArray20);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str3 = signature2.getName();
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        int int6 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        boolean boolean9 = signature2.equals((java.lang.Object) classArray8);
        java.lang.String str10 = signature2.getDescriptor();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        boolean boolean19 = signature2.equals((java.lang.Object) classArray15);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound]", "byteB");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        java.lang.reflect.Method method8 = propertyDescriptor6.getWriteMethod();
        propertyDescriptor6.setValue("double", (java.lang.Object) ' ');
        boolean boolean12 = propertyDescriptor6.isExpert();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        propertyDescriptor6.setValue("float", (java.lang.Object) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        int int22 = classInfo21.getModifiers();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor26.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean32 = classInfo21.equals((java.lang.Object) propertyDescriptor26);
        int int33 = classInfo21.getModifiers();
        org.mockito.asm.Type[] typeArray34 = classInfo21.getInterfaces();
        boolean boolean36 = classInfo21.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type37 = classInfo21.getSuperType();
        org.mockito.asm.Type[] typeArray38 = classInfo21.getInterfaces();
        org.mockito.asm.Type type39 = classInfo21.getSuperType();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        java.lang.String str46 = propertyDescriptor43.getShortDescription();
        boolean boolean47 = propertyDescriptor43.isPreferred();
        java.lang.reflect.Method method48 = null;
        propertyDescriptor43.setReadMethod(method48);
        java.lang.reflect.Method method50 = null;
        propertyDescriptor43.setReadMethod(method50);
        boolean boolean52 = type39.equals((java.lang.Object) propertyDescriptor43);
        propertyDescriptor43.setExpert(false);
        boolean boolean55 = propertyDescriptor43.isPreferred();
        propertyDescriptor43.setBound(false);
        propertyDescriptor43.setConstrained(false);
        propertyDescriptor43.setShortDescription("()LD;");
        boolean boolean62 = signature2.equals((java.lang.Object) propertyDescriptor43);
        propertyDescriptor43.setShortDescription("LLorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/ReflectUtils$4", "java.beans.PropertyDescriptor[name=hi!; preferred]");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/cglib/core/ReflectUtils$4java.beans.PropertyDescriptor[name=hi!; preferred]" + "'", str3, "org/mockito/cglib/core/ReflectUtils$4java.beans.PropertyDescriptor[name=hi!; preferred]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/cglib/core/ReflectUtils$4" + "'", str4, "org/mockito/cglib/core/ReflectUtils$4");
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = classInfo31.getType();
        int int33 = classInfo31.getModifiers();
        int int34 = classInfo31.getModifiers();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        int int36 = type35.getSize();
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type40 = signature39.getReturnType();
        java.lang.Class<?> wildcardClass41 = signature39.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        boolean boolean44 = type35.equals((java.lang.Object) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        boolean boolean47 = classInfo31.equals((java.lang.Object) classInfo46);
        java.beans.PropertyEditor propertyEditor48 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo31);
        java.lang.reflect.Method method49 = null;
        propertyDescriptor3.setReadMethod(method49);
        java.lang.reflect.Method method51 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str45, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(propertyEditor48);
        org.junit.Assert.assertNull(method51);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        java.lang.String str19 = propertyDescriptor16.getShortDescription();
        propertyDescriptor16.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor16.setConstrained(false);
        propertyDescriptor16.setHidden(false);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        java.lang.String str33 = propertyDescriptor30.getShortDescription();
        boolean boolean34 = propertyDescriptor30.isPreferred();
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type39 = signature38.getReturnType();
        java.lang.String str40 = signature38.getName();
        org.mockito.asm.Type type41 = signature38.getReturnType();
        propertyDescriptor30.setValue("B", (java.lang.Object) type41);
        java.lang.reflect.Method method43 = propertyDescriptor30.getReadMethod();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor16, propertyDescriptor30 };
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, false);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray52);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(method43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        org.mockito.asm.Type type35 = classInfo18.getSuperType();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        org.mockito.asm.Type type37 = classInfo18.getType();
        org.mockito.asm.Type type38 = classInfo18.getType();
        int int39 = classInfo18.getModifiers();
        org.mockito.asm.Type type40 = classInfo18.getSuperType();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor44.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.Class<?> wildcardClass47 = type46.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass47);
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type51 = classInfo50.getSuperType();
        org.mockito.asm.Type type52 = classInfo50.getSuperType();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type59 = signature58.getReturnType();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        int int64 = type63.getSort();
        int int66 = type63.getOpcode(3);
        java.lang.String str67 = type63.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        int int69 = type68.getSort();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        int int71 = type70.getSort();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type61, type63, type68, type70, type72 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        int int77 = type76.getSize();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str80 = type79.getDescriptor();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type[] typeArray84 = new org.mockito.asm.Type[] { type60, type76, type79, type81, type82 };
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray84);
        org.mockito.cglib.core.Signature signature86 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type55, typeArray84);
        org.mockito.asm.Type[] typeArray87 = signature86.getArgumentTypes();
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray87);
        java.lang.String str90 = type40.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "double" + "'", str62, "double");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "byte" + "'", str67, "byte");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "double" + "'", str73, "double");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(DBBBD)V" + "'", str75, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lhi!;" + "'", str80, "Lhi!;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "double" + "'", str83, "double");
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(VBLhi!;SD)B" + "'", str85, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(VBLhi!;SD)Ljava/lang/Object;" + "'", str88, "(VBLhi!;SD)Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(VBLhi!;SD)Ljava/beans/FeatureDescriptor;" + "'", str89, "(VBLhi!;SD)Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java/beans/FeatureDescriptor" + "'", str90, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type11 = signature10.getReturnType();
        java.lang.Class<?> wildcardClass12 = signature10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type7, typeArray15);
        org.mockito.asm.Type type17 = type7.getElementType();
        int int18 = type7.getSize();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        java.lang.String str30 = signature28.getName();
        org.mockito.asm.Type type31 = signature28.getReturnType();
        java.lang.String str32 = signature28.getDescriptor();
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        boolean boolean40 = signature28.equals((java.lang.Object) strArray39);
        java.lang.String str41 = signature28.getDescriptor();
        org.mockito.asm.Type type42 = signature28.getReturnType();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        int int49 = type46.getOpcode(3);
        java.lang.String str50 = type46.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSort();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type44, type46, type51, type53, type55 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray57);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type42, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray57);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("C", type7, typeArray57);
        java.lang.String str62 = signature61.getDescriptor();
        org.mockito.asm.Type type63 = signature61.getReturnType();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "B" + "'", str32, "B");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "double" + "'", str45, "double");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "byte" + "'", str50, "byte");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "double" + "'", str56, "double");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)V" + "'", str58, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str60, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(DBBBD)Lorg/mockito/cglib/core/Signature;" + "'", str62, "(DBBBD)Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(type63);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setName("()Ljava/lang/Object;");
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "double" + "'", str14, "double");
        org.junit.Assert.assertNull(method19);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("Ljava/beans/FeatureDescriptor;", method2, method3);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.Class<?> wildcardClass10 = signature8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        propertyDescriptor4.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) classInfo13);
        org.mockito.asm.Type type16 = classInfo13.getType();
        org.mockito.asm.Type type17 = classInfo13.getType();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type21 = signature20.getReturnType();
        java.lang.Class<?> wildcardClass22 = signature20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type26 = classInfo25.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo25.getInterfaces();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type17, typeArray27);
        java.lang.String str29 = signature28.getDescriptor();
        java.lang.String str30 = signature28.toString();
        java.lang.Class<?> wildcardClass31 = signature28.getClass();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "()Lorg/mockito/cglib/core/Signature;" + "'", str29, "()Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/cglib/core/Signature;()Lorg/mockito/cglib/core/Signature;" + "'", str30, "Lorg/mockito/cglib/core/Signature;()Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg/mockito/cglib/core/Signature");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("DBBBD)Lhi!", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.Signature", "");
        java.lang.String str3 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj21 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]");
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        java.lang.String str33 = propertyDescriptor30.getShortDescription();
        propertyDescriptor30.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration37 = propertyDescriptor30.attributeNames();
        propertyDescriptor30.setPreferred(true);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        boolean boolean45 = propertyDescriptor43.isPreferred();
        java.lang.reflect.Method method46 = null;
        propertyDescriptor43.setWriteMethod(method46);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor43.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor43.setPreferred(false);
        propertyDescriptor43.setConstrained(false);
        propertyDescriptor43.setBound(false);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        java.lang.String str61 = propertyDescriptor60.getShortDescription();
        java.lang.reflect.Method method62 = propertyDescriptor60.getWriteMethod();
        java.lang.String str63 = propertyDescriptor60.getShortDescription();
        propertyDescriptor60.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor60.setExpert(false);
        propertyDescriptor60.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor60.setHidden(true);
        propertyDescriptor60.setHidden(false);
        java.lang.Class<?> wildcardClass75 = propertyDescriptor60.getPropertyEditorClass();
        propertyDescriptor43.setValue("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", (java.lang.Object) propertyDescriptor60);
        propertyDescriptor60.setName("byte");
        propertyDescriptor60.setConstrained(true);
        java.beans.PropertyEditor propertyEditor81 = propertyDescriptor30.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor30.setBound(true);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={double= }; constrained]", (java.lang.Object) propertyDescriptor30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration37);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNull(propertyEditor81);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        propertyDescriptor4.setValue("double", (java.lang.Object) ' ');
        boolean boolean10 = propertyDescriptor4.isExpert();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        propertyDescriptor4.setValue("float", (java.lang.Object) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type21 = classInfo20.getType();
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getDimensions();
        org.mockito.asm.Type type24 = type21.getElementType();
        org.mockito.asm.Type[] typeArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]LD;", type21, typeArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor" + "'", str22, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.Class<?> wildcardClass14 = signature12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        boolean boolean21 = propertyDescriptor3.equals((java.lang.Object) classInfo20);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str19, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor23.getPropertyEditorClass();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.String str36 = propertyDescriptor35.getShortDescription();
        java.lang.reflect.Method method37 = propertyDescriptor35.getWriteMethod();
        java.lang.String str38 = propertyDescriptor35.getShortDescription();
        java.lang.Class<?> wildcardClass39 = propertyDescriptor35.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}]", (java.lang.Object) type40);
        propertyDescriptor23.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        org.mockito.asm.Type type33 = classInfo18.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo18.getInterfaces();
        org.mockito.asm.Type type35 = classInfo18.getSuperType();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        java.lang.String str37 = type36.getDescriptor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str37, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method14);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        propertyDescriptor4.setValue("double", (java.lang.Object) ' ');
        boolean boolean10 = propertyDescriptor4.isExpert();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        propertyDescriptor4.setValue("float", (java.lang.Object) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        int int20 = classInfo19.getModifiers();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean30 = classInfo19.equals((java.lang.Object) propertyDescriptor24);
        propertyDescriptor24.setPreferred(false);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor24.setWriteMethod(method33);
        java.lang.Object obj36 = propertyDescriptor24.getValue("java.beans.PropertyDescriptor[name=byte; shortDescription=java.beans.PropertyDescriptor[name=hi!]; values={byte=0}]");
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        propertyDescriptor40.setValue("double", (java.lang.Object) ' ');
        boolean boolean46 = propertyDescriptor40.isExpert();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        java.lang.Class<?> wildcardClass52 = propertyDescriptor51.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        propertyDescriptor40.setValue("float", (java.lang.Object) wildcardClass52);
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type56 = classInfo55.getSuperType();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type60 = signature59.getReturnType();
        java.lang.Class<?> wildcardClass61 = signature59.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        boolean boolean66 = type56.equals((java.lang.Object) propertyDescriptorArray65);
        java.beans.PropertyEditor propertyEditor67 = propertyDescriptor24.createPropertyEditor((java.lang.Object) propertyDescriptorArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java/beans/PropertyDescriptor" + "'", str53, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str62, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str63, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str64, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(propertyEditor67);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getType();
        org.mockito.asm.Type type35 = classInfo18.getType();
        java.lang.String str36 = classInfo18.toString();
        org.mockito.asm.Type[] typeArray37 = classInfo18.getInterfaces();
        org.mockito.asm.Type type38 = classInfo18.getType();
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.beans.PropertyDescriptor" + "'", str36, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        propertyDescriptor11.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor11.setExpert(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setBound(false);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor11.createPropertyEditor((java.lang.Object) propertyDescriptor23);
        propertyDescriptor11.setShortDescription("hi!");
        java.lang.reflect.Method method31 = propertyDescriptor11.getWriteMethod();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor11.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setValue("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.util.Enumeration<java.lang.String> strEnumeration36 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNull(propertyEditor34);
        org.junit.Assert.assertNotNull(strEnumeration36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;; propertyEditorClass=class java.beans.PropertyDescriptor]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.toString();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type9 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lhi!;" + "'", str5, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lhi!;float" + "'", str6, "Lhi!;float");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lhi!;float" + "'", str7, "Lhi!;float");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("[Ljava/lang/Class;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 100, (byte) 10, (byte) 100 };
        java.lang.ClassLoader classLoader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = org.mockito.cglib.core.ReflectUtils.defineClass("LDBBBD)Lhi!;", byteArray5, classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 100, 10, 100]");
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type11 = signature10.getReturnType();
        java.lang.Class<?> wildcardClass12 = signature10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type7, typeArray15);
        org.mockito.asm.Type type17 = type7.getElementType();
        int int18 = type7.getSize();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        java.lang.String str30 = signature28.getName();
        org.mockito.asm.Type type31 = signature28.getReturnType();
        java.lang.String str32 = signature28.getDescriptor();
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        boolean boolean40 = signature28.equals((java.lang.Object) strArray39);
        java.lang.String str41 = signature28.getDescriptor();
        org.mockito.asm.Type type42 = signature28.getReturnType();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        int int49 = type46.getOpcode(3);
        java.lang.String str50 = type46.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSort();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type44, type46, type51, type53, type55 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray57);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type42, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray57);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("C", type7, typeArray57);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("hi!", method63, method64);
        java.lang.String str66 = propertyDescriptor65.getShortDescription();
        boolean boolean67 = propertyDescriptor65.isPreferred();
        java.lang.reflect.Method method68 = null;
        propertyDescriptor65.setWriteMethod(method68);
        java.beans.PropertyEditor propertyEditor71 = propertyDescriptor65.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor65.setPreferred(false);
        propertyDescriptor65.setPreferred(false);
        boolean boolean76 = signature61.equals((java.lang.Object) propertyDescriptor65);
        org.mockito.asm.Type[] typeArray77 = signature61.getArgumentTypes();
        org.mockito.asm.Type type78 = signature61.getReturnType();
        java.lang.String str79 = type78.getClassName();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "B" + "'", str32, "B");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "double" + "'", str45, "double");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "byte" + "'", str50, "byte");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "double" + "'", str56, "double");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)V" + "'", str58, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str60, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(propertyEditor71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str79, "org.mockito.cglib.core.Signature");
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.String str19 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        boolean boolean26 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str12 = type11.toString();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getDisplayName();
        boolean boolean29 = propertyDescriptor27.isHidden();
        propertyDescriptor27.setHidden(false);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        propertyDescriptor36.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor36.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor27.setValue("byte", (java.lang.Object) propertyDescriptor36);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass45);
        java.beans.PropertyEditor propertyEditor48 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str47);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java/beans/PropertyDescriptor" + "'", str47, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor48);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]double");
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str13, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("()Lva.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("floatLLorg/mockito/cglib/core/Signature;;", "java.lang.Objectorg.mockito.cglib.core.Signature");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 0 };
        java.lang.ClassLoader classLoader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = org.mockito.cglib.core.ReflectUtils.defineClass("()LC;", byteArray5, classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 0, 0]");
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        int int4 = type1.getOpcode((int) (short) 0);
        int int5 = type1.getSize();
        java.lang.String str6 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lhi!;" + "'", str6, "Lhi!;");
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.Object obj6 = null;
        boolean boolean7 = signature2.equals(obj6);
        java.lang.String str8 = signature2.getDescriptor();
        java.lang.String str9 = signature2.toString();
        java.lang.String str10 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "B" + "'", str8, "B");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!B" + "'", str9, "hi!B");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        int int6 = type5.getSort();
        int int8 = type5.getOpcode(3);
        java.lang.String str9 = type5.getClassName();
        java.lang.String str10 = type5.getClassName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        boolean boolean13 = type5.equals((java.lang.Object) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        propertyDescriptor3.setValue("", (java.lang.Object) strArray14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("float");
        propertyDescriptor3.setDisplayName("double");
        propertyDescriptor3.setName("float");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "byte" + "'", str9, "byte");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byte" + "'", str10, "byte");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        propertyDescriptor3.setDisplayName("L(DBBBD)V;");
        propertyDescriptor3.setExpert(false);
        java.lang.String str14 = propertyDescriptor3.getName();
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(DBBBD)V;" + "'", str15, "L(DBBBD)V;");
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method11);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.Object obj7 = propertyDescriptor3.getValue("float");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("hi!", method8, method9);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor10.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = classInfo14.getType();
        boolean boolean16 = signature2.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type[] typeArray17 = classInfo14.getInterfaces();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!B" + "'", str5, "hi!B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java/beans/PropertyDescriptor" + "'", str12, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str13, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setName("B");
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        boolean boolean18 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration19);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        boolean boolean14 = signature2.equals((java.lang.Object) strArray13);
        java.lang.String str15 = signature2.getDescriptor();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method26 = null;
        propertyDescriptor19.setReadMethod(method26);
        propertyDescriptor19.setDisplayName("");
        boolean boolean30 = signature2.equals((java.lang.Object) "");
        org.mockito.asm.Type type31 = signature2.getReturnType();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor35.getClass();
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type38 = classInfo37.getType();
        boolean boolean39 = signature2.equals((java.lang.Object) classInfo37);
        java.lang.String str40 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B" + "'", str15, "B");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        org.mockito.asm.Type[] typeArray26 = classInfo18.getInterfaces();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("(DBBBD)V", method28, method29);
        propertyDescriptor30.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean33 = classInfo18.equals((java.lang.Object) propertyDescriptor30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        boolean boolean7 = signature2.equals((java.lang.Object) 10.0d);
        java.lang.String str8 = signature2.getName();
        java.lang.String str9 = signature2.getName();
        java.lang.String str10 = signature2.getName();
        java.lang.String str11 = signature2.getName();
        java.lang.Class<?> wildcardClass12 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list16 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass12, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setBound(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor14.createPropertyEditor((java.lang.Object) str38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        propertyDescriptor43.setValue("double", (java.lang.Object) ' ');
        boolean boolean49 = propertyDescriptor43.isExpert();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        java.lang.Class<?> wildcardClass55 = propertyDescriptor54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        propertyDescriptor43.setValue("float", (java.lang.Object) wildcardClass55);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor43.getPropertyEditorClass();
        java.lang.reflect.Method method59 = propertyDescriptor43.getReadMethod();
        java.lang.reflect.Method method60 = propertyDescriptor43.getWriteMethod();
        boolean boolean61 = propertyDescriptor43.isHidden();
        java.beans.PropertyEditor propertyEditor62 = propertyDescriptor14.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        java.beans.PropertyEditor propertyEditor63 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        boolean boolean64 = propertyDescriptor43.isExpert();
        propertyDescriptor43.setName("java.beans.PropertyDescriptor[name=hi!; displayName=V; hidden; constrained]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java/beans/PropertyDescriptor" + "'", str38, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(propertyEditor62);
        org.junit.Assert.assertNull(propertyEditor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setHidden(true);
        boolean boolean23 = propertyDescriptor12.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        int int2 = type1.getSort();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Ljava/beans/FeatureDescriptor;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }; bound]");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; expert]()Ljava/beans/PropertyDescriptor;");
        java.lang.String str22 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }; bound]" + "'", str22, "java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }; bound]");
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass2, "Ljava/beans/PropertyDescriptor;", classArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Ljava/beans/PropertyDescriptor;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray62);
        java.lang.Class<?> wildcardClass64 = methodArray63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str67, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor13);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor13.getPropertyType();
        propertyDescriptor13.setHidden(false);
        java.lang.Object obj33 = propertyDescriptor13.getValue("floatLLorg/mockito/cglib/core/Signature;;(DBBBD)Ljava/lang/Object;");
        java.lang.Class<?> wildcardClass34 = propertyDescriptor13.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        int int14 = type13.getSort();
        java.lang.Class<?> wildcardClass15 = type13.getClass();
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.Class<?> wildcardClass20 = signature18.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass15, wildcardClass20 };
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.reflect.Method[] methodArray24 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray24);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray24);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray24);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        java.lang.Class<?> wildcardClass31 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, false);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray41);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str21, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass2, wildcardClass7 };
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type16 = signature15.getReturnType();
        java.lang.String str17 = signature15.getName();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        boolean boolean27 = signature15.equals((java.lang.Object) strArray26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.Class<?> wildcardClass32 = signature30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, false);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray36);
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        int int42 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()Ljava.beans.PropertyDescriptor[name=hi!];");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor9.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = classInfo11.getType();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type12);
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, false, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, false, false);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj17 = propertyDescriptor3.getValue("int");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("(DBBBD)B", method21, method22);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor23.setReadMethod(method24);
        propertyDescriptor23.setExpert(false);
        propertyDescriptor23.setBound(false);
        java.lang.Object obj31 = propertyDescriptor23.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        propertyDescriptor3.setValue("F(DBBBD)Ljava/lang/Object;", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.Object obj11 = propertyDescriptor3.getValue("va.lang.Object");
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=V]");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        java.lang.String str22 = propertyDescriptor19.getShortDescription();
        propertyDescriptor19.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor19.setShortDescription("float");
        propertyDescriptor19.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.String str35 = propertyDescriptor34.getShortDescription();
        java.lang.reflect.Method method36 = propertyDescriptor34.getWriteMethod();
        java.lang.String str37 = propertyDescriptor34.getShortDescription();
        boolean boolean38 = propertyDescriptor34.isPreferred();
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type43 = signature42.getReturnType();
        java.lang.String str44 = signature42.getName();
        org.mockito.asm.Type type45 = signature42.getReturnType();
        propertyDescriptor34.setValue("B", (java.lang.Object) type45);
        propertyDescriptor34.setShortDescription("byte");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass49);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        java.lang.Class<?> wildcardClass56 = propertyDescriptor55.getClass();
        org.mockito.cglib.core.ClassInfo classInfo57 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        java.lang.String str58 = classInfo57.toString();
        org.mockito.asm.Type type59 = classInfo57.getSuperType();
        boolean boolean60 = classInfo51.equals((java.lang.Object) classInfo57);
        org.mockito.asm.Type type61 = classInfo57.getType();
        org.mockito.asm.Type type62 = classInfo57.getSuperType();
        propertyDescriptor19.setValue("LLorg.mockito.cglib.core.Signature;;", (java.lang.Object) classInfo57);
        propertyDescriptor19.setHidden(true);
        java.lang.String str66 = propertyDescriptor19.getDisplayName();
        propertyDescriptor19.setPreferred(true);
        propertyDescriptor19.setBound(true);
        java.beans.PropertyEditor propertyEditor71 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor19);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.beans.PropertyDescriptor" + "'", str58, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNull(propertyEditor71);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()LLorg/mockito/cglib/core/Signature;");
        java.lang.String str2 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.cglib.core.Signature" + "'", str2, "Lorg.mockito.cglib.core.Signature");
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.String str7 = signature3.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        boolean boolean15 = signature3.equals((java.lang.Object) strArray14);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.Class<?> wildcardClass20 = signature18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, false);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) strArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        int int8 = classInfo7.getModifiers();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        java.lang.String str15 = propertyDescriptor12.getShortDescription();
        boolean boolean16 = propertyDescriptor12.isPreferred();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type21 = signature20.getReturnType();
        java.lang.String str22 = signature20.getName();
        org.mockito.asm.Type type23 = signature20.getReturnType();
        propertyDescriptor12.setValue("B", (java.lang.Object) type23);
        propertyDescriptor12.setShortDescription("byte");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        boolean boolean29 = classInfo7.equals((java.lang.Object) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str27, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        int int6 = type5.getSort();
        int int8 = type5.getOpcode(3);
        java.lang.String str9 = type5.getClassName();
        java.lang.String str10 = type5.getClassName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        boolean boolean13 = type5.equals((java.lang.Object) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        propertyDescriptor3.setValue("", (java.lang.Object) strArray14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("float");
        propertyDescriptor3.setDisplayName("double");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; expert; values={()L!;=Lorg/mockito/cglib/core/Signature;}]");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "byte" + "'", str9, "byte");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byte" + "'", str10, "byte");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("g.mockito.cglib.core.Signature", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(DBBBD)V; displayName=java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]; propertyEditorClass=class org.mockito.asm.Type]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj11 = null;
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor(obj11);
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setShortDescription("(DBBBD)LbyteB;");
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(DBBBD)B", method18, method19);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor20.setReadMethod(method21);
        propertyDescriptor20.setExpert(false);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor20.setWriteMethod(method25);
        boolean boolean27 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor20);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setName("");
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("LbyteB;", method1, method2);
        propertyDescriptor3.setHidden(false);
        boolean boolean6 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        boolean boolean13 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list6 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass2, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setName("B");
        java.lang.String str13 = propertyDescriptor3.getName();
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "B" + "'", str13, "B");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getDisplayName();
        boolean boolean15 = classInfo7.equals((java.lang.Object) str14);
        org.mockito.asm.Type type16 = classInfo7.getSuperType();
        org.mockito.asm.Type type17 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray18 = classInfo7.getInterfaces();
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        java.lang.String str15 = propertyDescriptor12.getShortDescription();
        boolean boolean16 = propertyDescriptor12.isPreferred();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type21 = signature20.getReturnType();
        java.lang.String str22 = signature20.getName();
        org.mockito.asm.Type type23 = signature20.getReturnType();
        propertyDescriptor12.setValue("B", (java.lang.Object) type23);
        propertyDescriptor12.setShortDescription("double");
        propertyDescriptor12.setHidden(true);
        propertyDescriptor12.setPreferred(false);
        java.lang.String str31 = propertyDescriptor12.getShortDescription();
        propertyDescriptor3.setValue("java/lang/Object", (java.lang.Object) propertyDescriptor12);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor12.setWriteMethod(method33);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getShortDescription();
        java.lang.reflect.Method method29 = propertyDescriptor27.getWriteMethod();
        propertyDescriptor27.setValue("double", (java.lang.Object) ' ');
        boolean boolean33 = propertyDescriptor27.isExpert();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor38.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        propertyDescriptor27.setValue("float", (java.lang.Object) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method46 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass15, "Ljava/lang/Object;", classArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Ljava/lang/Object;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java/beans/PropertyDescriptor" + "'", str40, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java/beans/PropertyDescriptor" + "'", str42, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("Ljava/beans/FeatureDescriptor;", method2, method3);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.Class<?> wildcardClass10 = signature8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        propertyDescriptor4.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) classInfo13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.String str20 = signature18.getName();
        org.mockito.asm.Type type21 = signature18.getReturnType();
        java.lang.String str22 = signature18.getDescriptor();
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        boolean boolean30 = signature18.equals((java.lang.Object) strArray29);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        java.lang.Class<?> wildcardClass35 = signature33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, false);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray39);
        boolean boolean41 = classInfo13.equals((java.lang.Object) methodArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "B" + "'", str22, "B");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]", "java.lang.Objectorg.mockito.cglib.core.Signature");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str3, "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]java.lang.Objectorg.mockito.cglib.core.Signature" + "'", str4, "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]java.lang.Objectorg.mockito.cglib.core.Signature");
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]; expert]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("float", "LLorg/mockito/cglib/core/Signature;;");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.String str7 = signature5.getName();
        org.mockito.asm.Type type8 = signature5.getReturnType();
        java.lang.String str9 = signature5.getDescriptor();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        boolean boolean17 = signature5.equals((java.lang.Object) strArray16);
        java.lang.String str18 = signature5.getDescriptor();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method29 = null;
        propertyDescriptor22.setReadMethod(method29);
        propertyDescriptor22.setDisplayName("");
        boolean boolean33 = signature5.equals((java.lang.Object) "");
        java.lang.String str34 = signature5.getName();
        boolean boolean35 = signature2.equals((java.lang.Object) signature5);
        java.lang.String str36 = signature2.toString();
        java.lang.String str37 = signature2.getDescriptor();
        java.lang.String str38 = signature2.getDescriptor();
        java.lang.String str39 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "B" + "'", str9, "B");
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "floatLLorg/mockito/cglib/core/Signature;;" + "'", str36, "floatLLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str37, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str38, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str39, "LLorg/mockito/cglib/core/Signature;;");
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setDisplayName("float");
        propertyDescriptor3.setName("B");
        propertyDescriptor3.setShortDescription("hi!(DBBBD)F");
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.String str21 = propertyDescriptor3.getName();
        boolean boolean22 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        int int17 = type14.getOpcode(3);
        java.lang.String str18 = type14.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type12, type14, type19, type21, type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type11, type27, type30, type32, type33 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        int int43 = type40.getOpcode(3);
        java.lang.String str44 = type40.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type38, type40, type45, type47, type49 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray51);
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type3, typeArray51);
        org.mockito.asm.Type type56 = type3.getElementType();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        java.lang.String str61 = propertyDescriptor60.getShortDescription();
        java.lang.reflect.Method method62 = propertyDescriptor60.getWriteMethod();
        propertyDescriptor60.setValue("double", (java.lang.Object) ' ');
        boolean boolean66 = propertyDescriptor60.isExpert();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        java.lang.Class<?> wildcardClass72 = propertyDescriptor71.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        propertyDescriptor60.setValue("float", (java.lang.Object) wildcardClass72);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass72);
        int int76 = classInfo75.getModifiers();
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        java.beans.PropertyDescriptor propertyDescriptor80 = new java.beans.PropertyDescriptor("hi!", method78, method79);
        java.lang.String str81 = propertyDescriptor80.getShortDescription();
        java.lang.reflect.Method method82 = propertyDescriptor80.getWriteMethod();
        propertyDescriptor80.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean86 = classInfo75.equals((java.lang.Object) propertyDescriptor80);
        int int87 = classInfo75.getModifiers();
        org.mockito.asm.Type[] typeArray88 = classInfo75.getInterfaces();
        boolean boolean90 = classInfo75.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type91 = classInfo75.getSuperType();
        org.mockito.asm.Type[] typeArray92 = classInfo75.getInterfaces();
        org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("float", type56, typeArray92);
        java.lang.String str94 = signature93.getName();
        org.mockito.asm.Type type95 = signature93.getReturnType();
        int int96 = type95.getSort();
        java.lang.String str97 = type95.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lhi!;" + "'", str6, "Lhi!;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "double" + "'", str13, "double");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "byte" + "'", str18, "byte");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "double" + "'", str24, "double");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(DBBBD)V" + "'", str26, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lhi!;" + "'", str31, "Lhi!;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "double" + "'", str34, "double");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(VBLhi!;SD)B" + "'", str36, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "double" + "'", str50, "double");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)V" + "'", str52, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)B" + "'", str53, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(DBBBD)Lhi!;" + "'", str54, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java/beans/PropertyDescriptor" + "'", str73, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNull(method82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "float" + "'", str94, "float");
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "L!;" + "'", str97, "L!;");
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        java.lang.Object obj16 = propertyDescriptor3.getValue("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; preferred];");
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        org.mockito.asm.Type type22 = classInfo19.getSuperType();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        java.lang.String str24 = classInfo19.toString();
        org.mockito.asm.Type[] typeArray25 = classInfo19.getInterfaces();
        java.lang.String str26 = classInfo19.toString();
        java.lang.String str27 = classInfo19.toString();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=V]");
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.String str34 = propertyDescriptor33.getShortDescription();
        java.lang.reflect.Method method35 = propertyDescriptor33.getWriteMethod();
        propertyDescriptor33.setBound(false);
        java.lang.reflect.Method method38 = propertyDescriptor33.getWriteMethod();
        java.lang.String str39 = propertyDescriptor33.getName();
        java.lang.String str40 = propertyDescriptor33.getDisplayName();
        boolean boolean41 = type29.equals((java.lang.Object) propertyDescriptor33);
        boolean boolean42 = classInfo19.equals((java.lang.Object) propertyDescriptor33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("()Ljava/lang/Object;");
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("hi!LLorg/mockito/cglib/core/Signature;;");
        boolean boolean25 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.toString();
        org.mockito.asm.Type type7 = signature2.getReturnType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        propertyDescriptor11.setValue("double", (java.lang.Object) ' ');
        boolean boolean17 = propertyDescriptor11.isExpert();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        propertyDescriptor11.setValue("float", (java.lang.Object) wildcardClass23);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor11.getPropertyEditorClass();
        java.lang.Object obj28 = propertyDescriptor11.getValue("LLorg/mockito/cglib/core/Signature;;");
        java.lang.String str29 = propertyDescriptor11.getShortDescription();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        int int32 = classInfo31.getModifiers();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        propertyDescriptor36.setValue("double", (java.lang.Object) ' ');
        boolean boolean42 = propertyDescriptor36.isExpert();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor47.getClass();
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        propertyDescriptor36.setValue("float", (java.lang.Object) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        int int52 = classInfo51.getModifiers();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        java.lang.String str57 = propertyDescriptor56.getShortDescription();
        java.lang.reflect.Method method58 = propertyDescriptor56.getWriteMethod();
        propertyDescriptor56.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean62 = classInfo51.equals((java.lang.Object) propertyDescriptor56);
        int int63 = classInfo51.getModifiers();
        org.mockito.asm.Type[] typeArray64 = classInfo51.getInterfaces();
        boolean boolean66 = classInfo51.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type67 = classInfo51.getSuperType();
        org.mockito.asm.Type type68 = classInfo51.getSuperType();
        org.mockito.asm.Type type69 = classInfo51.getSuperType();
        org.mockito.asm.Type type70 = classInfo51.getType();
        org.mockito.asm.Type type71 = classInfo51.getType();
        int int72 = classInfo51.getModifiers();
        org.mockito.asm.Type type73 = classInfo51.getSuperType();
        boolean boolean74 = classInfo31.equals((java.lang.Object) classInfo51);
        boolean boolean75 = signature2.equals((java.lang.Object) classInfo51);
        java.lang.Class<?> wildcardClass76 = classInfo51.getClass();
        java.lang.String str77 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!B" + "'", str6, "hi!B");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java/beans/PropertyDescriptor" + "'", str49, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNull(method58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/cglib/core/ReflectUtils$4" + "'", str77, "org/mockito/cglib/core/ReflectUtils$4");
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=V]", method1, method2);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; displayName=V; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("()Ljava.beans.PropertyDescriptor[name=(DBBBD)B];");
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setShortDescription("");
        propertyDescriptor12.setConstrained(true);
        propertyDescriptor12.setExpert(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor12.getPropertyType();
        propertyDescriptor12.setDisplayName("java.beans.PropertyDescriptor[name=hi!; preferred]");
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setValue("double", (java.lang.Object) ' ');
        boolean boolean37 = propertyDescriptor31.isExpert();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.Class<?> wildcardClass43 = propertyDescriptor42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        propertyDescriptor31.setValue("float", (java.lang.Object) wildcardClass43);
        java.lang.Class<?> wildcardClass46 = propertyDescriptor31.getPropertyEditorClass();
        java.lang.reflect.Method method47 = propertyDescriptor31.getReadMethod();
        java.lang.reflect.Method method48 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setPreferred(false);
        boolean boolean51 = propertyDescriptor31.isExpert();
        boolean boolean52 = propertyDescriptor31.isHidden();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        propertyDescriptor12.setValue("C(DBBBD)Lorg/mockito/cglib/core/Signature;", (java.lang.Object) wildcardClass53);
        java.beans.PropertyEditor propertyEditor56 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method57 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java/beans/PropertyDescriptor" + "'", str44, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(method47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNull(propertyEditor56);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setBound(true);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor13.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor13.setDisplayName("");
        boolean boolean23 = propertyDescriptor13.isExpert();
        propertyDescriptor13.setDisplayName("va.lang.Object");
        boolean boolean26 = propertyDescriptor3.equals((java.lang.Object) "va.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj15 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=double; values={double= }; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        boolean boolean10 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        propertyDescriptor3.setConstrained(true);
        boolean boolean19 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setName("org.mockito.cglib.core.Signature");
        java.lang.reflect.Method method27 = propertyDescriptor3.getWriteMethod();
        java.lang.String str28 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str28, "org.mockito.cglib.core.Signature");
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classArray22);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type type10 = classInfo7.getType();
        org.mockito.asm.Type type11 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray12 = classInfo7.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type16 = signature15.getReturnType();
        java.lang.Class<?> wildcardClass17 = signature15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type20 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray21 = classInfo19.getInterfaces();
        boolean boolean22 = classInfo7.equals((java.lang.Object) typeArray21);
        org.mockito.asm.Type type23 = classInfo7.getType();
        int int24 = type23.getSize();
        java.lang.String str25 = type23.getDescriptor();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!byteB", "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]" + "'", str3, "hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]" + "'", str4, "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Ljava/beans/FeatureDescriptor;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/FeatureDescriptor; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(propertyEditor26);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        propertyDescriptor3.setShortDescription("(DBBBD)Lhi!;");
        boolean boolean17 = propertyDescriptor3.isExpert();
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.Object obj20 = propertyDescriptor3.getValue("g/mockito/cglib/core/Signature");
        propertyDescriptor3.setConstrained(false);
        java.lang.String str23 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(DBBBD)Lhi!;" + "'", str23, "(DBBBD)Lhi!;");
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("double");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.String str20 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("voidlong");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str13, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj8 = propertyDescriptor3.getValue("hi!byteB");
        propertyDescriptor3.setName("Ljava/beans/FeatureDescriptor;");
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str11, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj8 = propertyDescriptor3.getValue("hi!byteB");
        propertyDescriptor3.setName("Lhi!;");
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; expert; values={()L!;=Lorg/mockito/cglib/core/Signature;}]", method1, method2);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(true);
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setDisplayName("float");
        propertyDescriptor3.setName("B");
        propertyDescriptor3.setShortDescription("hi!(DBBBD)F");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.String str19 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getDescriptor();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        int int22 = type19.getOpcode(3);
        java.lang.String str23 = type19.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type17, type19, type24, type26, type28 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        int int33 = type32.getSize();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str36 = type35.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type16, type32, type35, type37, type38 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        int int48 = type45.getOpcode(3);
        java.lang.String str49 = type45.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type43, type45, type50, type52, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray56);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("", type8, typeArray56);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        int int64 = type61.getOpcode(3);
        java.lang.String str65 = type61.getClassName();
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type69 = signature68.getReturnType();
        java.lang.String str70 = signature68.getName();
        boolean boolean71 = type61.equals((java.lang.Object) signature68);
        boolean boolean72 = signature60.equals((java.lang.Object) signature68);
        java.lang.reflect.Method method74 = null;
        java.lang.reflect.Method method75 = null;
        java.beans.PropertyDescriptor propertyDescriptor76 = new java.beans.PropertyDescriptor("hi!", method74, method75);
        java.lang.String str77 = propertyDescriptor76.getShortDescription();
        java.lang.reflect.Method method78 = propertyDescriptor76.getWriteMethod();
        propertyDescriptor76.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor76.setShortDescription("");
        propertyDescriptor76.setConstrained(true);
        boolean boolean86 = signature68.equals((java.lang.Object) true);
        java.lang.String str87 = signature68.getName();
        java.lang.String str88 = signature68.getDescriptor();
        java.lang.String str89 = signature68.toString();
        java.lang.String str90 = signature68.getDescriptor();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lhi!;" + "'", str11, "Lhi!;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "double" + "'", str18, "double");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "double" + "'", str29, "double");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(DBBBD)V" + "'", str31, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lhi!;" + "'", str36, "Lhi!;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(VBLhi!;SD)B" + "'", str41, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "double" + "'", str44, "double");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "byte" + "'", str49, "byte");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)B" + "'", str58, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)Lhi!;" + "'", str59, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(method78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "B" + "'", str88, "B");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!B" + "'", str89, "hi!B");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "B" + "'", str90, "B");
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lhi!;float", method1, method2);
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("Lorg/mockito/cglib/core/Signature;", method9, method10);
        boolean boolean12 = signature6.equals((java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.String str13 = signature6.getName();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature6);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(propertyEditor14);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()J", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("g.mockito.cglib.core.Signature", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setBound(false);
        java.lang.Object obj10 = propertyDescriptor3.getValue("Ljava/lang/Object;()Lhi!;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "g.mockito.cglib.core.Signature" + "'", str4, "g.mockito.cglib.core.Signature");
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        java.lang.String str19 = propertyDescriptor16.getDisplayName();
        boolean boolean20 = propertyDescriptor16.isPreferred();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor16.getPropertyType();
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor16);
        java.lang.String str23 = propertyDescriptor16.getShortDescription();
        java.lang.String str24 = propertyDescriptor16.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(propertyEditor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str24, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("org.mockito.asm.Type");
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setName("()Ljava/lang/Object;");
        boolean boolean19 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "double" + "'", str14, "double");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getDisplayName();
        boolean boolean20 = propertyDescriptor18.isHidden();
        propertyDescriptor18.setHidden(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor18.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        boolean boolean6 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("hi!");
        boolean boolean9 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj18 = propertyDescriptor3.getValue("byte");
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setExpert(false);
        boolean boolean25 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = classInfo9.getType();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setDisplayName("hi!byteB");
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setValue("double", (java.lang.Object) ' ');
        boolean boolean20 = propertyDescriptor14.isExpert();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        propertyDescriptor14.setValue("float", (java.lang.Object) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type type35 = signature32.getReturnType();
        boolean boolean36 = classInfo29.equals((java.lang.Object) type35);
        java.lang.String str37 = classInfo29.toString();
        org.mockito.asm.Type type38 = classInfo29.getSuperType();
        org.mockito.asm.Type[] typeArray39 = classInfo29.getInterfaces();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor", (java.lang.Object) classInfo29);
        org.mockito.asm.Type[] typeArray41 = classInfo29.getInterfaces();
        int int42 = classInfo29.getModifiers();
        org.mockito.asm.Type type43 = classInfo29.getSuperType();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method45, method46);
        java.lang.reflect.Method method48 = propertyDescriptor47.getReadMethod();
        propertyDescriptor47.setConstrained(true);
        java.lang.String str51 = propertyDescriptor47.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration52 = propertyDescriptor47.attributeNames();
        boolean boolean53 = classInfo29.equals((java.lang.Object) propertyDescriptor47);
        java.lang.Class<?> wildcardClass54 = propertyDescriptor47.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor" + "'", str37, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.beans.PropertyDescriptor" + "'", str51, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(strEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(wildcardClass54);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Ljava.beans.PropertyDescriptor[name=B];");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type type31 = classInfo18.getSuperType();
        java.lang.String str32 = classInfo18.toString();
        org.mockito.asm.Type type33 = classInfo18.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor" + "'", str32, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type33);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = classInfo6.getSuperType();
        java.lang.String str8 = type7.getInternalName();
        java.lang.String str9 = type7.getInternalName();
        java.lang.String str10 = type7.getInternalName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str18 = type17.getDescriptor();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        int int29 = type26.getOpcode(3);
        java.lang.String str30 = type26.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        int int32 = type31.getSort();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type24, type26, type31, type33, type35 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        int int40 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str43 = type42.getDescriptor();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type23, type39, type42, type44, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        int int55 = type52.getOpcode(3);
        java.lang.String str56 = type52.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        int int58 = type57.getSort();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type50, type52, type57, type59, type61 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray63);
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type15, typeArray63);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray63);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray63);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray63);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        java.lang.Class<?> wildcardClass73 = classArray70.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/lang/Object" + "'", str8, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/lang/Object" + "'", str9, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/lang/Object" + "'", str10, "java/lang/Object");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lhi!;" + "'", str18, "Lhi!;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "double" + "'", str25, "double");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "byte" + "'", str30, "byte");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "double" + "'", str36, "double");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(DBBBD)V" + "'", str38, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lhi!;" + "'", str43, "Lhi!;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(VBLhi!;SD)B" + "'", str48, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "double" + "'", str51, "double");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "byte" + "'", str56, "byte");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "double" + "'", str62, "double");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(DBBBD)V" + "'", str64, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(DBBBD)B" + "'", str65, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(DBBBD)Lhi!;" + "'", str66, "(DBBBD)Lhi!;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;" + "'", str68, "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(DBBBD)Ljava/lang/Object;" + "'", str69, "(DBBBD)Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(true);
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        int int8 = type7.getSort();
        int int10 = type7.getOpcode(3);
        java.lang.String str11 = type7.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        int int13 = type12.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type5, type7, type12, type14, type16 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type4, type20, type23, type25, type26 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray44);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        java.lang.String str51 = propertyDescriptor50.getShortDescription();
        java.lang.reflect.Method method52 = propertyDescriptor50.getWriteMethod();
        propertyDescriptor50.setValue("double", (java.lang.Object) ' ');
        boolean boolean56 = propertyDescriptor50.isExpert();
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("hi!", method59, method60);
        java.lang.Class<?> wildcardClass62 = propertyDescriptor61.getClass();
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        propertyDescriptor50.setValue("float", (java.lang.Object) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type69 = signature68.getReturnType();
        java.lang.String str70 = signature68.getName();
        org.mockito.asm.Type type71 = signature68.getReturnType();
        boolean boolean72 = classInfo65.equals((java.lang.Object) type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        int int77 = type76.getSort();
        int int79 = type76.getOpcode(3);
        java.lang.String str80 = type76.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BYTE_TYPE;
        int int82 = type81.getSort();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BYTE_TYPE;
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type74, type76, type81, type83, type85 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray87);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray87);
        int int91 = type3.getSort();
        java.lang.Object obj92 = null;
        boolean boolean93 = type3.equals(obj92);
        int int94 = type3.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = type3.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "double" + "'", str6, "double");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "byte" + "'", str11, "byte");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "double" + "'", str17, "double");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(DBBBD)V" + "'", str19, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lhi!;" + "'", str24, "Lhi!;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "double" + "'", str27, "double");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(VBLhi!;SD)B" + "'", str29, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(DBBBD)B" + "'", str46, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(method52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java/beans/PropertyDescriptor" + "'", str63, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "double" + "'", str75, "double");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "byte" + "'", str80, "byte");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "double" + "'", str86, "double");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(DBBBD)V" + "'", str88, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(DBBBD)B" + "'", str89, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(DBBBD)B" + "'", str90, "(DBBBD)B");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.String str9 = propertyDescriptor8.getShortDescription();
        java.lang.reflect.Method method10 = propertyDescriptor8.getWriteMethod();
        java.lang.String str11 = propertyDescriptor8.getShortDescription();
        propertyDescriptor8.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor8.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor8.attributeNames();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor8.setWriteMethod(method18);
        java.lang.reflect.Method method20 = propertyDescriptor8.getWriteMethod();
        java.lang.reflect.Method method21 = propertyDescriptor8.getWriteMethod();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass26);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type34 = classInfo33.getType();
        java.lang.String str35 = classInfo33.toString();
        org.mockito.asm.Type type36 = classInfo33.getSuperType();
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor8.createPropertyEditor((java.lang.Object) type36);
        boolean boolean38 = signature2.equals((java.lang.Object) type36);
        org.mockito.asm.Type type39 = signature2.getReturnType();
        java.lang.String str40 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!B" + "'", str4, "hi!B");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str29, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor" + "'", str35, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        org.mockito.asm.Type type35 = classInfo18.getSuperType();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        org.mockito.asm.Type type37 = classInfo18.getType();
        org.mockito.asm.Type type38 = classInfo18.getType();
        java.lang.Class<?> wildcardClass39 = classInfo18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        java.lang.String str45 = propertyDescriptor44.getDisplayName();
        boolean boolean46 = propertyDescriptor44.isHidden();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor44.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, false, true);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, false);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray55);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method24 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(method24);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans.PropertyDescriptor[name=(DBBBD)B]");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        propertyDescriptor9.setValue("double", (java.lang.Object) ' ');
        boolean boolean15 = propertyDescriptor9.isExpert();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor20.getClass();
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        propertyDescriptor9.setValue("float", (java.lang.Object) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        int int25 = classInfo24.getModifiers();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.String str30 = propertyDescriptor29.getShortDescription();
        java.lang.reflect.Method method31 = propertyDescriptor29.getWriteMethod();
        propertyDescriptor29.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean35 = classInfo24.equals((java.lang.Object) propertyDescriptor29);
        int int36 = classInfo24.getModifiers();
        org.mockito.asm.Type[] typeArray37 = classInfo24.getInterfaces();
        boolean boolean39 = classInfo24.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type40 = classInfo24.getType();
        java.lang.String str41 = type40.getInternalName();
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type45 = signature44.getReturnType();
        java.lang.Class<?> wildcardClass46 = signature44.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass46);
        boolean boolean48 = type40.equals((java.lang.Object) propertyDescriptorArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor51 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass2, classArray49);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=byte; shortDescription=java.beans.PropertyDescriptor[name=hi!]; values={byte=0}]", "Ljava/util/Hashtable$Enumerator;");
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor23.getPropertyEditorClass();
        java.lang.reflect.Method method31 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setConstrained(false);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor23.getPropertyType();
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type38 = signature37.getReturnType();
        java.lang.Class<?> wildcardClass39 = signature37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        java.lang.String str47 = propertyDescriptor46.getShortDescription();
        java.lang.reflect.Method method48 = propertyDescriptor46.getWriteMethod();
        java.lang.String str49 = propertyDescriptor46.getDisplayName();
        boolean boolean50 = classInfo42.equals((java.lang.Object) str49);
        java.lang.String str51 = classInfo42.toString();
        java.beans.PropertyEditor propertyEditor52 = propertyDescriptor23.createPropertyEditor((java.lang.Object) classInfo42);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str51, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNull(propertyEditor52);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor13);
        propertyDescriptor3.setName("(DBBBD)B");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("float()L!;");
        java.lang.reflect.Method method34 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass40);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, true);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]](DBBBD)Ljava/beans/PropertyDescriptor;", (java.lang.Object) strArray56);
        propertyDescriptor3.setHidden(true);
        java.lang.Object obj61 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={double= }; constrained]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()Ljava.beans.PropertyDescriptor[name=B];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()F");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("DBBBD)Lhi!");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method29 = propertyDescriptor3.getWriteMethod();
        boolean boolean30 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method31 = propertyDescriptor3.getReadMethod();
        java.lang.String str32 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}]" + "'", str32, "java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}]");
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={byte=0}; constrained]");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.getDescriptor();
        int int5 = type1.getOpcode(109);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str2, "Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str3, "Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 113 + "'", int5 == 113);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) -1 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; values={byte=0}; constrained]", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, -1]");
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo2 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(classInfo2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        org.mockito.asm.Type type21 = classInfo19.getType();
        int int22 = classInfo19.getModifiers();
        int int23 = classInfo19.getModifiers();
        java.lang.String str24 = classInfo19.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.Object obj12 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setPreferred(true);
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(strEnumeration15);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        boolean boolean14 = signature2.equals((java.lang.Object) strArray13);
        java.lang.String str15 = signature2.getDescriptor();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method26 = null;
        propertyDescriptor19.setReadMethod(method26);
        propertyDescriptor19.setDisplayName("");
        boolean boolean30 = signature2.equals((java.lang.Object) "");
        java.lang.String str31 = signature2.getName();
        java.lang.String str32 = signature2.getDescriptor();
        java.lang.String str33 = signature2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray34 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B" + "'", str15, "B");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "B" + "'", str32, "B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!B" + "'", str33, "hi!B");
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getDescriptor();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        int int22 = type19.getOpcode(3);
        java.lang.String str23 = type19.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type17, type19, type24, type26, type28 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        int int33 = type32.getSize();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str36 = type35.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type16, type32, type35, type37, type38 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        int int48 = type45.getOpcode(3);
        java.lang.String str49 = type45.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type43, type45, type50, type52, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray56);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("", type8, typeArray56);
        org.mockito.asm.Type type61 = signature60.getReturnType();
        org.mockito.asm.Type[] typeArray62 = signature60.getArgumentTypes();
        org.mockito.asm.Type[] typeArray63 = signature60.getArgumentTypes();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lhi!;" + "'", str11, "Lhi!;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "double" + "'", str18, "double");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "double" + "'", str29, "double");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(DBBBD)V" + "'", str31, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lhi!;" + "'", str36, "Lhi!;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(VBLhi!;SD)B" + "'", str41, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "double" + "'", str44, "double");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "byte" + "'", str49, "byte");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)B" + "'", str58, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)Lhi!;" + "'", str59, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Lhi!;float");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("(DBBBD)Ljava/lang/Object;");
        java.lang.String str20 = propertyDescriptor3.getDisplayName();
        boolean boolean21 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        java.lang.reflect.Method method26 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method26);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        java.lang.String str26 = propertyDescriptor23.getShortDescription();
        propertyDescriptor23.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        java.lang.reflect.Method method31 = null;
        propertyDescriptor23.setReadMethod(method31);
        propertyDescriptor23.setShortDescription("(DBBBD)V");
        propertyDescriptor3.setValue("hi!byteB", (java.lang.Object) propertyDescriptor23);
        java.lang.reflect.Method method36 = null;
        propertyDescriptor23.setReadMethod(method36);
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass41 = signature40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor23.createPropertyEditor((java.lang.Object) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNull(propertyEditor43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("byteB", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.Object obj8 = propertyDescriptor3.getValue("Ljava.beans.PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byteB" + "'", str4, "byteB");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.String str18 = propertyDescriptor17.getDisplayName();
        boolean boolean19 = propertyDescriptor17.isHidden();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.reflect.Method method21 = propertyDescriptor17.getReadMethod();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method26 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "LZ;", classArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: LZ;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, false, false);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray31);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava.beans.PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = type10.getElementType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        java.lang.String str18 = propertyDescriptor15.getShortDescription();
        boolean boolean19 = propertyDescriptor15.isPreferred();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type24 = signature23.getReturnType();
        java.lang.String str25 = signature23.getName();
        org.mockito.asm.Type type26 = signature23.getReturnType();
        propertyDescriptor15.setValue("B", (java.lang.Object) type26);
        propertyDescriptor15.setShortDescription("byte");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = classInfo32.getType();
        org.mockito.asm.Type[] typeArray34 = classInfo32.getInterfaces();
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={B=B}]]", type11, typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = classInfo6.getType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("Lorg/mockito/cglib/core/Signature;");
        java.lang.String str11 = type10.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        int int23 = type22.getSort();
        int int25 = type22.getOpcode(3);
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSort();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type20, type22, type27, type29, type31 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        int int36 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str39 = type38.getDescriptor();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type19, type35, type38, type40, type41 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        int int51 = type48.getOpcode(3);
        java.lang.String str52 = type48.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type46, type48, type53, type55, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray59);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type10, typeArray59);
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("double", type7, typeArray59);
        java.lang.Object obj65 = null;
        boolean boolean66 = signature64.equals(obj65);
        org.mockito.asm.Type type67 = signature64.getReturnType();
        org.mockito.asm.Type[] typeArray68 = signature64.getArgumentTypes();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str11, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lhi!;" + "'", str14, "Lhi!;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "byte" + "'", str26, "byte");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(DBBBD)V" + "'", str34, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lhi!;" + "'", str39, "Lhi!;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "double" + "'", str42, "double");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(VBLhi!;SD)B" + "'", str44, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "byte" + "'", str52, "byte");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)V" + "'", str60, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)B" + "'", str61, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(DBBBD)Lhi!;" + "'", str62, "(DBBBD)Lhi!;");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("LLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setExpert(false);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str14, "LLorg/mockito/cglib/core/Signature;;");
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.Class<?> wildcardClass11 = signature9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type6, typeArray14);
        org.mockito.asm.Type[] typeArray16 = signature15.getArgumentTypes();
        java.lang.String str17 = signature15.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Ljava/lang/Object;()Lorg/mockito/cglib/core/Signature;" + "'", str17, "Ljava/lang/Object;()Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setShortDescription("(DBBBD)Ljava/beans/PropertyDescriptor;");
        boolean boolean21 = propertyDescriptor3.isHidden();
        java.lang.String str22 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        boolean boolean18 = propertyDescriptor16.isPreferred();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor16.setWriteMethod(method19);
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor16.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor16.setPreferred(false);
        propertyDescriptor16.setConstrained(false);
        propertyDescriptor16.setBound(false);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.String str34 = propertyDescriptor33.getShortDescription();
        java.lang.reflect.Method method35 = propertyDescriptor33.getWriteMethod();
        java.lang.String str36 = propertyDescriptor33.getShortDescription();
        propertyDescriptor33.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor33.setExpert(false);
        propertyDescriptor33.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor33.setHidden(true);
        propertyDescriptor33.setHidden(false);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor33.getPropertyEditorClass();
        propertyDescriptor16.setValue("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", (java.lang.Object) propertyDescriptor33);
        propertyDescriptor33.setName("byte");
        propertyDescriptor33.setConstrained(true);
        java.beans.PropertyEditor propertyEditor54 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method57 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(propertyEditor22);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNull(propertyEditor54);
        org.junit.Assert.assertNull(method57);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("org/mockito/cglib/core/Signature");
        java.lang.Object obj18 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("va/beans/PropertyDescriptor", "java.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type]");
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass2, wildcardClass7 };
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type16 = signature15.getReturnType();
        java.lang.String str17 = signature15.getName();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        boolean boolean27 = signature15.equals((java.lang.Object) strArray26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.Class<?> wildcardClass32 = signature30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, false);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray36);
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        int int42 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        java.lang.Class<?> wildcardClass47 = type45.getClass();
        org.mockito.cglib.core.Signature signature50 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type51 = signature50.getReturnType();
        java.lang.Class<?> wildcardClass52 = signature50.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass47, wildcardClass52 };
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type59 = signature58.getReturnType();
        java.lang.Class<?> wildcardClass60 = signature58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray65);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray65);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str53, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setConstrained(true);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("()Lhi!byteBfloat;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(strEnumeration10);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("hi!", method8, method9);
        java.lang.String str11 = propertyDescriptor10.getShortDescription();
        java.lang.reflect.Method method12 = propertyDescriptor10.getWriteMethod();
        java.lang.String str13 = propertyDescriptor10.getShortDescription();
        propertyDescriptor10.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor10.setExpert(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setBound(false);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor10.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        propertyDescriptor10.setShortDescription("hi!");
        boolean boolean30 = signature3.equals((java.lang.Object) "hi!");
        java.lang.String str31 = signature3.getDescriptor();
        org.mockito.asm.Type type32 = signature3.getReturnType();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type37 = signature36.getReturnType();
        java.lang.Class<?> wildcardClass38 = signature36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = classInfo40.getSuperType();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str44 = type43.getDescriptor();
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type48 = signature47.getReturnType();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        int int55 = type52.getOpcode(3);
        java.lang.String str56 = type52.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        int int58 = type57.getSort();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type50, type52, type57, type59, type61 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        int int66 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str69 = type68.getDescriptor();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type49, type65, type68, type70, type71 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BYTE_TYPE;
        int int79 = type78.getSort();
        int int81 = type78.getOpcode(3);
        java.lang.String str82 = type78.getClassName();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BYTE_TYPE;
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BYTE_TYPE;
        int int86 = type85.getSort();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str88 = type87.getClassName();
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type76, type78, type83, type85, type87 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray89);
        org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("", type41, typeArray89);
        org.mockito.cglib.core.Signature signature94 = new org.mockito.cglib.core.Signature("va.lang.Object", type32, typeArray89);
        java.lang.Class<?> wildcardClass95 = typeArray89.getClass();
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list97 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lhi!;" + "'", str44, "Lhi!;");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "double" + "'", str51, "double");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "byte" + "'", str56, "byte");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "double" + "'", str62, "double");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(DBBBD)V" + "'", str64, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lhi!;" + "'", str69, "Lhi!;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "double" + "'", str72, "double");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(VBLhi!;SD)B" + "'", str74, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "double" + "'", str77, "double");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "byte" + "'", str82, "byte");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "double" + "'", str88, "double");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(DBBBD)V" + "'", str90, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(DBBBD)B" + "'", str91, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(DBBBD)Lhi!;" + "'", str92, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Lva.beans.PropertyDescriptor[name=hi!;", method1, method2);
        propertyDescriptor3.setShortDescription("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getReturnType("()Ljava.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor];");
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "()Ljava.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor];");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(propertyEditor8);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        propertyDescriptor3.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        boolean boolean10 = propertyDescriptor3.isExpert();
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(DBBBD)B" + "'", str11, "(DBBBD)B");
        org.junit.Assert.assertNull(method12);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        int int3 = type0.getOpcode(3);
        java.lang.String str4 = type0.getClassName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.String str9 = signature7.getName();
        boolean boolean10 = type0.equals((java.lang.Object) signature7);
        java.lang.String str11 = type0.getClassName();
        java.lang.Class<?> wildcardClass12 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byte" + "'", str4, "byte");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "byte" + "'", str11, "byte");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setReadMethod(method17);
        boolean boolean19 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()B");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        propertyDescriptor5.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        propertyDescriptor5.setName("double");
        propertyDescriptor5.setExpert(false);
        propertyDescriptor5.setShortDescription("F");
        boolean boolean17 = type1.equals((java.lang.Object) "F");
        int int18 = type1.getSort();
        int int19 = type1.getSort();
        int int20 = type1.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type21 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method24 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method27 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method30 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method31 = null;
        propertyDescriptor3.setWriteMethod(method31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(method30);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type12 = classInfo11.getType();
        int int13 = classInfo11.getModifiers();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass16 = signature14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = classInfo18.getSuperType();
        java.lang.String str20 = type19.getInternalName();
        java.lang.String str21 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        int int41 = type38.getOpcode(3);
        java.lang.String str42 = type38.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type36, type38, type43, type45, type47 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str55 = type54.getDescriptor();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type35, type51, type54, type56, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        int int67 = type64.getOpcode(3);
        java.lang.String str68 = type64.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BYTE_TYPE;
        int int70 = type69.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type62, type64, type69, type71, type73 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray75);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type27, typeArray75);
        org.mockito.cglib.core.Signature signature80 = new org.mockito.cglib.core.Signature("hi!", type23, typeArray75);
        org.mockito.cglib.core.Signature signature81 = new org.mockito.cglib.core.Signature("F", type19, typeArray75);
        java.beans.PropertyEditor propertyEditor82 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature81);
        org.mockito.asm.Type type83 = signature81.getReturnType();
        org.mockito.asm.Type[] typeArray84 = signature81.getArgumentTypes();
        org.mockito.asm.Type type85 = signature81.getReturnType();
        int int86 = type85.getSort();
        java.lang.String str87 = type85.getDescriptor();
        java.lang.String str88 = type85.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/lang/Object" + "'", str20, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Object" + "'", str21, "java.lang.Object");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "double" + "'", str37, "double");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "byte" + "'", str42, "byte");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "double" + "'", str48, "double");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)V" + "'", str50, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lhi!;" + "'", str55, "Lhi!;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(VBLhi!;SD)B" + "'", str60, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "byte" + "'", str68, "byte");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "double" + "'", str74, "double");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(DBBBD)V" + "'", str76, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(DBBBD)B" + "'", str77, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(DBBBD)Lhi!;" + "'", str78, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNull(propertyEditor82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Ljava/lang/Object;" + "'", str87, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Ljava/lang/Object;" + "'", str88, "Ljava/lang/Object;");
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        int int51 = type1.getSort();
        int int52 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor; expert]", "()Lorg/mockito/cglib/core/ReflectUtils$4;");
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        java.lang.String str9 = type8.getInternalName();
        java.lang.String str10 = type8.getClassName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setValue("double", (java.lang.Object) ' ');
        boolean boolean20 = propertyDescriptor14.isExpert();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        propertyDescriptor14.setValue("float", (java.lang.Object) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type type35 = signature32.getReturnType();
        boolean boolean36 = classInfo29.equals((java.lang.Object) type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        int int43 = type40.getOpcode(3);
        java.lang.String str44 = type40.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type38, type40, type45, type47, type49 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.Signature", type8, typeArray51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        boolean boolean57 = signature54.equals((java.lang.Object) type56);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("hi!", method59, method60);
        java.lang.String str62 = propertyDescriptor61.getDisplayName();
        boolean boolean63 = propertyDescriptor61.isHidden();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor61.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        boolean boolean70 = type56.equals((java.lang.Object) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/lang/Object" + "'", str9, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Object" + "'", str10, "java.lang.Object");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "double" + "'", str50, "double");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)V" + "'", str52, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)B" + "'", str53, "(DBBBD)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java/beans/PropertyDescriptor" + "'", str66, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(classInfo72);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byte", "B");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        int int8 = type7.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        int int23 = type22.getSort();
        int int25 = type22.getOpcode(3);
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSort();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type20, type22, type27, type29, type31 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        int int36 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str39 = type38.getDescriptor();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type19, type35, type38, type40, type41 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        int int51 = type48.getOpcode(3);
        java.lang.String str52 = type48.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type46, type48, type53, type55, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray59);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type11, typeArray59);
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("hi!", type7, typeArray59);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        int int67 = type65.getOpcode((int) (byte) 0);
        int int68 = type65.getSort();
        int int70 = type65.getOpcode((int) (short) 100);
        java.lang.String str71 = type65.toString();
        boolean boolean72 = signature64.equals((java.lang.Object) str71);
        org.mockito.asm.Type[] typeArray73 = signature64.getArgumentTypes();
        org.mockito.asm.Type[] typeArray74 = signature64.getArgumentTypes();
        boolean boolean75 = signature2.equals((java.lang.Object) signature64);
        org.mockito.asm.Type[] typeArray76 = signature64.getArgumentTypes();
        java.lang.String str77 = signature64.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byteB" + "'", str3, "byteB");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byteB" + "'", str5, "byteB");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lhi!;" + "'", str14, "Lhi!;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "byte" + "'", str26, "byte");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(DBBBD)V" + "'", str34, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lhi!;" + "'", str39, "Lhi!;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "double" + "'", str42, "double");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(VBLhi!;SD)B" + "'", str44, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "byte" + "'", str52, "byte");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)V" + "'", str60, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)B" + "'", str61, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(DBBBD)Lhi!;" + "'", str62, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 102 + "'", int70 == 102);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "F" + "'", str71, "F");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!(DBBBD)F" + "'", str77, "hi!(DBBBD)F");
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        boolean boolean18 = propertyDescriptor12.isExpert();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor12.setReadMethod(method19);
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor12.attributeNames();
        java.lang.reflect.Method method22 = null;
        propertyDescriptor12.setWriteMethod(method22);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor12.setReadMethod(method24);
        java.lang.String str26 = propertyDescriptor12.getName();
        propertyDescriptor12.setHidden(false);
        boolean boolean29 = type8.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }; bound]; displayName=java.beans.PropertyDescriptor[name=hi!; expert]()Ljava/beans/PropertyDescriptor;; values={byte=0}; bound]");
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, false);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(classArray5);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setDisplayName("org.mockito.cglib.core.Signature");
        java.lang.String str23 = propertyDescriptor12.getDisplayName();
        boolean boolean24 = propertyDescriptor12.isExpert();
        java.lang.String str25 = propertyDescriptor12.getName();
        java.lang.reflect.Method method26 = propertyDescriptor12.getReadMethod();
        propertyDescriptor12.setName("java.beans.PropertyDescriptor[name=hi!; displayName=()Lorg.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;;; values={java.beans.PropertyDescriptor[name=hi!]=0}; bound]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str23, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor13);
        propertyDescriptor3.setName("(DBBBD)B");
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.String str36 = propertyDescriptor35.getDisplayName();
        boolean boolean37 = propertyDescriptor35.isHidden();
        propertyDescriptor35.setHidden(false);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        java.lang.String str45 = propertyDescriptor44.getShortDescription();
        java.lang.reflect.Method method46 = propertyDescriptor44.getWriteMethod();
        propertyDescriptor44.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor44.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor35.setValue("byte", (java.lang.Object) propertyDescriptor44);
        java.lang.Class<?> wildcardClass53 = propertyDescriptor35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass53);
        java.beans.PropertyEditor propertyEditor55 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass53);
        propertyDescriptor3.setName("java.lang.Object(DBBBD)C");
        java.lang.Object obj59 = propertyDescriptor3.getValue("LZ;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(method46);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNull(propertyEditor55);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getDisplayName();
        boolean boolean18 = classInfo10.equals((java.lang.Object) str17);
        org.mockito.asm.Type[] typeArray19 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", type2, typeArray19);
        java.lang.String str21 = signature20.getName();
        java.lang.String str22 = signature20.toString();
        org.mockito.asm.Type type23 = signature20.getReturnType();
        java.lang.String str24 = signature20.toString();
        java.lang.Class<?> wildcardClass25 = signature20.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method26 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str22, "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str24, "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!B()B");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setHidden(true);
        java.lang.reflect.Method method23 = propertyDescriptor12.getReadMethod();
        java.lang.reflect.Method method24 = propertyDescriptor12.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(method24);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("()Lorg.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;;");
        int int3 = type2.getSort();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        java.lang.String str8 = propertyDescriptor7.getShortDescription();
        java.lang.reflect.Method method9 = propertyDescriptor7.getWriteMethod();
        propertyDescriptor7.setValue("double", (java.lang.Object) ' ');
        boolean boolean13 = propertyDescriptor7.isExpert();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        propertyDescriptor7.setValue("float", (java.lang.Object) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        boolean boolean27 = type2.equals((java.lang.Object) classInfo26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]", "(VBLhi!;SD)B");
        java.lang.String str31 = signature30.toString();
        org.mockito.asm.Type[] typeArray32 = signature30.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]()B", type2, typeArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]()B' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/beans/PropertyDescriptor" + "'", str20, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B" + "'", str31, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(typeArray32);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]" + "'", str17, "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=byte; shortDescription=java.beans.PropertyDescriptor[name=hi!]; values={byte=0}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lhi!;float", "java.beans.PropertyDescriptor[name=hi!; displayName=void; values={byte=0}]");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        boolean boolean8 = propertyDescriptor6.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor6.setWriteMethod(method9);
        propertyDescriptor6.setPreferred(true);
        java.lang.Object obj14 = propertyDescriptor6.getValue("()Ljava/beans/PropertyDescriptor;");
        java.lang.String str15 = propertyDescriptor6.getShortDescription();
        boolean boolean16 = signature2.equals((java.lang.Object) propertyDescriptor6);
        org.mockito.asm.Type type17 = signature2.getReturnType();
        java.lang.String str18 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=void; values={byte=0}]" + "'", str18, "java.beans.PropertyDescriptor[name=hi!; displayName=void; values={byte=0}]");
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        java.lang.String str26 = classInfo18.toString();
        org.mockito.asm.Type type27 = classInfo18.getSuperType();
        org.mockito.asm.Type type28 = classInfo18.getSuperType();
        org.mockito.asm.Type type29 = classInfo18.getType();
        int int30 = type29.getDimensions();
        org.mockito.asm.Type type31 = type29.getElementType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.String str18 = propertyDescriptor3.getName();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        java.lang.String str25 = propertyDescriptor22.getShortDescription();
        propertyDescriptor22.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor22.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        boolean boolean32 = propertyDescriptor22.isExpert();
        java.lang.Object obj34 = propertyDescriptor22.getValue("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]doublejava.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; values={byte=0}]; values={B=B}]");
        boolean boolean35 = propertyDescriptor22.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("Lhi!;float");
        propertyDescriptor3.setDisplayName("Lhi!;float");
        java.lang.Object obj21 = propertyDescriptor3.getValue("org/mockito/asm/Type");
        boolean boolean22 = propertyDescriptor3.isPreferred();
        java.lang.String str23 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=Lhi!;float; displayName=Lhi!;float; values={byte=0}]" + "'", str23, "java.beans.PropertyDescriptor[name=Lhi!;float; displayName=Lhi!;float; values={byte=0}]");
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.Class<?> wildcardClass13 = signature11.getClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.Class<?> wildcardClass23 = signature21.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass23 };
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray24);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.Class<?> wildcardClass28 = classArray24.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        int int30 = type29.getSort();
        java.lang.Class<?> wildcardClass31 = type29.getClass();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.Class<?> wildcardClass36 = signature34.getClass();
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        java.lang.Class[] classArray38 = new java.lang.Class[] { wildcardClass31, wildcardClass36 };
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        int int47 = type45.getOpcode((int) (byte) 0);
        int int48 = type45.getSort();
        int int50 = type45.getOpcode((int) (short) 100);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type54 = signature53.getReturnType();
        java.lang.Class<?> wildcardClass55 = signature53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.cglib.core.ClassInfo classInfo57 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = classInfo57.getSuperType();
        org.mockito.asm.Type type59 = classInfo57.getType();
        org.mockito.asm.Type[] typeArray60 = classInfo57.getInterfaces();
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass28, classArray38, (java.lang.Object[]) typeArray60);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>(org.mockito.asm.Type, org.mockito.cglib.core.Signature)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str37, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "()F" + "'", str61, "()F");
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        java.lang.Class<?> wildcardClass21 = type19.getClass();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.Class<?> wildcardClass26 = signature24.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass21, wildcardClass26 };
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        int int32 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray28);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor34 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray28);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(org.mockito.asm.Type, org.mockito.cglib.core.Signature)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str27, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=double; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=double; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("Ljava/beans/FeatureDescriptor;", method10, method11);
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type17 = signature16.getReturnType();
        java.lang.Class<?> wildcardClass18 = signature16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type[] typeArray22 = classInfo21.getInterfaces();
        propertyDescriptor12.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) classInfo21);
        org.mockito.asm.Type type24 = classInfo21.getType();
        org.mockito.asm.Type type25 = classInfo21.getType();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        java.lang.Class<?> wildcardClass30 = signature28.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = classInfo33.getSuperType();
        org.mockito.asm.Type[] typeArray35 = classInfo33.getInterfaces();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type25, typeArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray35);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray37);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(3);
        java.lang.String str5 = type1.getClassName();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.String str10 = signature8.getName();
        boolean boolean11 = type1.equals((java.lang.Object) signature8);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = classInfo31.getType();
        int int33 = classInfo31.getModifiers();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("java/lang/Object", type1, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byte" + "'", str5, "byte");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass19 = strEnumeration18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classArray21);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=(DBBBD)B]; shortDescription=(DBBBD)LZ;]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setShortDescription("Lhi!;");
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lhi!;" + "'", str13, "Lhi!;");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}; propertyEditorClass=class java.beans.PropertyDescriptor]", method1, method2);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}; bound; propertyEditorClass=class org.mockito.cglib.core.Signature]");
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str13, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("LLorg/mockito/cglib/core/Signature;;");
        java.lang.reflect.Method method26 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(method26);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.mockito.asm.Type type31 = classInfo26.getType();
        org.mockito.asm.Type type32 = classInfo26.getType();
        org.mockito.asm.Type[] typeArray33 = classInfo26.getInterfaces();
        org.mockito.asm.Type type34 = classInfo26.getSuperType();
        int int35 = classInfo26.getModifiers();
        org.mockito.asm.Type type36 = classInfo26.getType();
        int int37 = classInfo26.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        java.lang.String str7 = propertyDescriptor4.getShortDescription();
        boolean boolean8 = propertyDescriptor4.isPreferred();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.String str14 = signature12.getName();
        org.mockito.asm.Type type15 = signature12.getReturnType();
        propertyDescriptor4.setValue("B", (java.lang.Object) type15);
        int int17 = type15.getSize();
        int int18 = type15.getSort();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        int int38 = classInfo37.getModifiers();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.String str43 = propertyDescriptor42.getShortDescription();
        java.lang.reflect.Method method44 = propertyDescriptor42.getWriteMethod();
        propertyDescriptor42.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean48 = classInfo37.equals((java.lang.Object) propertyDescriptor42);
        int int49 = classInfo37.getModifiers();
        org.mockito.asm.Type[] typeArray50 = classInfo37.getInterfaces();
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("hi!B", type15, typeArray50);
        org.mockito.asm.Type[] typeArray52 = signature51.getArgumentTypes();
        java.lang.String str53 = signature51.getDescriptor();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor57.getClass();
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        boolean boolean63 = signature51.equals((java.lang.Object) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNull(method44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "()B" + "'", str53, "()B");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str60, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classInfo64);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("LS;");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("va.lang.Object");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(true);
        boolean boolean21 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        java.lang.String str21 = propertyDescriptor18.getShortDescription();
        propertyDescriptor18.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor18.setConstrained(false);
        propertyDescriptor18.setHidden(false);
        propertyDescriptor18.setExpert(true);
        boolean boolean31 = propertyDescriptor18.isPreferred();
        java.lang.String str32 = propertyDescriptor18.getDisplayName();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];]", (java.lang.Object) propertyDescriptor18);
        propertyDescriptor18.setDisplayName("L()B;");
        propertyDescriptor18.setShortDescription("java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.String str38 = propertyDescriptor18.getShortDescription();
        propertyDescriptor18.setConstrained(true);
        java.lang.reflect.Method method41 = propertyDescriptor18.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;; propertyEditorClass=class java.beans.PropertyDescriptor]" + "'", str38, "java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNull(method41);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/beans/PropertyDescriptor;");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java/beans/PropertyDescriptor" + "'", str2, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]; propertyEditorClass=class java.beans.PropertyDescriptor]", "java.beans.PropertyDescriptor[name=hi!; expert; values={double= ; float=class java.beans.PropertyDescriptor}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        boolean boolean6 = type1.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;" + "'", str2, "Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!]()B");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setBound(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor14.createPropertyEditor((java.lang.Object) str38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        propertyDescriptor43.setValue("double", (java.lang.Object) ' ');
        boolean boolean49 = propertyDescriptor43.isExpert();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        java.lang.Class<?> wildcardClass55 = propertyDescriptor54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        propertyDescriptor43.setValue("float", (java.lang.Object) wildcardClass55);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor43.getPropertyEditorClass();
        java.lang.reflect.Method method59 = propertyDescriptor43.getReadMethod();
        java.lang.reflect.Method method60 = propertyDescriptor43.getWriteMethod();
        boolean boolean61 = propertyDescriptor43.isHidden();
        java.beans.PropertyEditor propertyEditor62 = propertyDescriptor14.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        java.beans.PropertyEditor propertyEditor63 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor43);
        java.lang.Class<?> wildcardClass64 = propertyDescriptor43.getPropertyEditorClass();
        boolean boolean65 = propertyDescriptor43.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java/beans/PropertyDescriptor" + "'", str38, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(propertyEditor62);
        org.junit.Assert.assertNull(propertyEditor63);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("D", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "D" + "'", str7, "D");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration9);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        org.mockito.asm.Type[] typeArray35 = classInfo18.getInterfaces();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        java.lang.String str43 = propertyDescriptor40.getShortDescription();
        boolean boolean44 = propertyDescriptor40.isPreferred();
        java.lang.reflect.Method method45 = null;
        propertyDescriptor40.setReadMethod(method45);
        java.lang.reflect.Method method47 = null;
        propertyDescriptor40.setReadMethod(method47);
        boolean boolean49 = type36.equals((java.lang.Object) propertyDescriptor40);
        propertyDescriptor40.setExpert(false);
        java.lang.Class<?> wildcardClass52 = propertyDescriptor40.getPropertyType();
        propertyDescriptor40.setExpert(true);
        boolean boolean55 = propertyDescriptor40.isPreferred();
        propertyDescriptor40.setShortDescription("g.mockito.cglib.core.Signature");
        java.lang.String str58 = propertyDescriptor40.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        java.lang.String str12 = propertyDescriptor9.getShortDescription();
        boolean boolean13 = propertyDescriptor9.isPreferred();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        java.lang.String str19 = signature17.getName();
        org.mockito.asm.Type type20 = signature17.getReturnType();
        propertyDescriptor9.setValue("B", (java.lang.Object) type20);
        propertyDescriptor9.setShortDescription("byte");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        java.lang.String str33 = classInfo32.toString();
        org.mockito.asm.Type type34 = classInfo32.getSuperType();
        boolean boolean35 = classInfo26.equals((java.lang.Object) classInfo32);
        org.mockito.asm.Type type36 = classInfo32.getType();
        org.mockito.asm.Type type37 = classInfo32.getType();
        org.mockito.asm.Type type38 = classInfo32.getType();
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type38);
        propertyDescriptor3.setConstrained(false);
        boolean boolean42 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]java.lang.Objectorg.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) -1, (byte) 0 };
        java.lang.ClassLoader classLoader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; preferred; values={double= ; float=class java.beans.PropertyDescriptor}]java.lang.Objectorg.mockito.cglib.core.Signature", byteArray7, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 1, 1, 0, -1, 0]");
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("()Lhi!byteBfloat;", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setShortDescription("hi!");
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getDimensions();
        org.mockito.asm.Type type23 = type20.getElementType();
        java.lang.Object obj24 = null;
        boolean boolean25 = type23.equals(obj24);
        org.mockito.asm.Type type26 = type23.getElementType();
        java.lang.String str27 = type26.getDescriptor();
        int int28 = type26.getDimensions();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "L/beans/PropertyDescriptor;" + "'", str27, "L/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = classInfo5.getType();
        int int8 = type6.getOpcode(5);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        boolean boolean18 = propertyDescriptor12.isExpert();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        propertyDescriptor12.setValue("float", (java.lang.Object) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        int int28 = classInfo27.getModifiers();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.String str33 = propertyDescriptor32.getShortDescription();
        java.lang.reflect.Method method34 = propertyDescriptor32.getWriteMethod();
        propertyDescriptor32.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean38 = classInfo27.equals((java.lang.Object) propertyDescriptor32);
        int int39 = classInfo27.getModifiers();
        org.mockito.asm.Type[] typeArray40 = classInfo27.getInterfaces();
        org.mockito.asm.Type type41 = classInfo27.getType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        int int48 = type45.getOpcode(3);
        java.lang.String str49 = type45.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type43, type45, type50, type52, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray56);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type62 = signature61.getReturnType();
        java.lang.Class<?> wildcardClass63 = signature61.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean69 = classInfo66.equals((java.lang.Object) type68);
        java.lang.String str70 = classInfo66.toString();
        org.mockito.asm.Type[] typeArray71 = classInfo66.getInterfaces();
        org.mockito.asm.Type type72 = classInfo66.getType();
        org.mockito.asm.Type[] typeArray73 = classInfo66.getInterfaces();
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray73);
        org.mockito.asm.Type type76 = type6.getElementType();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "double" + "'", str44, "double");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "byte" + "'", str49, "byte");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str58, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str70, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str74, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str75, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type76);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setName("java/beans/PropertyDescriptor");
        java.lang.String str24 = propertyDescriptor12.getName();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor12.getClass();
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list27 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass25, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str7, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("D");
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = method11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "D" + "'", str7, "D");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNull(method11);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type[] typeArray11 = classInfo7.getInterfaces();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str15 = signature14.getName();
        java.lang.String str16 = signature14.toString();
        java.lang.String str17 = signature14.toString();
        java.lang.String str18 = signature14.getDescriptor();
        boolean boolean19 = classInfo7.equals((java.lang.Object) signature14);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("double", (java.lang.Object) ' ');
        boolean boolean29 = propertyDescriptor23.isExpert();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.Class<?> wildcardClass35 = propertyDescriptor34.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass35);
        propertyDescriptor23.setValue("float", (java.lang.Object) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        int int39 = classInfo38.getModifiers();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        propertyDescriptor43.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean49 = classInfo38.equals((java.lang.Object) propertyDescriptor43);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor43.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration51 = propertyDescriptor43.attributeNames();
        propertyDescriptor43.setConstrained(false);
        boolean boolean54 = classInfo7.equals((java.lang.Object) propertyDescriptor43);
        org.mockito.asm.Type type55 = classInfo7.getSuperType();
        org.mockito.asm.Type type56 = classInfo7.getSuperType();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!B" + "'", str16, "hi!B");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!B" + "'", str17, "hi!B");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/beans/PropertyDescriptor" + "'", str36, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(strEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("LLorg.mockito.cglib.core.Signature;;");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        boolean boolean30 = propertyDescriptor26.isPreferred();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        propertyDescriptor26.setValue("B", (java.lang.Object) type37);
        propertyDescriptor26.setShortDescription("byte");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = classInfo43.getType();
        java.lang.String str45 = type44.getInternalName();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type44);
        java.util.Enumeration<java.lang.String> strEnumeration47 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method48 = propertyDescriptor3.getReadMethod();
        java.lang.String str49 = propertyDescriptor3.getName();
        java.lang.String str50 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(strEnumeration47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(DBBBD)Lva/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("byteB");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.toString();
        int int4 = type1.getSize();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type[] typeArray12 = classInfo11.getInterfaces();
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray12);
        java.lang.String str14 = type1.getDescriptor();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = classInfo20.getType();
        int int23 = type21.getOpcode(5);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getShortDescription();
        java.lang.reflect.Method method29 = propertyDescriptor27.getWriteMethod();
        propertyDescriptor27.setValue("double", (java.lang.Object) ' ');
        boolean boolean33 = propertyDescriptor27.isExpert();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor38.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        propertyDescriptor27.setValue("float", (java.lang.Object) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        int int43 = classInfo42.getModifiers();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.String str48 = propertyDescriptor47.getShortDescription();
        java.lang.reflect.Method method49 = propertyDescriptor47.getWriteMethod();
        propertyDescriptor47.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean53 = classInfo42.equals((java.lang.Object) propertyDescriptor47);
        int int54 = classInfo42.getModifiers();
        org.mockito.asm.Type[] typeArray55 = classInfo42.getInterfaces();
        org.mockito.asm.Type type56 = classInfo42.getType();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        int int61 = type60.getSort();
        int int63 = type60.getOpcode(3);
        java.lang.String str64 = type60.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        int int66 = type65.getSort();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        int int68 = type67.getSort();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type58, type60, type65, type67, type69 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray71);
        org.mockito.cglib.core.Signature signature76 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type77 = signature76.getReturnType();
        java.lang.Class<?> wildcardClass78 = signature76.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass78);
        org.mockito.cglib.core.ClassInfo classInfo80 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass78);
        org.mockito.cglib.core.ClassInfo classInfo81 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean84 = classInfo81.equals((java.lang.Object) type83);
        java.lang.String str85 = classInfo81.toString();
        org.mockito.asm.Type[] typeArray86 = classInfo81.getInterfaces();
        org.mockito.asm.Type type87 = classInfo81.getType();
        org.mockito.asm.Type[] typeArray88 = classInfo81.getInterfaces();
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray88);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray88);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray88);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LbyteB;" + "'", str3, "LbyteB;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "()LbyteB;" + "'", str13, "()LbyteB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LbyteB;" + "'", str14, "LbyteB;");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java/beans/PropertyDescriptor" + "'", str40, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "double" + "'", str59, "double");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "byte" + "'", str64, "byte");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "double" + "'", str70, "double");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(DBBBD)V" + "'", str72, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str73, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(classInfo81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str85, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str89, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str90, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "()LbyteB;" + "'", str91, "()LbyteB;");
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setValue("java.lang.Object", (java.lang.Object) 10.0d);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; preferred]]");
        int int11 = type10.getSize();
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(propertyEditor12);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 10);
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        propertyDescriptor18.setValue("double", (java.lang.Object) ' ');
        boolean boolean24 = propertyDescriptor18.isExpert();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor29.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        propertyDescriptor18.setValue("float", (java.lang.Object) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        int int34 = classInfo33.getModifiers();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.String str39 = propertyDescriptor38.getShortDescription();
        java.lang.reflect.Method method40 = propertyDescriptor38.getWriteMethod();
        propertyDescriptor38.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean44 = classInfo33.equals((java.lang.Object) propertyDescriptor38);
        int int45 = classInfo33.getModifiers();
        org.mockito.asm.Type[] typeArray46 = classInfo33.getInterfaces();
        boolean boolean48 = classInfo33.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type49 = classInfo33.getType();
        java.lang.String str50 = type49.getInternalName();
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type54 = signature53.getReturnType();
        java.lang.Class<?> wildcardClass55 = signature53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        boolean boolean57 = type49.equals((java.lang.Object) propertyDescriptorArray56);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        propertyDescriptor3.setValue("(DBBBD)F", (java.lang.Object) propertyDescriptorArray56);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass64 = propertyDescriptor3.getClass();
        java.util.List list65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list66 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass64, list65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java/beans/PropertyDescriptor" + "'", str31, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java/beans/PropertyDescriptor" + "'", str50, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor3.attributeNames();
        boolean boolean22 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(true);
        boolean boolean21 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(DBBBD)Llong;");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type3 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Llong;" + "'", str2, "Llong;");
        org.junit.Assert.assertNotNull(type3);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}]", "(DBBBD)Lhi!;");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        java.lang.reflect.Method method8 = propertyDescriptor6.getWriteMethod();
        java.lang.String str9 = propertyDescriptor6.getShortDescription();
        propertyDescriptor6.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor6.setPreferred(false);
        boolean boolean15 = propertyDescriptor6.isPreferred();
        boolean boolean16 = propertyDescriptor6.isExpert();
        boolean boolean17 = signature2.equals((java.lang.Object) propertyDescriptor6);
        java.lang.Object obj19 = propertyDescriptor6.getValue("java.beans.PropertyDescriptor[name=byteB; constrained]");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor6.getPropertyType();
        propertyDescriptor6.setPreferred(false);
        java.lang.String str23 = propertyDescriptor6.getDisplayName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        propertyDescriptor3.setDisplayName("[Ljava/lang/Class;");
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("org/mockito/cglib/core/Signature");
        java.lang.Object obj18 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setDisplayName("LLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setHidden(true);
        java.util.Enumeration<java.lang.String> strEnumeration25 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strEnumeration25);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("java/beans/PropertyDescriptor");
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]; displayName=byteB; values={double= ; float=class java.beans.PropertyDescriptor}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type13 = type12.getElementType();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str9, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str10, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(DBBBD)B; expert]", method1, method2);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getDisplayName();
        boolean boolean13 = propertyDescriptor11.isHidden();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass19);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str7, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str17, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray62);
        java.lang.Class<?> wildcardClass64 = methodArray63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.lang.Class[] classArray66 = new java.lang.Class[] {};
        int int67 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray66);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray66);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray66);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray66);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        java.lang.String[] strArray74 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor75 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass64, classArray70);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        int int9 = type8.getSort();
        java.lang.String str10 = type8.getDescriptor();
        java.lang.String str11 = type8.getClassName();
        java.lang.String str12 = type8.getDescriptor();
        java.lang.String str13 = type8.getInternalName();
        propertyDescriptor3.setValue("(DBBBD)F", (java.lang.Object) str13);
        propertyDescriptor3.setDisplayName("LLorg/mockito/cglib/core/Signature;;");
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor" + "'", str11, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java/beans/PropertyDescriptor" + "'", str13, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str17, "LLorg/mockito/cglib/core/Signature;;");
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setBound(true);
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.toString();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]", method5, method6);
        java.lang.Object obj9 = propertyDescriptor7.getValue("ava.beans.PropertyDescriptor[name=hi!");
        boolean boolean10 = signature2.equals((java.lang.Object) propertyDescriptor7);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getPropertyType();
        java.lang.String str12 = propertyDescriptor7.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor7.setReadMethod(method13);
        java.lang.String str15 = propertyDescriptor7.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor7.getReadMethod();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!B" + "'", str3, "hi!B");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str12, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str15, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]");
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(DBBBD)Lhi!;]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!byteB", "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        java.lang.String str3 = signature2.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int5 = type4.getSort();
        java.lang.String str6 = type4.getClassName();
        int int7 = type4.getSort();
        boolean boolean8 = signature2.equals((java.lang.Object) int7);
        org.mockito.asm.Type type9 = signature2.getReturnType();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        java.lang.String str16 = propertyDescriptor13.getShortDescription();
        propertyDescriptor13.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor13.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean22 = propertyDescriptor13.isExpert();
        propertyDescriptor13.setHidden(false);
        java.lang.String str25 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor13.getReadMethod();
        propertyDescriptor13.setExpert(true);
        java.lang.reflect.Method method29 = propertyDescriptor13.getReadMethod();
        boolean boolean30 = signature2.equals((java.lang.Object) method29);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]" + "'", str3, "java.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "double" + "'", str6, "double");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str25, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        int int25 = type23.getOpcode(0);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSort();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.String str33 = propertyDescriptor32.getShortDescription();
        java.lang.reflect.Method method34 = propertyDescriptor32.getWriteMethod();
        java.lang.String str35 = propertyDescriptor32.getShortDescription();
        propertyDescriptor32.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method39 = null;
        propertyDescriptor32.setReadMethod(method39);
        java.lang.Object obj42 = propertyDescriptor32.getValue("java/beans/PropertyDescriptor");
        boolean boolean43 = type27.equals((java.lang.Object) "java/beans/PropertyDescriptor");
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor47.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type54 = signature53.getReturnType();
        java.lang.String str55 = signature53.getName();
        org.mockito.asm.Type type56 = signature53.getReturnType();
        java.lang.String str57 = signature53.getDescriptor();
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        boolean boolean65 = signature53.equals((java.lang.Object) strArray64);
        java.lang.String str66 = signature53.getDescriptor();
        org.mockito.asm.Type type67 = signature53.getReturnType();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        int int72 = type71.getSort();
        int int74 = type71.getOpcode(3);
        java.lang.String str75 = type71.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        int int77 = type76.getSort();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BYTE_TYPE;
        int int79 = type78.getSort();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type69, type71, type76, type78, type80 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray82);
        org.mockito.cglib.core.Signature signature84 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type67, typeArray82);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray82);
        org.mockito.cglib.core.Signature signature86 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", type27, typeArray82);
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("V", type23, typeArray82);
        int int88 = type23.getDimensions();
        java.lang.String str89 = type23.getInternalName();
        org.mockito.asm.Type type90 = type23.getElementType();
        boolean boolean91 = type20.equals((java.lang.Object) type23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "B" + "'", str57, "B");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "B" + "'", str66, "B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "double" + "'", str70, "double");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "byte" + "'", str75, "byte");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "double" + "'", str81, "double");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(DBBBD)V" + "'", str83, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str85, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java/beans/PropertyDescriptor" + "'", str89, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = classInfo20.getType();
        org.mockito.asm.Type type22 = classInfo20.getSuperType();
        int int23 = classInfo20.getModifiers();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        int int26 = type24.getOpcode((int) (short) 10);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        propertyDescriptor30.setValue("double", (java.lang.Object) ' ');
        boolean boolean36 = propertyDescriptor30.isExpert();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        java.lang.Class<?> wildcardClass42 = propertyDescriptor41.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        propertyDescriptor30.setValue("float", (java.lang.Object) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type49 = signature48.getReturnType();
        java.lang.String str50 = signature48.getName();
        org.mockito.asm.Type type51 = signature48.getReturnType();
        boolean boolean52 = classInfo45.equals((java.lang.Object) type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        int int57 = type56.getSort();
        int int59 = type56.getOpcode(3);
        java.lang.String str60 = type56.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        int int64 = type63.getSort();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type54, type56, type61, type63, type65 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray67);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray67);
        java.lang.String str71 = type24.toString();
        boolean boolean72 = classInfo20.equals((java.lang.Object) str71);
        java.lang.String str73 = classInfo20.toString();
        org.mockito.asm.Type type74 = classInfo20.getType();
        int int75 = classInfo20.getModifiers();
        org.mockito.asm.Type[] typeArray76 = classInfo20.getInterfaces();
        java.lang.String str77 = classInfo20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java/beans/PropertyDescriptor" + "'", str43, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "byte" + "'", str60, "byte");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "double" + "'", str66, "double");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(DBBBD)V" + "'", str68, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(DBBBD)B" + "'", str69, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(DBBBD)V" + "'", str70, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "V" + "'", str71, "V");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.beans.PropertyDescriptor" + "'", str73, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.beans.PropertyDescriptor" + "'", str77, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list10 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        java.lang.String str35 = classInfo18.toString();
        java.lang.Object obj36 = null;
        boolean boolean37 = classInfo18.equals(obj36);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor" + "'", str35, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("J", "java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "J" + "'", str3, "J");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]" + "'", str4, "java.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Jjava.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]" + "'", str5, "Jjava.beans.PropertyDescriptor[name=hi!; displayName=va.lang.Object; values={double= }]");
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        propertyDescriptor23.setDisplayName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        propertyDescriptor23.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor23.setConstrained(true);
        boolean boolean37 = propertyDescriptor23.isExpert();
        propertyDescriptor23.setPreferred(true);
        propertyDescriptor23.setName("Lhi!;float");
        java.lang.reflect.Method method42 = propertyDescriptor23.getWriteMethod();
        java.lang.String str43 = propertyDescriptor23.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]" + "'", str43, "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("double", "java/beans/PropertyDescriptor");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.getDescriptor();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        propertyDescriptor9.setValue("double", (java.lang.Object) ' ');
        java.lang.reflect.Method method15 = null;
        propertyDescriptor9.setWriteMethod(method15);
        java.lang.reflect.Method method17 = propertyDescriptor9.getReadMethod();
        boolean boolean18 = signature2.equals((java.lang.Object) propertyDescriptor9);
        propertyDescriptor9.setExpert(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "double" + "'", str3, "double");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "double" + "'", str4, "double");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor24.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        boolean boolean34 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("J");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; bound]");
        java.lang.String str39 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.String str18 = propertyDescriptor3.getName();
        boolean boolean19 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setWriteMethod(method22);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        java.lang.String str4 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "Ljava.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor];");
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.Object obj19 = null;
        boolean boolean20 = classInfo18.equals(obj19);
        org.mockito.asm.Type[] typeArray21 = classInfo18.getInterfaces();
        int int22 = classInfo18.getModifiers();
        java.lang.String str23 = classInfo18.toString();
        org.mockito.asm.Type[] typeArray24 = classInfo18.getInterfaces();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray24);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setReadMethod(method20);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "double" + "'", str17, "double");
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        java.lang.String str15 = signature11.getDescriptor();
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        boolean boolean23 = signature11.equals((java.lang.Object) strArray22);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("Ljava/beans/FeatureDescriptor;", method25, method26);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type32 = signature31.getReturnType();
        java.lang.Class<?> wildcardClass33 = signature31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type[] typeArray37 = classInfo36.getInterfaces();
        propertyDescriptor27.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) classInfo36);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type42 = signature41.getReturnType();
        java.lang.String str43 = signature41.getName();
        org.mockito.asm.Type type44 = signature41.getReturnType();
        java.lang.String str45 = signature41.getDescriptor();
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        boolean boolean53 = signature41.equals((java.lang.Object) strArray52);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, false);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray62);
        boolean boolean64 = classInfo36.equals((java.lang.Object) methodArray62);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        int int69 = type66.getOpcode(3);
        java.lang.String str70 = type66.getClassName();
        java.lang.String str71 = type66.getClassName();
        java.lang.Class[] classArray72 = new java.lang.Class[] {};
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray72);
        boolean boolean74 = type66.equals((java.lang.Object) classArray72);
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray72);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        int int77 = type76.getSort();
        java.lang.Class<?> wildcardClass78 = type76.getClass();
        org.mockito.cglib.core.Signature signature81 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type82 = signature81.getReturnType();
        java.lang.Class<?> wildcardClass83 = signature81.getClass();
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass83);
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass78, wildcardClass83 };
        java.lang.String[] strArray86 = org.mockito.cglib.core.ReflectUtils.getNames(classArray85);
        java.lang.reflect.Method[] methodArray87 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray86, methodArray87);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray75, methodArray87);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray87);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray22);
        java.lang.Class[] classArray92 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor93 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray91);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B" + "'", str15, "B");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "B" + "'", str45, "B");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "byte" + "'", str70, "byte");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "byte" + "'", str71, "byte");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str84, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int9 = type8.getSort();
        java.lang.String str10 = type8.getClassName();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getDescriptor();
        org.mockito.asm.Type type13 = type8.getElementType();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = classInfo20.getType();
        int int23 = type21.getOpcode(5);
        int int24 = type21.getSort();
        int int25 = type21.getDimensions();
        java.lang.String str26 = type21.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        int int29 = type27.getOpcode((int) (byte) 0);
        int int30 = type27.getSort();
        int int32 = type27.getOpcode((int) (short) 100);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type36 = signature35.getReturnType();
        java.lang.Class<?> wildcardClass37 = signature35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = classInfo39.getSuperType();
        org.mockito.asm.Type type41 = classInfo39.getType();
        org.mockito.asm.Type[] typeArray42 = classInfo39.getInterfaces();
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray42);
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("byteBLorg/mockito/cglib/core/Signature;", type21, typeArray42);
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("L)Ljava/lang/Object;", type13, typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str26, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 102 + "'", int32 == 102);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()F" + "'", str43, "()F");
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setConstrained(false);
        java.lang.String str29 = propertyDescriptor3.getName();
        boolean boolean30 = propertyDescriptor3.isExpert();
        java.lang.String str31 = propertyDescriptor3.getName();
        java.lang.reflect.Method method32 = null;
        propertyDescriptor3.setWriteMethod(method32);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.String str38 = propertyDescriptor37.getShortDescription();
        java.lang.reflect.Method method39 = propertyDescriptor37.getWriteMethod();
        propertyDescriptor37.setValue("double", (java.lang.Object) ' ');
        boolean boolean43 = propertyDescriptor37.isExpert();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        java.lang.Class<?> wildcardClass49 = propertyDescriptor48.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        propertyDescriptor37.setValue("float", (java.lang.Object) wildcardClass49);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        int int53 = classInfo52.getModifiers();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.String str58 = propertyDescriptor57.getShortDescription();
        java.lang.reflect.Method method59 = propertyDescriptor57.getWriteMethod();
        propertyDescriptor57.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean63 = classInfo52.equals((java.lang.Object) propertyDescriptor57);
        int int64 = classInfo52.getModifiers();
        org.mockito.asm.Type[] typeArray65 = classInfo52.getInterfaces();
        boolean boolean67 = classInfo52.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type68 = classInfo52.getSuperType();
        int int69 = type68.getSize();
        java.lang.String str70 = type68.getInternalName();
        boolean boolean71 = propertyDescriptor3.equals((java.lang.Object) type68);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java/beans/PropertyDescriptor" + "'", str50, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java/beans/FeatureDescriptor" + "'", str70, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("byteB", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str13);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("java/lang/Object");
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str13, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound; constrained]", "Z");
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.Object obj7 = propertyDescriptor3.getValue("float");
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("D");
        int int2 = type1.getSort();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor7 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass3, classArray6);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lorg/mockito/cglib/core/Signature;", method1, method2);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        boolean boolean19 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.Object obj10 = propertyDescriptor3.getValue("()B");
        propertyDescriptor3.setConstrained(false);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;; values={byte=0}]");
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type19 = signature18.getReturnType();
        java.lang.Class<?> wildcardClass20 = signature18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean26 = classInfo23.equals((java.lang.Object) type25);
        org.mockito.asm.Type type27 = classInfo23.getType();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        java.lang.String str34 = propertyDescriptor31.getShortDescription();
        boolean boolean35 = propertyDescriptor31.isPreferred();
        boolean boolean36 = propertyDescriptor31.isExpert();
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type40 = signature39.getReturnType();
        java.lang.Class<?> wildcardClass41 = signature39.getClass();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        java.lang.Class<?> wildcardClass46 = propertyDescriptor45.getClass();
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type50 = signature49.getReturnType();
        java.lang.Class<?> wildcardClass51 = signature49.getClass();
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass41, wildcardClass46, wildcardClass51 };
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        java.beans.PropertyEditor propertyEditor54 = propertyDescriptor31.createPropertyEditor((java.lang.Object) classArray52);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray52);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        boolean boolean58 = classInfo23.equals((java.lang.Object) classArray52);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.Class[] classArray60 = new java.lang.Class[] {};
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        int int64 = type63.getSort();
        java.lang.Class<?> wildcardClass65 = type63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass65);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray70);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray70);
        java.beans.PropertyEditor propertyEditor73 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray72);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(propertyEditor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNull(propertyEditor73);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("java.lang.Object");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        int int31 = classInfo30.getModifiers();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.String str36 = propertyDescriptor35.getShortDescription();
        java.lang.reflect.Method method37 = propertyDescriptor35.getWriteMethod();
        propertyDescriptor35.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean41 = classInfo30.equals((java.lang.Object) propertyDescriptor35);
        int int42 = classInfo30.getModifiers();
        org.mockito.asm.Type[] typeArray43 = classInfo30.getInterfaces();
        org.mockito.asm.Type type44 = classInfo30.getType();
        java.lang.String str45 = type44.toString();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor49.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass50);
        java.lang.String str52 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type54 = classInfo53.getType();
        org.mockito.asm.Type type55 = classInfo53.getType();
        org.mockito.asm.Type[] typeArray56 = classInfo53.getInterfaces();
        org.mockito.asm.Type[] typeArray57 = classInfo53.getInterfaces();
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray60);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str45, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java/beans/PropertyDescriptor" + "'", str51, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str52, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str58, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()Ljava.lang.Object;" + "'", str59, "()Ljava.lang.Object;");
        org.junit.Assert.assertNotNull(classArray60);
    }
}

